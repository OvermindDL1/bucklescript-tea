(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Test_client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Web = require("./web.js");
var List = require("bs-platform/lib/js/list.js");
var Vdom = require("./vdom.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Tea_cmd = require("./tea_cmd.js");
var Tea_sub = require("./tea_sub.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function programStateWrapper(initModel, pump, shutdown) {
  var model = /* record */[/* contents */initModel];
  var callbacks = /* record */[/* contents : record */[/* enqueue */(function (_msg) {
          console.log("INVALID enqueue CALL!");
          return /* () */0;
        })]];
  var pumperInterface = Curry._1(pump, callbacks);
  var pending = /* record */[/* contents */undefined];
  var handler = function (msg) {
    var match = pending[0];
    if (match !== undefined) {
      pending[0] = /* :: */[
        msg,
        match
      ];
      return /* () */0;
    } else {
      pending[0] = /* [] */0;
      var newModel = Curry._2(pumperInterface[/* handleMsg */2], model[0], msg);
      model[0] = newModel;
      var match$1 = pending[0];
      if (match$1 !== undefined) {
        var msgs = match$1;
        if (msgs) {
          pending[0] = undefined;
          return List.iter(handler, List.rev(msgs));
        } else {
          pending[0] = undefined;
          return /* () */0;
        }
      } else {
        throw [
              Caml_builtin_exceptions.failure,
              "INVALID message queue state, should never be None during message processing!"
            ];
      }
    }
  };
  var finalizedCBs = /* record */[/* enqueue */handler];
  callbacks[0] = finalizedCBs;
  var pi_requestShutdown = function (param) {
    callbacks[0] = /* record */[/* enqueue */(function (_msg) {
          console.log("INVALID message enqueued when shut down");
          return /* () */0;
        })];
    var cmd = Curry._1(shutdown, model[0]);
    Curry._1(pumperInterface[/* shutdown */3], cmd);
    return /* () */0;
  };
  var render_string = function (param) {
    return Curry._1(pumperInterface[/* render_string */1], model[0]);
  };
  Curry._1(pumperInterface[/* startup */0], /* () */0);
  return {
          pushMsg: handler,
          shutdown: pi_requestShutdown,
          getHtmlString: render_string
        };
}

function programLoop(update, view, renderCallback, subscriptions, initModel, initCmd, param) {
  if (param !== undefined) {
    var parentNode = Js_primitive.valFromOption(param);
    return (function (callbacks) {
        var priorRenderedVdom = /* record */[/* contents : [] */0];
        var latestModel = /* record */[/* contents */initModel];
        var nextFrameID = /* record */[/* contents */undefined];
        var doRender = function (_delta) {
          var match = nextFrameID[0];
          if (match !== undefined) {
            var newVdom_000 = Curry._1(view, latestModel[0]);
            var newVdom = /* :: */[
              newVdom_000,
              /* [] */0
            ];
            var justRenderedVdom = Vdom.patchVNodesIntoElement(callbacks, parentNode, priorRenderedVdom[0], newVdom);
            Curry._1(renderCallback, latestModel[0]);
            priorRenderedVdom[0] = justRenderedVdom;
            nextFrameID[0] = undefined;
            return /* () */0;
          } else {
            return /* () */0;
          }
        };
        var scheduleRender = function (param) {
          var match = nextFrameID[0];
          if (match !== undefined) {
            return /* () */0;
          } else {
            var id = window.requestAnimationFrame(doRender);
            nextFrameID[0] = id;
            return /* () */0;
          }
        };
        var clearPnode = function (param) {
          while(parentNode.childNodes.length > 0) {
            var match = parentNode.firstChild;
            if (match !== null) {
              parentNode.removeChild(match);
            }
            
          };
          return /* () */0;
        };
        var oldSub = /* record */[/* contents : NoSub */0];
        var handleSubscriptionChange = function (model) {
          var newSub = Curry._1(subscriptions, model);
          oldSub[0] = Tea_sub.run(callbacks, callbacks, oldSub[0], newSub);
          return /* () */0;
        };
        var handlerStartup = function (param) {
          clearPnode(/* () */0);
          Tea_cmd.run(callbacks, initCmd);
          handleSubscriptionChange(latestModel[0]);
          nextFrameID[0] = -1;
          doRender(16);
          return /* () */0;
        };
        var render_string = function (model) {
          return Vdom.renderToHtmlString(Curry._1(view, model));
        };
        var handler = function (model, msg) {
          var match = Curry._2(update, model, msg);
          var newModel = match[0];
          latestModel[0] = newModel;
          Tea_cmd.run(callbacks, match[1]);
          scheduleRender(/* () */0);
          handleSubscriptionChange(newModel);
          return newModel;
        };
        var handlerShutdown = function (cmd) {
          nextFrameID[0] = undefined;
          Tea_cmd.run(callbacks, cmd);
          oldSub[0] = Tea_sub.run(callbacks, callbacks, oldSub[0], /* NoSub */0);
          priorRenderedVdom[0] = /* [] */0;
          clearPnode(/* () */0);
          return /* () */0;
        };
        return /* record */[
                /* startup */handlerStartup,
                /* render_string */render_string,
                /* handleMsg */handler,
                /* shutdown */handlerShutdown
              ];
      });
  } else {
    return (function (callbacks) {
        var oldSub = /* record */[/* contents : NoSub */0];
        var handleSubscriptionChange = function (model) {
          var newSub = Curry._1(subscriptions, model);
          oldSub[0] = Tea_sub.run(callbacks, callbacks, oldSub[0], newSub);
          return /* () */0;
        };
        return /* record */[
                /* startup */(function (param) {
                    Tea_cmd.run(callbacks, initCmd);
                    handleSubscriptionChange(initModel);
                    return /* () */0;
                  }),
                /* render_string */(function (model) {
                    return Vdom.renderToHtmlString(Curry._1(view, model));
                  }),
                /* handleMsg */(function (model, msg) {
                    var match = Curry._2(update, model, msg);
                    var newModel = match[0];
                    Tea_cmd.run(callbacks, match[1]);
                    handleSubscriptionChange(newModel);
                    return newModel;
                  }),
                /* shutdown */(function (cmd) {
                    Tea_cmd.run(callbacks, cmd);
                    oldSub[0] = Tea_sub.run(callbacks, callbacks, oldSub[0], /* NoSub */0);
                    return /* () */0;
                  })
              ];
      });
  }
}

function program(param, pnode, flags) {
  Web.polyfills(/* () */0);
  var match = Curry._1(param[/* init */0], flags);
  var initModel = match[0];
  var opnode = (pnode == null) ? undefined : Js_primitive.some(pnode);
  var pumpInterface = programLoop(param[/* update */1], param[/* view */2], param[/* renderCallback */3], param[/* subscriptions */4], initModel, match[1], opnode);
  return programStateWrapper(initModel, pumpInterface, param[/* shutdown */5]);
}

function standardProgram(param, pnode, args) {
  return program(/* record */[
              /* init */param[/* init */0],
              /* update */param[/* update */1],
              /* view */param[/* view */2],
              /* renderCallback */param[/* renderCallback */3],
              /* subscriptions */param[/* subscriptions */4],
              /* shutdown */(function (_model) {
                  return /* NoCmd */0;
                })
            ], pnode, args);
}

function beginnerProgram(param, pnode, param$1) {
  var update = param[/* update */1];
  var model = param[/* model */0];
  return standardProgram(/* record */[
              /* init */(function (param) {
                  return /* tuple */[
                          model,
                          /* NoCmd */0
                        ];
                }),
              /* update */(function (model, msg) {
                  return /* tuple */[
                          Curry._2(update, model, msg),
                          /* NoCmd */0
                        ];
                }),
              /* view */param[/* view */2],
              /* renderCallback */(function (param) {
                  return /* () */0;
                }),
              /* subscriptions */(function (_model) {
                  return /* NoSub */0;
                })
            ], pnode, /* () */0);
}

var map = Vdom.map;

exports.programStateWrapper = programStateWrapper;
exports.programLoop = programLoop;
exports.program = program;
exports.standardProgram = standardProgram;
exports.beginnerProgram = beginnerProgram;
exports.map = map;
/* No side effect */

},{"./tea_cmd.js":2,"./tea_sub.js":11,"./vdom.js":13,"./web.js":14,"bs-platform/lib/js/caml_builtin_exceptions.js":37,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/js_primitive.js":57,"bs-platform/lib/js/list.js":58}],2:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Vdom = require("./vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");

function batch(cmds) {
  return /* Batch */Block.__(1, [cmds]);
}

function call(call$1) {
  return /* EnqueueCall */Block.__(2, [call$1]);
}

function fnMsg(fnMsg$1) {
  return /* EnqueueCall */Block.__(2, [(function (callbacks) {
                return Curry._1(callbacks[0][/* enqueue */0], Curry._1(fnMsg$1, /* () */0));
              })]);
}

function msg(msg$1) {
  return /* EnqueueCall */Block.__(2, [(function (callbacks) {
                return Curry._1(callbacks[0][/* enqueue */0], msg$1);
              })]);
}

function run(callbacks, param) {
  if (typeof param === "number") {
    return /* () */0;
  } else {
    switch (param.tag | 0) {
      case 1 : 
          return List.fold_left((function (param, cmd) {
                        return run(callbacks, cmd);
                      }), /* () */0, param[0]);
      case 0 : 
      case 2 : 
          return Curry._1(param[0], callbacks);
      
    }
  }
}

function map(func, cmd) {
  return /* Tagger */Block.__(0, [(function (callbacks) {
                return run(Vdom.wrapCallbacks(func, callbacks), cmd);
              })]);
}

var none = /* NoCmd */0;

exports.none = none;
exports.batch = batch;
exports.call = call;
exports.fnMsg = fnMsg;
exports.msg = msg;
exports.run = run;
exports.map = map;
/* No side effect */

},{"./vdom.js":13,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/list.js":58}],3:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Vdom = require("./vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Tea_app = require("./tea_app.js");
var Tea_cmd = require("./tea_cmd.js");
var Tea_sub = require("./tea_sub.js");
var Tea_html2 = require("./tea_html2.js");

function client_msg(msg) {
  return /* ClientMsg */Block.__(0, [msg]);
}

function debug(string_of_msg, param) {
  var shutdown = param[/* shutdown */5];
  var subscriptions = param[/* subscriptions */4];
  var renderCallback = param[/* renderCallback */3];
  var view = param[/* view */2];
  var update = param[/* update */1];
  var init = param[/* init */0];
  var init$prime = function (flags) {
    var match = Curry._1(init, flags);
    return /* tuple */[
            /* record */[
              /* history : :: */[
                /* tuple */[
                  "_init_",
                  match[0]
                ],
                /* [] */0
              ],
              /* state : Running */0,
              /* show_details */false
            ],
            Tea_cmd.map(client_msg, match[1])
          ];
  };
  var update$prime = function (model, param) {
    if (typeof param === "number") {
      if (param === 0) {
        var match = model[/* state */1];
        if (match) {
          return /* tuple */[
                  /* record */[
                    /* history */model[/* history */0],
                    /* state : Running */0,
                    /* show_details */model[/* show_details */2]
                  ],
                  /* NoCmd */0
                ];
        } else {
          return /* tuple */[
                  /* record */[
                    /* history */model[/* history */0],
                    /* state : Paused */[0],
                    /* show_details */model[/* show_details */2]
                  ],
                  /* NoCmd */0
                ];
        }
      } else {
        return /* tuple */[
                /* record */[
                  /* history */model[/* history */0],
                  /* state */model[/* state */1],
                  /* show_details */!model[/* show_details */2]
                ],
                /* NoCmd */0
              ];
      }
    } else if (param.tag) {
      return /* tuple */[
              /* record */[
                /* history */model[/* history */0],
                /* state : Paused */[param[0]],
                /* show_details */model[/* show_details */2]
              ],
              /* NoCmd */0
            ];
    } else if (model[/* state */1] === /* Running */0) {
      var msg = param[0];
      var match$1 = List.hd(model[/* history */0]);
      var match$2 = Curry._2(update, match$1[1], msg);
      var dmodel$prime_000 = /* history : :: */[
        /* tuple */[
          Curry._1(string_of_msg, msg),
          match$2[0]
        ],
        model[/* history */0]
      ];
      var dmodel$prime_001 = /* state */model[/* state */1];
      var dmodel$prime_002 = /* show_details */model[/* show_details */2];
      var dmodel$prime = /* record */[
        dmodel$prime_000,
        dmodel$prime_001,
        dmodel$prime_002
      ];
      return /* tuple */[
              dmodel$prime,
              Tea_cmd.map(client_msg, match$2[1])
            ];
    } else {
      return /* tuple */[
              model,
              /* NoCmd */0
            ];
    }
  };
  var view_styles = function (param) {
    var rule = function (selector, properties) {
      return /* Text */Block.__(1, [Curry._2(Printf.sprintf(/* Format */[
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " {",
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* Char_literal */Block.__(12, [
                                          /* "}" */125,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "%s {%s}"
                        ]), selector, $$String.concat(";", List.map((function (param) {
                                return param[0] + (":" + param[1]);
                              }), properties)))]);
    };
    return Tea_html2.node(undefined, "style", undefined, undefined, /* [] */0, /* :: */[
                rule("#debug.paused", /* :: */[
                      /* tuple */[
                        "position",
                        "fixed"
                      ],
                      /* :: */[
                        /* tuple */[
                          "top",
                          "0"
                        ],
                        /* :: */[
                          /* tuple */[
                            "left",
                            "0"
                          ],
                          /* :: */[
                            /* tuple */[
                              "width",
                              "100%"
                            ],
                            /* :: */[
                              /* tuple */[
                                "height",
                                "100%"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "pointer-events",
                                  "all"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "background-color",
                                    "rgba(0,0,0,.1)"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "box-shadow",
                                      "inset 0 0 10px #333"
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]),
                /* :: */[
                  rule("#debug nav", /* :: */[
                        /* tuple */[
                          "position",
                          "fixed"
                        ],
                        /* :: */[
                          /* tuple */[
                            "bottom",
                            "0"
                          ],
                          /* :: */[
                            /* tuple */[
                              "right",
                              "6px"
                            ],
                            /* :: */[
                              /* tuple */[
                                "border-radius",
                                "4px 4px 0 0"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "background-color",
                                  "#444"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "color",
                                    "#fff"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "font-family",
                                      "monospace"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "box-shadow",
                                        "0 0 10px #333"
                                      ],
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]),
                  /* :: */[
                    rule("#debug.paused nav", /* :: */[
                          /* tuple */[
                            "height",
                            "50%"
                          ],
                          /* :: */[
                            /* tuple */[
                              "padding-bottom",
                              "2em"
                            ],
                            /* [] */0
                          ]
                        ]),
                    /* :: */[
                      rule("#debug nav .toggle", /* :: */[
                            /* tuple */[
                              "padding",
                              "6px"
                            ],
                            /* :: */[
                              /* tuple */[
                                "cursor",
                                "pointer"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "min-width",
                                  "24ch"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "text-align",
                                    "center"
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]),
                      /* :: */[
                        rule("#debug nav .toggle:before", /* :: */[
                              /* tuple */[
                                "content",
                                "' '"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "position",
                                  "absolute"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "left",
                                    "0"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "top",
                                      "0"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "width",
                                        ".5ch"
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "height",
                                          "1.8ch"
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "margin",
                                            ".8ch 1ch"
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "border",
                                              "solid #fff"
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "border-width",
                                                "0 .5ch"
                                              ],
                                              /* [] */0
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]),
                        /* :: */[
                          rule("#debug.paused nav .toggle:before", /* :: */[
                                /* tuple */[
                                  "border-color",
                                  "transparent"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "border-left-color",
                                    "#fff"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "border-width",
                                      "1ch"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "width",
                                        "0"
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "height",
                                          "0"
                                        ],
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]),
                          /* :: */[
                            rule("#debug nav .history", /* :: */[
                                  /* tuple */[
                                    "margin",
                                    "0"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "padding",
                                      "0"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "height",
                                        "100%"
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "overflow-y",
                                          "auto"
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "list-style",
                                            "none"
                                          ],
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]
                                ]),
                            /* :: */[
                              rule("#debug nav .history li", /* :: */[
                                    /* tuple */[
                                      "margin",
                                      "0"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "padding",
                                        "0.2ch"
                                      ],
                                      /* [] */0
                                    ]
                                  ]),
                              /* :: */[
                                rule("#debug nav .history li.selected", /* :: */[
                                      /* tuple */[
                                        "background-color",
                                        "#333"
                                      ],
                                      /* [] */0
                                    ]),
                                /* :: */[
                                  rule("#debug nav .history span.details", /* :: */[
                                        /* tuple */[
                                          "display",
                                          "inline-block"
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "cursor",
                                            "pointer"
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "width",
                                              "1ch"
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "margin",
                                                "0 1ch"
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "vertical-align",
                                                  "super"
                                                ],
                                                /* [] */0
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]),
                                  /* :: */[
                                    rule("#debug nav .history li.selected span.details:after", /* :: */[
                                          /* tuple */[
                                            "content",
                                            "'\\2026'"
                                          ],
                                          /* [] */0
                                        ]),
                                    /* :: */[
                                      rule("#debug nav .history li.selected span.details.show:before", /* :: */[
                                            /* tuple */[
                                              "position",
                                              "absolute"
                                            ],
                                            /* :: */[
                                              /* tuple */[
                                                "content",
                                                "' '"
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "border",
                                                  "solid transparent"
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "border-right-color",
                                                    "#333"
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "border-width",
                                                      "1.6ch"
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "margin-left",
                                                        "-4.4ch"
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          "margin-top",
                                                          "-.3ch"
                                                        ],
                                                        /* [] */0
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]),
                                      /* :: */[
                                        rule("#debug nav .history span.message", /* :: */[
                                              /* tuple */[
                                                "display",
                                                "inline-block"
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "cursor",
                                                  "pointer"
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "white-space",
                                                    "nowrap"
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "overflow",
                                                      "hidden"
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "text-overflow",
                                                        "ellipsis"
                                                      ],
                                                      /* [] */0
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]),
                                        /* :: */[
                                          rule("#debug nav .history span.index", /* :: */[
                                                /* tuple */[
                                                  "display",
                                                  "inline-block"
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    "min-width",
                                                    "3ch"
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "margin",
                                                      "0 1ch"
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "color",
                                                        "#aaa"
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          "text-align",
                                                          "right"
                                                        ],
                                                        /* :: */[
                                                          /* tuple */[
                                                            "float",
                                                            "right"
                                                          ],
                                                          /* [] */0
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]
                                              ]),
                                          /* :: */[
                                            rule("#debug aside.details", /* :: */[
                                                  /* tuple */[
                                                    "position",
                                                    "absolute"
                                                  ],
                                                  /* :: */[
                                                    /* tuple */[
                                                      "width",
                                                      "40ch"
                                                    ],
                                                    /* :: */[
                                                      /* tuple */[
                                                        "top",
                                                        "0"
                                                      ],
                                                      /* :: */[
                                                        /* tuple */[
                                                          "bottom",
                                                          "0"
                                                        ],
                                                        /* :: */[
                                                          /* tuple */[
                                                            "right",
                                                            "100%"
                                                          ],
                                                          /* :: */[
                                                            /* tuple */[
                                                              "margin-right",
                                                              "1.5ch"
                                                            ],
                                                            /* :: */[
                                                              /* tuple */[
                                                                "overflow",
                                                                "scroll"
                                                              ],
                                                              /* :: */[
                                                                /* tuple */[
                                                                  "background-color",
                                                                  "#fff"
                                                                ],
                                                                /* :: */[
                                                                  /* tuple */[
                                                                    "color",
                                                                    "#000"
                                                                  ],
                                                                  /* :: */[
                                                                    /* tuple */[
                                                                      "box-shadow",
                                                                      "0 0 10px #333"
                                                                    ],
                                                                    /* :: */[
                                                                      /* tuple */[
                                                                        "border-radius",
                                                                        "4px 4px 0 0"
                                                                      ],
                                                                      /* :: */[
                                                                        /* tuple */[
                                                                          "border",
                                                                          "2px solid #333"
                                                                        ],
                                                                        /* :: */[
                                                                          /* tuple */[
                                                                            "padding",
                                                                            "1ch"
                                                                          ],
                                                                          /* :: */[
                                                                            /* tuple */[
                                                                              "white-space",
                                                                              "pre"
                                                                            ],
                                                                            /* [] */0
                                                                          ]
                                                                        ]
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ]
                                                        ]
                                                      ]
                                                    ]
                                                  ]
                                                ]),
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]);
  };
  var view_details = function (model) {
    var format = (
        function (v) {
          var formatRecord = function (data, labels) {
            return data.reduce(
              function (acc, cur, index) {
                acc[labels[index]] = formatValue(cur)
                return acc
              }, {})
          }
          var listToArray = function (data) {
            var result = []
            var cur = data
            while (typeof cur !== "number") {
              result.push(formatValue(cur[0]))
              cur = cur[1]
            }
            return result
          }
          var formatVariant = function (data, recordVariant) {
            if (recordVariant === "::") {
              return listToArray(data)
            }
            else {
              return formatRecord(data, [recordVariant])
            }
          }
          var formatValue = function (x) {
            var recordLabels, recordVariant, recordModule, recordPolyVar
            if (x == null) {
              return null
            }
            else if ((recordLabels = x[Symbol.for('BsRecord')]) !== undefined) {
              return formatRecord(x, recordLabels)
            }
            else if ((recordModule = x[Symbol.for('BsLocalModule')]) !== undefined) {
              return formatRecord(x, recordModule)
            }
            else if ((recordVariant = x[Symbol.for('BsVariant')]) !== undefined) {
              return formatVariant(x, recordVariant)
            }
            else if ((recordPolyVar = x[Symbol.for('BsPolyVar')]) !== undefined) {
              return x[1]
            }
            else if (Array.isArray(x)) {
              // tuple
              return x.map(formatValue)
            }
            else {
              // scalar
              return x
            }
          }
          return JSON.stringify(formatValue(v), null, 2);
        }
      );
    return Tea_html2.aside(undefined, undefined, /* :: */[
                Curry._1(Tea_html2.Attributes[/* class' */3], "details"),
                /* [] */0
              ], /* :: */[
                /* Text */Block.__(1, [Curry._1(format, model)]),
                /* [] */0
              ]);
  };
  var view_history = function (model, selected_index) {
    var count = List.length(model[/* history */0]);
    return Tea_html2.ul(undefined, undefined, /* :: */[
                Curry._1(Tea_html2.Attributes[/* class' */3], "history"),
                /* [] */0
              ], List.mapi((function (i, param) {
                      var selected = i === selected_index;
                      return Tea_html2.li(undefined, undefined, /* :: */[
                                  Curry._1(Tea_html2.Events[/* onClick */9], /* SelectHistoryItem */Block.__(1, [i])),
                                  /* :: */[
                                    Curry._1(Tea_html2.Attributes[/* classList */4], /* :: */[
                                          /* tuple */[
                                            "selected",
                                            selected
                                          ],
                                          /* [] */0
                                        ]),
                                    /* [] */0
                                  ]
                                ], /* :: */[
                                  Tea_html2.span(undefined, undefined, /* :: */[
                                        Curry._1(Tea_html2.Attributes[/* classList */4], /* :: */[
                                              /* tuple */[
                                                "details",
                                                true
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "show",
                                                  selected && model[/* show_details */2]
                                                ],
                                                /* [] */0
                                              ]
                                            ]),
                                        selected ? /* :: */[
                                            Curry._1(Tea_html2.Events[/* onClick */9], /* ToggleDetails */1),
                                            /* :: */[
                                              Curry._1(Tea_html2.Attributes[/* title */6], "toggle details"),
                                              /* [] */0
                                            ]
                                          ] : /* :: */[
                                            Tea_html2.Attributes[/* noProp */0],
                                            /* :: */[
                                              Tea_html2.Attributes[/* noProp */0],
                                              /* [] */0
                                            ]
                                          ]
                                      ], /* :: */[
                                        selected && model[/* show_details */2] ? view_details(param[1]) : Tea_html2.noNode,
                                        /* [] */0
                                      ]),
                                  /* :: */[
                                    Tea_html2.span(undefined, undefined, /* :: */[
                                          Curry._1(Tea_html2.Attributes[/* class' */3], "message"),
                                          /* [] */0
                                        ], /* :: */[
                                          /* Text */Block.__(1, [param[0]]),
                                          /* [] */0
                                        ]),
                                    /* :: */[
                                      Tea_html2.span(undefined, undefined, /* :: */[
                                            Curry._1(Tea_html2.Attributes[/* class' */3], "index"),
                                            /* [] */0
                                          ], /* :: */[
                                            /* Text */Block.__(1, [String(count - i | 0)]),
                                            /* [] */0
                                          ]),
                                      /* [] */0
                                    ]
                                  ]
                                ]);
                    }), model[/* history */0]));
  };
  var view$prime = function (model) {
    var match = model[/* state */1];
    var match$1;
    if (match) {
      var index = match[0];
      match$1 = /* tuple */[
        index,
        List.nth(model[/* history */0], index)[1],
        true
      ];
    } else {
      match$1 = /* tuple */[
        0,
        List.hd(model[/* history */0])[1],
        false
      ];
    }
    var paused = match$1[2];
    var history_count = List.length(model[/* history */0]);
    var vnode = Curry._1(view, match$1[1]);
    return Tea_html2.div(undefined, undefined, /* [] */0, /* :: */[
                Vdom.map(client_msg, vnode),
                /* :: */[
                  Tea_html2.div(undefined, undefined, /* :: */[
                        Curry._1(Tea_html2.Attributes[/* id */5], "debug"),
                        /* :: */[
                          Curry._1(Tea_html2.Attributes[/* classList */4], /* :: */[
                                /* tuple */[
                                  "paused",
                                  paused
                                ],
                                /* [] */0
                              ]),
                          /* [] */0
                        ]
                      ], /* :: */[
                        view_styles(/* () */0),
                        /* :: */[
                          Tea_html2.nav(undefined, undefined, /* [] */0, /* :: */[
                                Tea_html2.div(undefined, undefined, /* :: */[
                                      Curry._1(Tea_html2.Attributes[/* class' */3], "toggle"),
                                      /* :: */[
                                        Curry._1(Tea_html2.Events[/* onClick */9], /* TogglePaused */0),
                                        /* :: */[
                                          paused ? Curry._1(Tea_html2.Attributes[/* title */6], "click to resume") : Curry._1(Tea_html2.Attributes[/* title */6], "click to pause"),
                                          /* [] */0
                                        ]
                                      ]
                                    ], /* :: */[
                                      /* Text */Block.__(1, [Curry._1(Printf.sprintf(/* Format */[
                                                    /* String_literal */Block.__(11, [
                                                        "Explore History (",
                                                        /* Int */Block.__(4, [
                                                            /* Int_d */0,
                                                            /* No_padding */0,
                                                            /* No_precision */0,
                                                            /* Char_literal */Block.__(12, [
                                                                /* ")" */41,
                                                                /* End_of_format */0
                                                              ])
                                                          ])
                                                      ]),
                                                    "Explore History (%d)"
                                                  ]), history_count)]),
                                      /* [] */0
                                    ]),
                                /* :: */[
                                  paused ? view_history(model, match$1[0]) : Tea_html2.noNode,
                                  /* [] */0
                                ]
                              ]),
                          /* [] */0
                        ]
                      ]),
                  /* [] */0
                ]
              ]);
  };
  var renderCallback$prime = function (model) {
    return Curry._1(renderCallback, List.hd(model[/* history */0])[1]);
  };
  var subscriptions$prime = function (model) {
    return Tea_sub.map(client_msg, Curry._1(subscriptions, List.hd(model[/* history */0])[1]));
  };
  var shutdown$prime = function (model) {
    return Tea_cmd.map(client_msg, Curry._1(shutdown, List.hd(model[/* history */0])[1]));
  };
  return /* record */[
          /* init */init$prime,
          /* update */update$prime,
          /* view */view$prime,
          /* renderCallback */renderCallback$prime,
          /* subscriptions */subscriptions$prime,
          /* shutdown */shutdown$prime
        ];
}

function beginnerProgram(param, string_of_msg, pnode, flags) {
  var update = param[/* update */1];
  var model = param[/* model */0];
  var debugged = debug(string_of_msg, /* record */[
        /* init */(function (param) {
            return /* tuple */[
                    model,
                    /* NoCmd */0
                  ];
          }),
        /* update */(function (model, msg) {
            return /* tuple */[
                    Curry._2(update, model, msg),
                    /* NoCmd */0
                  ];
          }),
        /* view */param[/* view */2],
        /* renderCallback */(function (param) {
            return /* () */0;
          }),
        /* subscriptions */(function (_model) {
            return /* NoSub */0;
          }),
        /* shutdown */(function (_model) {
            return /* NoCmd */0;
          })
      ]);
  return Tea_app.program(debugged, pnode, flags);
}

function standardProgram(param, string_of_msg, pnode, flags) {
  var debugged = debug(string_of_msg, /* record */[
        /* init */param[/* init */0],
        /* update */param[/* update */1],
        /* view */param[/* view */2],
        /* renderCallback */param[/* renderCallback */3],
        /* subscriptions */param[/* subscriptions */4],
        /* shutdown */(function (_model) {
            return /* NoCmd */0;
          })
      ]);
  return Tea_app.program(debugged, pnode, flags);
}

function program(param, string_of_msg, pnode, flags) {
  var debugged = debug(string_of_msg, /* record */[
        /* init */param[/* init */0],
        /* update */param[/* update */1],
        /* view */param[/* view */2],
        /* renderCallback */param[/* renderCallback */3],
        /* subscriptions */param[/* subscriptions */4],
        /* shutdown */param[/* shutdown */5]
      ]);
  return Tea_app.program(debugged, pnode, flags);
}

exports.debug = debug;
exports.beginnerProgram = beginnerProgram;
exports.standardProgram = standardProgram;
exports.program = program;
/* Tea_html2 Not a pure module */

},{"./tea_app.js":1,"./tea_cmd.js":2,"./tea_html2.js":6,"./tea_sub.js":11,"./vdom.js":13,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/list.js":58,"bs-platform/lib/js/printf.js":60,"bs-platform/lib/js/string.js":61}],4:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Tea_task = require("./tea_task.js");
var Web_window_localstorage = require("./web_window_localstorage.js");

var length = /* Task */[(function (cb) {
      var match = Web_window_localstorage.length(window);
      if (match !== undefined) {
        return Curry._1(cb, /* Ok */Block.__(0, [match]));
      } else {
        return Curry._1(cb, /* Error */Block.__(1, ["localStorage is not available"]));
      }
    })];

var clear = /* Task */[(function (cb) {
      var match = Web_window_localstorage.clear(window);
      if (match !== undefined) {
        return Curry._1(cb, /* Ok */Block.__(0, [match]));
      } else {
        return Curry._1(cb, /* Error */Block.__(1, ["localStorage is not available"]));
      }
    })];

function clearCmd(param) {
  return Tea_task.attemptOpt((function (param) {
                return undefined;
              }), clear);
}

function key(idx) {
  return /* Task */[(function (cb) {
              var match = Web_window_localstorage.key(window, idx);
              if (match !== undefined) {
                return Curry._1(cb, /* Ok */Block.__(0, [match]));
              } else {
                return Curry._1(cb, /* Error */Block.__(1, ["localStorage is not available"]));
              }
            })];
}

function getItem(key) {
  return /* Task */[(function (cb) {
              var match = Web_window_localstorage.getItem(window, key);
              if (match !== undefined) {
                return Curry._1(cb, /* Ok */Block.__(0, [match]));
              } else {
                return Curry._1(cb, /* Error */Block.__(1, ["localStorage is not available"]));
              }
            })];
}

function removeItem(key) {
  return /* Task */[(function (cb) {
              var match = Web_window_localstorage.removeItem(window, key);
              if (match !== undefined) {
                return Curry._1(cb, /* Ok */Block.__(0, [match]));
              } else {
                return Curry._1(cb, /* Error */Block.__(1, ["localStorage is not available"]));
              }
            })];
}

function removeItemCmd(key) {
  return Tea_task.attemptOpt((function (param) {
                return undefined;
              }), removeItem(key));
}

function setItem(key, value) {
  return /* Task */[(function (cb) {
              var match = Web_window_localstorage.setItem(window, key, value);
              if (match !== undefined) {
                return Curry._1(cb, /* Ok */Block.__(0, [/* () */0]));
              } else {
                return Curry._1(cb, /* Error */Block.__(1, ["localStorage is not available"]));
              }
            })];
}

function setItemCmd(key, value) {
  return Tea_task.attemptOpt((function (param) {
                return undefined;
              }), setItem(key, value));
}

var LocalStorage = /* module */[
  /* length */length,
  /* clear */clear,
  /* clearCmd */clearCmd,
  /* key */key,
  /* getItem */getItem,
  /* removeItem */removeItem,
  /* removeItemCmd */removeItemCmd,
  /* setItem */setItem,
  /* setItemCmd */setItemCmd
];

exports.LocalStorage = LocalStorage;
/* No side effect */

},{"./tea_task.js":12,"./web_window_localstorage.js":20,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/curry.js":54}],5:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Vdom = require("./vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Tea_app = require("./tea_app.js");
var Tea_json = require("./tea_json.js");
var Tea_result = require("./tea_result.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function text(str) {
  return /* Text */Block.__(1, [str]);
}

var lazy1 = Vdom.lazyGen;

function node($staropt$star, tagName, $staropt$star$1, $staropt$star$2, props, nodes) {
  var namespace = $staropt$star !== undefined ? $staropt$star : "";
  var key = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  var unique = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
  return Vdom.fullnode(namespace, tagName, key, unique, props, nodes);
}

function br(props) {
  return Vdom.fullnode("", "br", "br", "br", props, /* [] */0);
}

function br$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "br", key, unique, props, nodes);
}

function div($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "div", key, unique, props, nodes);
}

function span($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "span", key, unique, props, nodes);
}

function p($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "p", key, unique, props, nodes);
}

function pre($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "pre", key, unique, props, nodes);
}

function a($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "a", key, unique, props, nodes);
}

function section($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "section", key, unique, props, nodes);
}

function header($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "header", key, unique, props, nodes);
}

function footer($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "footer", key, unique, props, nodes);
}

function h1($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h1", key, unique, props, nodes);
}

function h2($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h2", key, unique, props, nodes);
}

function h3($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h3", key, unique, props, nodes);
}

function h4($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h4", key, unique, props, nodes);
}

function h5($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h5", key, unique, props, nodes);
}

function h6($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h6", key, unique, props, nodes);
}

function i($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "i", key, unique, props, nodes);
}

function strong($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "strong", key, unique, props, nodes);
}

function button($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "button", key, unique, props, nodes);
}

function input$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "input", key, unique, props, nodes);
}

function textarea($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "textarea", key, unique, props, nodes);
}

function label($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "label", key, unique, props, nodes);
}

function ul($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "ul", key, unique, props, nodes);
}

function ol($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "ol", key, unique, props, nodes);
}

function li($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "li", key, unique, props, nodes);
}

function table($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "table", key, unique, props, nodes);
}

function thead($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "thead", key, unique, props, nodes);
}

function tfoot($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "tfoot", key, unique, props, nodes);
}

function tbody($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "tbody", key, unique, props, nodes);
}

function th($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "th", key, unique, props, nodes);
}

function tr($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "tr", key, unique, props, nodes);
}

function td($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "td", key, unique, props, nodes);
}

function progress($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "progress", key, unique, props, nodes);
}

function img($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "img", key, unique, props, nodes);
}

function select($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "select", key, unique, props, nodes);
}

function option$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "option", key, unique, props, nodes);
}

function form($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "form", key, unique, props, nodes);
}

function nav($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "nav", key, unique, props, nodes);
}

function main($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "main", key, unique, props, nodes);
}

function aside($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "aside", key, unique, props, nodes);
}

function article($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "article", key, unique, props, nodes);
}

function details($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "details", key, unique, props, nodes);
}

function figcaption($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "figcaption", key, unique, props, nodes);
}

function figure($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "figure", key, unique, props, nodes);
}

function mark($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "mark", key, unique, props, nodes);
}

function summary($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "summary", key, unique, props, nodes);
}

function time($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "time", key, unique, props, nodes);
}

function hr($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "hr", key, unique, props, nodes);
}

function blockquote($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "blockquote", key, unique, props, nodes);
}

function code($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "code", key, unique, props, nodes);
}

function em($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "em", key, unique, props, nodes);
}

function b($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "b", key, unique, props, nodes);
}

function u($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "u", key, unique, props, nodes);
}

function sub($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "sub", key, unique, props, nodes);
}

function sup($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "sup", key, unique, props, nodes);
}

function dl($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "dl", key, unique, props, nodes);
}

function dt($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "dt", key, unique, props, nodes);
}

function dd($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "dd", key, unique, props, nodes);
}

function iframe($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "iframe", key, unique, props, nodes);
}

function canvas($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "canvas", key, unique, props, nodes);
}

function address($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "address", key, unique, props, nodes);
}

function caption($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "caption", key, unique, props, nodes);
}

function colgroup($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "colgroup", key, unique, props, nodes);
}

function col($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "col", key, unique, props, nodes);
}

function fieldset($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "fieldset", key, unique, props, nodes);
}

function legend($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "legend", key, unique, props, nodes);
}

function datalist($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "datalist", key, unique, props, nodes);
}

function optgroup($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "optgroup", key, unique, props, nodes);
}

function output($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "output", key, unique, props, nodes);
}

function meter($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "meter", key, unique, props, nodes);
}

function audio($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "audio", key, unique, props, nodes);
}

function video($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "video", key, unique, props, nodes);
}

function source($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "source", key, unique, props, nodes);
}

function track($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "track", key, unique, props, nodes);
}

function embed($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "embed", key, unique, props, nodes);
}

function object$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "object", key, unique, props, nodes);
}

function param($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "param", key, unique, props, nodes);
}

function ins($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "ins", key, unique, props, nodes);
}

function del($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "del", key, unique, props, nodes);
}

function small($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "small", key, unique, props, nodes);
}

function cite($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "cite", key, unique, props, nodes);
}

function dfn($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "dfn", key, unique, props, nodes);
}

function abbr($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "abbr", key, unique, props, nodes);
}

function var$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "var", key, unique, props, nodes);
}

function samp($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "samp", key, unique, props, nodes);
}

function kbd($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "kbd", key, unique, props, nodes);
}

function s($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "s", key, unique, props, nodes);
}

function q($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "q", key, unique, props, nodes);
}

function rt($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "rt", key, unique, props, nodes);
}

function bdi($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "bdi", key, unique, props, nodes);
}

function bdo($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "bdo", key, unique, props, nodes);
}

function wbr($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "wbr", key, unique, props, nodes);
}

function menuitem($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "menuitem", key, unique, props, nodes);
}

function menu($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "menu", key, unique, props, nodes);
}

function id(str) {
  return /* RawProp */Block.__(0, [
            "id",
            str
          ]);
}

function href(str) {
  return /* Attribute */Block.__(1, [
            "",
            "href",
            str
          ]);
}

function src(str) {
  return /* Attribute */Block.__(1, [
            "",
            "src",
            str
          ]);
}

function title(str) {
  return /* Attribute */Block.__(1, [
            "",
            "title",
            str
          ]);
}

function class$prime(name) {
  return /* RawProp */Block.__(0, [
            "className",
            name
          ]);
}

function classList(classes) {
  var name = $$String.concat(" ", List.map((function (param) {
              return param[0];
            }), List.filter((function (param) {
                    return param[1];
                  }))(classes)));
  return /* RawProp */Block.__(0, [
            "className",
            name
          ]);
}

function type$prime(typ) {
  return /* RawProp */Block.__(0, [
            "type",
            typ
          ]);
}

var style = Vdom.style;

function styles(s) {
  return /* Style */Block.__(4, [s]);
}

function placeholder(str) {
  return /* RawProp */Block.__(0, [
            "placeholder",
            str
          ]);
}

function autofocus(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "autofocus",
              "autofocus"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function value(str) {
  return /* RawProp */Block.__(0, [
            "value",
            str
          ]);
}

function name(str) {
  return /* RawProp */Block.__(0, [
            "name",
            str
          ]);
}

function checked(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "checked",
              "checked"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function for$prime(str) {
  return /* RawProp */Block.__(0, [
            "htmlFor",
            str
          ]);
}

function hidden(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "hidden",
              "hidden"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function target(t) {
  return /* RawProp */Block.__(0, [
            "target",
            t
          ]);
}

function action(a) {
  return /* RawProp */Block.__(0, [
            "action",
            a
          ]);
}

function method$prime(m) {
  return /* RawProp */Block.__(0, [
            "method",
            m
          ]);
}

var onCB = Vdom.onCB;

var onMsg = Vdom.onMsg;

function onInputOpt($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return Vdom.onCB("input", key, (function (ev) {
                var match = ev.target;
                if (match !== undefined) {
                  var match$1 = match.value;
                  if (match$1 !== undefined) {
                    return Curry._1(msg, match$1);
                  } else {
                    return undefined;
                  }
                }
                
              }));
}

function onInput($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return onInputOpt(key, (function (ev) {
                return Js_primitive.some(Curry._1(msg, ev));
              }));
}

function onChangeOpt($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return Vdom.onCB("change", key, (function (ev) {
                var match = ev.target;
                if (match !== undefined) {
                  var match$1 = match.value;
                  if (match$1 !== undefined) {
                    return Curry._1(msg, match$1);
                  } else {
                    return undefined;
                  }
                }
                
              }));
}

function onChange($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return onChangeOpt(key, (function (ev) {
                return Js_primitive.some(Curry._1(msg, ev));
              }));
}

function onClick(msg) {
  return Vdom.onMsg("click", msg);
}

function onDoubleClick(msg) {
  return Vdom.onMsg("dblclick", msg);
}

function onBlur(msg) {
  return Vdom.onMsg("blur", msg);
}

function onFocus(msg) {
  return Vdom.onMsg("focus", msg);
}

function onCheckOpt($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return Vdom.onCB("change", key, (function (ev) {
                var match = ev.target;
                if (match !== undefined) {
                  var match$1 = match.checked;
                  if (match$1 !== undefined) {
                    return Curry._1(msg, match$1);
                  } else {
                    return undefined;
                  }
                }
                
              }));
}

function onCheck($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return onCheckOpt(key, (function (ev) {
                return Js_primitive.some(Curry._1(msg, ev));
              }));
}

function onMouseDown(msg) {
  return Vdom.onMsg("mousedown", msg);
}

function onMouseUp(msg) {
  return Vdom.onMsg("mouseup", msg);
}

function onMouseEnter(msg) {
  return Vdom.onMsg("mouseenter", msg);
}

function onMouseLeave(msg) {
  return Vdom.onMsg("mouseleave", msg);
}

function onMouseOver(msg) {
  return Vdom.onMsg("mouseover", msg);
}

function onMouseOut(msg) {
  return Vdom.onMsg("mouseout", msg);
}

var defaultOptions = /* record */[
  /* stopPropagation */false,
  /* preventDefault */false
];

function onWithOptions(key, eventName, options, decoder) {
  return Vdom.onCB(eventName, key, (function ($$event) {
                if (options[/* stopPropagation */0]) {
                  $$event.stopPropagation();
                }
                if (options[/* preventDefault */1]) {
                  $$event.preventDefault();
                }
                return Tea_result.result_to_option(Tea_json.Decoder[/* decodeEvent */31](decoder, $$event));
              }));
}

function on(key, eventName, decoder) {
  return onWithOptions(key, eventName, defaultOptions, decoder);
}

var targetValue = Tea_json.Decoder[/* at */12](/* :: */[
      "target",
      /* :: */[
        "value",
        /* [] */0
      ]
    ], Tea_json.Decoder[/* string */2]);

var targetChecked = Tea_json.Decoder[/* at */12](/* :: */[
      "target",
      /* :: */[
        "checked",
        /* [] */0
      ]
    ], Tea_json.Decoder[/* bool */5]);

var keyCode = Tea_json.Decoder[/* field */11]("keyCode", Tea_json.Decoder[/* int */3]);

function max(value) {
  return /* Attribute */Block.__(1, [
            "",
            "max",
            value
          ]);
}

function min(value) {
  return /* Attribute */Block.__(1, [
            "",
            "min",
            value
          ]);
}

function step(value) {
  return /* Attribute */Block.__(1, [
            "",
            "step",
            value
          ]);
}

function disabled(b) {
  if (b) {
    return /* Attribute */Block.__(1, [
              "",
              "disabled",
              "true"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function selected(b) {
  if (b) {
    return /* Attribute */Block.__(1, [
              "",
              "selected",
              "true"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function acceptCharset(c) {
  return /* Attribute */Block.__(1, [
            "",
            "accept-charset",
            c
          ]);
}

function rel(value) {
  return /* Attribute */Block.__(1, [
            "",
            "rel",
            value
          ]);
}

var Attributes = /* module */[
  /* max */max,
  /* min */min,
  /* step */step,
  /* disabled */disabled,
  /* selected */selected,
  /* acceptCharset */acceptCharset,
  /* rel */rel
];

var Cmds = 0;

var map = Tea_app.map;

var noNode = Vdom.noNode;

var noProp = /* NoProp */0;

exports.Cmds = Cmds;
exports.map = map;
exports.noNode = noNode;
exports.text = text;
exports.lazy1 = lazy1;
exports.node = node;
exports.br = br;
exports.br$prime = br$prime;
exports.div = div;
exports.span = span;
exports.p = p;
exports.pre = pre;
exports.a = a;
exports.section = section;
exports.header = header;
exports.footer = footer;
exports.h1 = h1;
exports.h2 = h2;
exports.h3 = h3;
exports.h4 = h4;
exports.h5 = h5;
exports.h6 = h6;
exports.i = i;
exports.strong = strong;
exports.button = button;
exports.input$prime = input$prime;
exports.textarea = textarea;
exports.label = label;
exports.ul = ul;
exports.ol = ol;
exports.li = li;
exports.table = table;
exports.thead = thead;
exports.tfoot = tfoot;
exports.tbody = tbody;
exports.th = th;
exports.tr = tr;
exports.td = td;
exports.progress = progress;
exports.img = img;
exports.select = select;
exports.option$prime = option$prime;
exports.form = form;
exports.nav = nav;
exports.main = main;
exports.aside = aside;
exports.article = article;
exports.details = details;
exports.figcaption = figcaption;
exports.figure = figure;
exports.mark = mark;
exports.summary = summary;
exports.time = time;
exports.hr = hr;
exports.blockquote = blockquote;
exports.code = code;
exports.em = em;
exports.b = b;
exports.u = u;
exports.sub = sub;
exports.sup = sup;
exports.dl = dl;
exports.dt = dt;
exports.dd = dd;
exports.iframe = iframe;
exports.canvas = canvas;
exports.address = address;
exports.caption = caption;
exports.colgroup = colgroup;
exports.col = col;
exports.fieldset = fieldset;
exports.legend = legend;
exports.datalist = datalist;
exports.optgroup = optgroup;
exports.output = output;
exports.meter = meter;
exports.audio = audio;
exports.video = video;
exports.source = source;
exports.track = track;
exports.embed = embed;
exports.object$prime = object$prime;
exports.param = param;
exports.ins = ins;
exports.del = del;
exports.small = small;
exports.cite = cite;
exports.dfn = dfn;
exports.abbr = abbr;
exports.var$prime = var$prime;
exports.samp = samp;
exports.kbd = kbd;
exports.s = s;
exports.q = q;
exports.rt = rt;
exports.bdi = bdi;
exports.bdo = bdo;
exports.wbr = wbr;
exports.menuitem = menuitem;
exports.menu = menu;
exports.noProp = noProp;
exports.id = id;
exports.href = href;
exports.src = src;
exports.title = title;
exports.class$prime = class$prime;
exports.classList = classList;
exports.type$prime = type$prime;
exports.style = style;
exports.styles = styles;
exports.placeholder = placeholder;
exports.autofocus = autofocus;
exports.value = value;
exports.name = name;
exports.checked = checked;
exports.for$prime = for$prime;
exports.hidden = hidden;
exports.target = target;
exports.action = action;
exports.method$prime = method$prime;
exports.onCB = onCB;
exports.onMsg = onMsg;
exports.onInputOpt = onInputOpt;
exports.onInput = onInput;
exports.onChangeOpt = onChangeOpt;
exports.onChange = onChange;
exports.onClick = onClick;
exports.onDoubleClick = onDoubleClick;
exports.onBlur = onBlur;
exports.onFocus = onFocus;
exports.onCheckOpt = onCheckOpt;
exports.onCheck = onCheck;
exports.onMouseDown = onMouseDown;
exports.onMouseUp = onMouseUp;
exports.onMouseEnter = onMouseEnter;
exports.onMouseLeave = onMouseLeave;
exports.onMouseOver = onMouseOver;
exports.onMouseOut = onMouseOut;
exports.defaultOptions = defaultOptions;
exports.onWithOptions = onWithOptions;
exports.on = on;
exports.targetValue = targetValue;
exports.targetChecked = targetChecked;
exports.keyCode = keyCode;
exports.Attributes = Attributes;
/* targetValue Not a pure module */

},{"./tea_app.js":1,"./tea_json.js":8,"./tea_result.js":10,"./vdom.js":13,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/js_primitive.js":57,"bs-platform/lib/js/list.js":58,"bs-platform/lib/js/string.js":61}],6:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Vdom = require("./vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Tea_app = require("./tea_app.js");
var Tea_html = require("./tea_html.js");
var Tea_json = require("./tea_json.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function text(str) {
  return /* Text */Block.__(1, [str]);
}

function node($staropt$star, tagName, $staropt$star$1, $staropt$star$2, props, nodes) {
  var namespace = $staropt$star !== undefined ? $staropt$star : "";
  var key = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  var unique = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
  return Vdom.fullnode(namespace, tagName, key, unique, props, nodes);
}

var lazy1 = Vdom.lazyGen;

function h1($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h1", key, unique, props, nodes);
}

function h2($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h2", key, unique, props, nodes);
}

function h3($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h3", key, unique, props, nodes);
}

function h4($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h4", key, unique, props, nodes);
}

function h5($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h5", key, unique, props, nodes);
}

function h6($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "h6", key, unique, props, nodes);
}

function div($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "div", key, unique, props, nodes);
}

function p($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "p", key, unique, props, nodes);
}

function hr($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "hr", key, unique, props, nodes);
}

function pre($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "pre", key, unique, props, nodes);
}

function blockquote($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "blockquote", key, unique, props, nodes);
}

function span($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "span", key, unique, props, nodes);
}

function a($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "a", key, unique, props, nodes);
}

function code($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "code", key, unique, props, nodes);
}

function em($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "em", key, unique, props, nodes);
}

function strong($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "strong", key, unique, props, nodes);
}

function i($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "i", key, unique, props, nodes);
}

function b($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "b", key, unique, props, nodes);
}

function u($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "u", key, unique, props, nodes);
}

function sub($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "sub", key, unique, props, nodes);
}

function sup($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "sup", key, unique, props, nodes);
}

function br(props) {
  return Vdom.fullnode("", "br", "br", "br", props, /* [] */0);
}

function br$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "br", key, unique, props, nodes);
}

function ol($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "ol", key, unique, props, nodes);
}

function ul($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "ul", key, unique, props, nodes);
}

function li($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "li", key, unique, props, nodes);
}

function dl($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "dl", key, unique, props, nodes);
}

function dt($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "dt", key, unique, props, nodes);
}

function dd($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "dd", key, unique, props, nodes);
}

function img($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "img", key, unique, props, nodes);
}

function iframe($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "iframe", key, unique, props, nodes);
}

function canvas($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "canvas", key, unique, props, nodes);
}

function math($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "math", key, unique, props, nodes);
}

function form($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "form", key, unique, props, nodes);
}

function input$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "input", key, unique, props, nodes);
}

function textarea($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "textarea", key, unique, props, nodes);
}

function button($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "button", key, unique, props, nodes);
}

function select($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "select", key, unique, props, nodes);
}

function option$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "option", key, unique, props, nodes);
}

function optgroup($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "optgroup", key, unique, props, nodes);
}

function label($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "label", key, unique, props, nodes);
}

function fieldset($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "fieldset", key, unique, props, nodes);
}

function legend($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "legend", key, unique, props, nodes);
}

function section($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "section", key, unique, props, nodes);
}

function nav($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "nav", key, unique, props, nodes);
}

function article($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "article", key, unique, props, nodes);
}

function aside($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "aside", key, unique, props, nodes);
}

function header($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "header", key, unique, props, nodes);
}

function footer($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "footer", key, unique, props, nodes);
}

function address($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "address", key, unique, props, nodes);
}

function main($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "main", key, unique, props, nodes);
}

function body($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "body", key, unique, props, nodes);
}

function figure($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "figure", key, unique, props, nodes);
}

function figcaption($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "figcaption", key, unique, props, nodes);
}

function table($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "table", key, unique, props, nodes);
}

function caption($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "caption", key, unique, props, nodes);
}

function colgroup($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "colgroup", key, unique, props, nodes);
}

function col($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "col", key, unique, props, nodes);
}

function tbody($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "tbody", key, unique, props, nodes);
}

function thead($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "thead", key, unique, props, nodes);
}

function tfoot($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "tfoot", key, unique, props, nodes);
}

function tr($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "tr", key, unique, props, nodes);
}

function th($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "th", key, unique, props, nodes);
}

function td($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "td", key, unique, props, nodes);
}

function datalist($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "datalist", key, unique, props, nodes);
}

function keygen($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "keygen", key, unique, props, nodes);
}

function output($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "output", key, unique, props, nodes);
}

function progress($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "progress", key, unique, props, nodes);
}

function meter($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "meter", key, unique, props, nodes);
}

function audio($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "audio", key, unique, props, nodes);
}

function video($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "video", key, unique, props, nodes);
}

function source($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "source", key, unique, props, nodes);
}

function track($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "track", key, unique, props, nodes);
}

function embed($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "embed", key, unique, props, nodes);
}

function object$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "object", key, unique, props, nodes);
}

function param($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "param", key, unique, props, nodes);
}

function ins($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "ins", key, unique, props, nodes);
}

function del($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "del", key, unique, props, nodes);
}

function small($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "small", key, unique, props, nodes);
}

function cite($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "cite", key, unique, props, nodes);
}

function dfn($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "dfn", key, unique, props, nodes);
}

function abbr($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "abbr", key, unique, props, nodes);
}

function time($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "time", key, unique, props, nodes);
}

function var$prime($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "var", key, unique, props, nodes);
}

function samp($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "samp", key, unique, props, nodes);
}

function kbd($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "kbd", key, unique, props, nodes);
}

function s($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "s", key, unique, props, nodes);
}

function q($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "q", key, unique, props, nodes);
}

function mark($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "mark", key, unique, props, nodes);
}

function ruby($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "ruby", key, unique, props, nodes);
}

function rt($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "rt", key, unique, props, nodes);
}

function rp($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "rp", key, unique, props, nodes);
}

function bdi($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "bdi", key, unique, props, nodes);
}

function bdo($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "bdo", key, unique, props, nodes);
}

function wbr($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "wbr", key, unique, props, nodes);
}

function details($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "details", key, unique, props, nodes);
}

function summary($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "summary", key, unique, props, nodes);
}

function menuitem($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "menuitem", key, unique, props, nodes);
}

function menu($staropt$star, $staropt$star$1, props, nodes) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "menu", key, unique, props, nodes);
}

function meta($staropt$star, $staropt$star$1, props) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "meta", key, unique, props, /* [] */0);
}

function style($staropt$star, $staropt$star$1, props, content) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "style", key, unique, props, /* :: */[
              /* Text */Block.__(1, [content]),
              /* [] */0
            ]);
}

function title($staropt$star, $staropt$star$1, props, content) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "title", key, unique, props, /* :: */[
              /* Text */Block.__(1, [content]),
              /* [] */0
            ]);
}

function link($staropt$star, $staropt$star$1, props) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  return Vdom.fullnode("", "link", key, unique, props, /* [] */0);
}

var style$1 = Vdom.style;

function styles(s) {
  return /* Style */Block.__(4, [s]);
}

function class$prime(name) {
  return /* RawProp */Block.__(0, [
            "className",
            name
          ]);
}

function classList(classes) {
  var name = $$String.concat(" ", List.map((function (param) {
              return param[0];
            }), List.filter((function (param) {
                    return param[1];
                  }))(classes)));
  return /* RawProp */Block.__(0, [
            "className",
            name
          ]);
}

function id(str) {
  return /* RawProp */Block.__(0, [
            "id",
            str
          ]);
}

function title$1(str) {
  return /* Attribute */Block.__(1, [
            "",
            "title",
            str
          ]);
}

function hidden(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "hidden",
              "hidden"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function type$prime(typ) {
  return /* RawProp */Block.__(0, [
            "type",
            typ
          ]);
}

function value(str) {
  return /* RawProp */Block.__(0, [
            "value",
            str
          ]);
}

function defaultValue(str) {
  return /* RawProp */Block.__(0, [
            "defaultValue",
            str
          ]);
}

function checked(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "checked",
              "checked"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function placeholder(str) {
  return /* RawProp */Block.__(0, [
            "placeholder",
            str
          ]);
}

function selected(b) {
  if (b) {
    return /* Attribute */Block.__(1, [
              "",
              "selected",
              "true"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function accept(c) {
  return /* Attribute */Block.__(1, [
            "",
            "accept",
            c
          ]);
}

function acceptCharset(c) {
  return /* Attribute */Block.__(1, [
            "",
            "accept-charset",
            c
          ]);
}

function action(a) {
  return /* RawProp */Block.__(0, [
            "action",
            a
          ]);
}

function autocomplete(b) {
  return /* RawProp */Block.__(0, [
            "autocomplete",
            b ? "on" : "off"
          ]);
}

function autofocus(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "autofocus",
              "autofocus"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function disabled(b) {
  if (b) {
    return /* Attribute */Block.__(1, [
              "",
              "disabled",
              "true"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function enctype(encoding) {
  return /* Attribute */Block.__(1, [
            "",
            "enctype",
            encoding
          ]);
}

function formaction(url) {
  return /* Attribute */Block.__(1, [
            "",
            "formaction",
            url
          ]);
}

function list(value) {
  return /* Attribute */Block.__(1, [
            "",
            "list",
            value
          ]);
}

function minlength(n) {
  return /* Attribute */Block.__(1, [
            "",
            "minlength",
            String(n)
          ]);
}

function maxlength(n) {
  return /* Attribute */Block.__(1, [
            "",
            "maxlength",
            String(n)
          ]);
}

function method$prime(m) {
  return /* RawProp */Block.__(0, [
            "method",
            m
          ]);
}

function multiple(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "multiple",
              "multiple"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function name(str) {
  return /* RawProp */Block.__(0, [
            "name",
            str
          ]);
}

function novalidate(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "novalidate",
              "novalidate"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function pattern(p) {
  return /* RawProp */Block.__(0, [
            "pattern",
            p
          ]);
}

function readonly(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "readonly",
              "readonly"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function required(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "required",
              "required"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function size(n) {
  return /* Attribute */Block.__(1, [
            "",
            "size",
            String(n)
          ]);
}

function for$prime(str) {
  return /* RawProp */Block.__(0, [
            "htmlFor",
            str
          ]);
}

function form$1(value) {
  return /* Attribute */Block.__(1, [
            "",
            "form",
            value
          ]);
}

function max(value) {
  return /* Attribute */Block.__(1, [
            "",
            "max",
            value
          ]);
}

function min(value) {
  return /* Attribute */Block.__(1, [
            "",
            "min",
            value
          ]);
}

function step(value) {
  return /* Attribute */Block.__(1, [
            "",
            "step",
            value
          ]);
}

function cols(n) {
  return /* Attribute */Block.__(1, [
            "",
            "cols",
            String(n)
          ]);
}

function rows(n) {
  return /* Attribute */Block.__(1, [
            "",
            "rows",
            String(n)
          ]);
}

function wrap(value) {
  return /* RawProp */Block.__(0, [
            "wrap",
            value
          ]);
}

function href(str) {
  return /* Attribute */Block.__(1, [
            "",
            "href",
            str
          ]);
}

function target(t) {
  return /* RawProp */Block.__(0, [
            "target",
            t
          ]);
}

function download(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "download",
              ""
            ]);
  } else {
    return /* NoProp */0;
  }
}

function downloadAs(name) {
  return /* RawProp */Block.__(0, [
            "download",
            name
          ]);
}

function hreflang(code) {
  return /* RawProp */Block.__(0, [
            "hreflang",
            code
          ]);
}

function media(value) {
  return /* Attribute */Block.__(1, [
            "",
            "media",
            value
          ]);
}

function ping(url) {
  return /* RawProp */Block.__(0, [
            "ping",
            url
          ]);
}

function rel(value) {
  return /* Attribute */Block.__(1, [
            "",
            "rel",
            value
          ]);
}

function ismap(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "ismap",
              "ismap"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function usemap(name) {
  return /* RawProp */Block.__(0, [
            "usemap",
            name
          ]);
}

function shape(value) {
  return /* RawProp */Block.__(0, [
            "shape",
            value
          ]);
}

function coords(value) {
  return /* RawProp */Block.__(0, [
            "coords",
            value
          ]);
}

function src(str) {
  return /* Attribute */Block.__(1, [
            "",
            "src",
            str
          ]);
}

function height(n) {
  return /* Attribute */Block.__(1, [
            "",
            "height",
            String(n)
          ]);
}

function width(n) {
  return /* Attribute */Block.__(1, [
            "",
            "width",
            String(n)
          ]);
}

function alt(value) {
  return /* RawProp */Block.__(0, [
            "alt",
            value
          ]);
}

function autoplay(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "autoplay",
              "autoplay"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function controls(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "controls",
              "controls"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function loop(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "loop",
              "loop"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function preload(value) {
  return /* RawProp */Block.__(0, [
            "preload",
            value
          ]);
}

function poster(url) {
  return /* RawProp */Block.__(0, [
            "poster",
            url
          ]);
}

function $$default(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "default",
              "default"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function kind(value) {
  return /* RawProp */Block.__(0, [
            "kind",
            value
          ]);
}

function srclang(code) {
  return /* RawProp */Block.__(0, [
            "srclang",
            code
          ]);
}

function sandbox(value) {
  return /* RawProp */Block.__(0, [
            "sandbox",
            value
          ]);
}

function seamless(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "seamless",
              "seamless"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function srcdoc(value) {
  return /* RawProp */Block.__(0, [
            "srcdoc",
            value
          ]);
}

function reversed(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "reversed",
              "reversed"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function start(n) {
  return /* RawProp */Block.__(0, [
            "start",
            String(n)
          ]);
}

function colspan(n) {
  return /* Attribute */Block.__(1, [
            "",
            "colspan",
            String(n)
          ]);
}

function rowspan(n) {
  return /* Attribute */Block.__(1, [
            "",
            "rowspan",
            String(n)
          ]);
}

function headers(value) {
  return /* RawProp */Block.__(0, [
            "headers",
            value
          ]);
}

function scope(value) {
  return /* RawProp */Block.__(0, [
            "scope",
            value
          ]);
}

function align(value) {
  return /* RawProp */Block.__(0, [
            "align",
            value
          ]);
}

function async(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "async",
              "async"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function charset(value) {
  return /* Attribute */Block.__(1, [
            "",
            "charset",
            value
          ]);
}

function content(value) {
  return /* Attribute */Block.__(1, [
            "",
            "content",
            value
          ]);
}

function defer(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "defer",
              "defer"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function httpEquiv(value) {
  return /* RawProp */Block.__(0, [
            "http-equiv",
            value
          ]);
}

function language(value) {
  return /* RawProp */Block.__(0, [
            "language",
            value
          ]);
}

function scoped(value) {
  return /* RawProp */Block.__(0, [
            "scoped",
            value
          ]);
}

function accesskey(ch) {
  return /* RawProp */Block.__(0, [
            "accesskey",
            Caml_string.bytes_to_string(Bytes.make(1, ch))
          ]);
}

function contenteditable(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "contenteditable",
              "contenteditable"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function contextmenu(id) {
  return /* Attribute */Block.__(1, [
            "",
            "contextmenu",
            id
          ]);
}

function dir(value) {
  return /* RawProp */Block.__(0, [
            "dir",
            value
          ]);
}

function draggable(value) {
  return /* Attribute */Block.__(1, [
            "",
            "draggable",
            value
          ]);
}

function dropzone(value) {
  return /* RawProp */Block.__(0, [
            "dropzone",
            value
          ]);
}

function itemprop(value) {
  return /* Attribute */Block.__(1, [
            "",
            "itemprop",
            value
          ]);
}

function lang(code) {
  return /* RawProp */Block.__(0, [
            "lang",
            code
          ]);
}

function spellcheck(b) {
  if (b) {
    return /* RawProp */Block.__(0, [
              "spellcheck",
              "spellcheck"
            ]);
  } else {
    return /* NoProp */0;
  }
}

function tabindex(n) {
  return /* Attribute */Block.__(1, [
            "",
            "tabindex",
            String(n)
          ]);
}

function challenge(value) {
  return /* Attribute */Block.__(1, [
            "",
            "challenge",
            value
          ]);
}

function keytype(value) {
  return /* RawProp */Block.__(0, [
            "keytype",
            value
          ]);
}

function cite$1(url) {
  return /* RawProp */Block.__(0, [
            "cite",
            url
          ]);
}

function datetime(value) {
  return /* Attribute */Block.__(1, [
            "",
            "datetime",
            value
          ]);
}

function pubdate(value) {
  return /* Attribute */Block.__(1, [
            "",
            "pubdate",
            value
          ]);
}

function manifest(value) {
  return /* Attribute */Block.__(1, [
            "",
            "manifest",
            value
          ]);
}

var Attributes = /* module */[
  /* noProp : NoProp */0,
  /* style */style$1,
  /* styles */styles,
  /* class' */class$prime,
  /* classList */classList,
  /* id */id,
  /* title */title$1,
  /* hidden */hidden,
  /* type' */type$prime,
  /* value */value,
  /* defaultValue */defaultValue,
  /* checked */checked,
  /* placeholder */placeholder,
  /* selected */selected,
  /* accept */accept,
  /* acceptCharset */acceptCharset,
  /* action */action,
  /* autocomplete */autocomplete,
  /* autofocus */autofocus,
  /* disabled */disabled,
  /* enctype */enctype,
  /* formaction */formaction,
  /* list */list,
  /* minlength */minlength,
  /* maxlength */maxlength,
  /* method' */method$prime,
  /* multiple */multiple,
  /* name */name,
  /* novalidate */novalidate,
  /* pattern */pattern,
  /* readonly */readonly,
  /* required */required,
  /* size */size,
  /* for' */for$prime,
  /* form */form$1,
  /* max */max,
  /* min */min,
  /* step */step,
  /* cols */cols,
  /* rows */rows,
  /* wrap */wrap,
  /* href */href,
  /* target */target,
  /* download */download,
  /* downloadAs */downloadAs,
  /* hreflang */hreflang,
  /* media */media,
  /* ping */ping,
  /* rel */rel,
  /* ismap */ismap,
  /* usemap */usemap,
  /* shape */shape,
  /* coords */coords,
  /* src */src,
  /* height */height,
  /* width */width,
  /* alt */alt,
  /* autoplay */autoplay,
  /* controls */controls,
  /* loop */loop,
  /* preload */preload,
  /* poster */poster,
  /* default */$$default,
  /* kind */kind,
  /* srclang */srclang,
  /* sandbox */sandbox,
  /* seamless */seamless,
  /* srcdoc */srcdoc,
  /* reversed */reversed,
  /* start */start,
  /* colspan */colspan,
  /* rowspan */rowspan,
  /* headers */headers,
  /* scope */scope,
  /* align */align,
  /* async */async,
  /* charset */charset,
  /* content */content,
  /* defer */defer,
  /* httpEquiv */httpEquiv,
  /* language */language,
  /* scoped */scoped,
  /* accesskey */accesskey,
  /* contenteditable */contenteditable,
  /* contextmenu */contextmenu,
  /* dir */dir,
  /* draggable */draggable,
  /* dropzone */dropzone,
  /* itemprop */itemprop,
  /* lang */lang,
  /* spellcheck */spellcheck,
  /* tabindex */tabindex,
  /* challenge */challenge,
  /* keytype */keytype,
  /* cite */cite$1,
  /* datetime */datetime,
  /* pubdate */pubdate,
  /* manifest */manifest
];

var onCB = Vdom.onCB;

var onMsg = Vdom.onMsg;

function preventDefaultOn($staropt$star, eventName, decoder) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return Tea_html.onWithOptions(key, eventName, /* record */[
              /* stopPropagation */Tea_html.defaultOptions[/* stopPropagation */0],
              /* preventDefault */true
            ], decoder);
}

function onClick(msg) {
  return Vdom.onMsg("click", msg);
}

function onDoubleClick(msg) {
  return Vdom.onMsg("dblclick", msg);
}

function onMouseDown(msg) {
  return Vdom.onMsg("mousedown", msg);
}

function onMouseUp(msg) {
  return Vdom.onMsg("mouseup", msg);
}

function onMouseEnter(msg) {
  return Vdom.onMsg("mouseenter", msg);
}

function onMouseLeave(msg) {
  return Vdom.onMsg("mouseleave", msg);
}

function onMouseOver(msg) {
  return Vdom.onMsg("mouseover", msg);
}

function onMouseOut(msg) {
  return Vdom.onMsg("mouseout", msg);
}

function onInputOpt($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return Vdom.onCB("input", key, (function (ev) {
                var match = ev.target;
                if (match !== undefined) {
                  var match$1 = match.value;
                  if (match$1 !== undefined) {
                    return Curry._1(msg, match$1);
                  } else {
                    return undefined;
                  }
                }
                
              }));
}

function onInput($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return onInputOpt(key, (function (ev) {
                return Js_primitive.some(Curry._1(msg, ev));
              }));
}

function onCheckOpt($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return Vdom.onCB("change", key, (function (ev) {
                var match = ev.target;
                if (match !== undefined) {
                  var match$1 = match.checked;
                  if (match$1 !== undefined) {
                    return Curry._1(msg, match$1);
                  } else {
                    return undefined;
                  }
                }
                
              }));
}

function onCheck($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return onCheckOpt(key, (function (ev) {
                return Js_primitive.some(Curry._1(msg, ev));
              }));
}

function onChangeOpt($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return Vdom.onCB("change", key, (function (ev) {
                var match = ev.target;
                if (match !== undefined) {
                  var match$1 = match.value;
                  if (match$1 !== undefined) {
                    return Curry._1(msg, match$1);
                  } else {
                    return undefined;
                  }
                }
                
              }));
}

function onChange($staropt$star, msg) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return onChangeOpt(key, (function (ev) {
                return Js_primitive.some(Curry._1(msg, ev));
              }));
}

function onSubmit(msg) {
  return preventDefaultOn(undefined, "submit", Tea_json.Decoder[/* succeed */24](msg));
}

function onBlur(msg) {
  return Vdom.onMsg("blur", msg);
}

function onFocus(msg) {
  return Vdom.onMsg("focus", msg);
}

var Events = /* module */[
  /* onCB */onCB,
  /* onMsg */onMsg,
  /* on */Tea_html.on,
  /* onWithOptions */Tea_html.onWithOptions,
  /* defaultOptions */Tea_html.defaultOptions,
  /* targetValue */Tea_html.targetValue,
  /* targetChecked */Tea_html.targetChecked,
  /* keyCode */Tea_html.keyCode,
  /* preventDefaultOn */preventDefaultOn,
  /* onClick */onClick,
  /* onDoubleClick */onDoubleClick,
  /* onMouseDown */onMouseDown,
  /* onMouseUp */onMouseUp,
  /* onMouseEnter */onMouseEnter,
  /* onMouseLeave */onMouseLeave,
  /* onMouseOver */onMouseOver,
  /* onMouseOut */onMouseOut,
  /* onInputOpt */onInputOpt,
  /* onInput */onInput,
  /* onCheckOpt */onCheckOpt,
  /* onCheck */onCheck,
  /* onChangeOpt */onChangeOpt,
  /* onChange */onChange,
  /* onSubmit */onSubmit,
  /* onBlur */onBlur,
  /* onFocus */onFocus
];

var Cmds = 0;

var map = Tea_app.map;

var noNode = Vdom.noNode;

exports.Cmds = Cmds;
exports.map = map;
exports.text = text;
exports.node = node;
exports.noNode = noNode;
exports.lazy1 = lazy1;
exports.h1 = h1;
exports.h2 = h2;
exports.h3 = h3;
exports.h4 = h4;
exports.h5 = h5;
exports.h6 = h6;
exports.div = div;
exports.p = p;
exports.hr = hr;
exports.pre = pre;
exports.blockquote = blockquote;
exports.span = span;
exports.a = a;
exports.code = code;
exports.em = em;
exports.strong = strong;
exports.i = i;
exports.b = b;
exports.u = u;
exports.sub = sub;
exports.sup = sup;
exports.br = br;
exports.br$prime = br$prime;
exports.ol = ol;
exports.ul = ul;
exports.li = li;
exports.dl = dl;
exports.dt = dt;
exports.dd = dd;
exports.img = img;
exports.iframe = iframe;
exports.canvas = canvas;
exports.math = math;
exports.form = form;
exports.input$prime = input$prime;
exports.textarea = textarea;
exports.button = button;
exports.select = select;
exports.option$prime = option$prime;
exports.optgroup = optgroup;
exports.label = label;
exports.fieldset = fieldset;
exports.legend = legend;
exports.section = section;
exports.nav = nav;
exports.article = article;
exports.aside = aside;
exports.header = header;
exports.footer = footer;
exports.address = address;
exports.main = main;
exports.body = body;
exports.figure = figure;
exports.figcaption = figcaption;
exports.table = table;
exports.caption = caption;
exports.colgroup = colgroup;
exports.col = col;
exports.tbody = tbody;
exports.thead = thead;
exports.tfoot = tfoot;
exports.tr = tr;
exports.th = th;
exports.td = td;
exports.datalist = datalist;
exports.keygen = keygen;
exports.output = output;
exports.progress = progress;
exports.meter = meter;
exports.audio = audio;
exports.video = video;
exports.source = source;
exports.track = track;
exports.embed = embed;
exports.object$prime = object$prime;
exports.param = param;
exports.ins = ins;
exports.del = del;
exports.small = small;
exports.cite = cite;
exports.dfn = dfn;
exports.abbr = abbr;
exports.time = time;
exports.var$prime = var$prime;
exports.samp = samp;
exports.kbd = kbd;
exports.s = s;
exports.q = q;
exports.mark = mark;
exports.ruby = ruby;
exports.rt = rt;
exports.rp = rp;
exports.bdi = bdi;
exports.bdo = bdo;
exports.wbr = wbr;
exports.details = details;
exports.summary = summary;
exports.menuitem = menuitem;
exports.menu = menu;
exports.meta = meta;
exports.style = style;
exports.title = title;
exports.link = link;
exports.Attributes = Attributes;
exports.Events = Events;
/* Tea_html Not a pure module */

},{"./tea_app.js":1,"./tea_html.js":5,"./tea_json.js":8,"./vdom.js":13,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/bytes.js":35,"bs-platform/lib/js/caml_string.js":48,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/js_primitive.js":57,"bs-platform/lib/js/list.js":58,"bs-platform/lib/js/string.js":61}],7:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Tea_json = require("./tea_json.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Web_xmlhttprequest = require("./web_xmlhttprequest.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function string_of_error(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return "Timeout";
      case 1 : 
          return "Unknown network error";
      case 2 : 
          return "Request aborted";
      
    }
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return "Bad Url: " + param[0];
      case 1 : 
          return "Bad Status: " + param[0][/* url */0];
      case 2 : 
          return "Bad Payload: " + param[1][/* url */0];
      
    }
  }
}

var emptyRequestEvents = /* record */[
  /* onreadystatechange */undefined,
  /* onprogress */undefined
];

function expectStringResponse(func) {
  return /* Expect */[
          /* TextResponseType */5,
          (function (param) {
              var body = param[/* body */3];
              if (typeof body === "number" || body.tag !== 5) {
                return /* Error */Block.__(1, ["Non-text response returned"]);
              } else {
                return Curry._1(func, body[0]);
              }
            })
        ];
}

var expectString = expectStringResponse((function (resString) {
        return /* Ok */Block.__(0, [resString]);
      }));

function request(rawRequest) {
  return /* Request */[
          rawRequest,
          undefined
        ];
}

function getString(url) {
  return /* Request */[
          /* record */[
            /* method' */"GET",
            /* headers : [] */0,
            /* url */url,
            /* body : EmptyBody */0,
            /* expect */expectString,
            /* timeout */undefined,
            /* withCredentials */false
          ],
          undefined
        ];
}

function toTask(param) {
  var request = param[0];
  var height = function (param) {
    if (param) {
      return param[4];
    } else {
      return 0;
    }
  };
  var create = function (l, x, d, r) {
    var hl = height(l);
    var hr = height(r);
    return /* Node */[
            l,
            x,
            d,
            r,
            hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          ];
  };
  var singleton = function (x, d) {
    return /* Node */[
            /* Empty */0,
            x,
            d,
            /* Empty */0,
            1
          ];
  };
  var bal = function (l, x, d, r) {
    var hl = l ? l[4] : 0;
    var hr = r ? r[4] : 0;
    if (hl > (hr + 2 | 0)) {
      if (l) {
        var lr = l[3];
        var ld = l[2];
        var lv = l[1];
        var ll = l[0];
        if (height(ll) >= height(lr)) {
          return create(ll, lv, ld, create(lr, x, d, r));
        } else if (lr) {
          return create(create(ll, lv, ld, lr[0]), lr[1], lr[2], create(lr[3], x, d, r));
        } else {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else if (hr > (hl + 2 | 0)) {
      if (r) {
        var rr = r[3];
        var rd = r[2];
        var rv = r[1];
        var rl = r[0];
        if (height(rr) >= height(rl)) {
          return create(create(l, x, d, rl), rv, rd, rr);
        } else if (rl) {
          return create(create(l, x, d, rl[0]), rl[1], rl[2], create(rl[3], rv, rd, rr));
        } else {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else {
      return /* Node */[
              l,
              x,
              d,
              r,
              hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            ];
    }
  };
  var add = function (x, data, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        return /* Node */[
                l,
                x,
                data,
                r,
                param[4]
              ];
      } else if (c < 0) {
        return bal(add(x, data, l), v, d, r);
      } else {
        return bal(l, v, d, add(x, data, r));
      }
    } else {
      return /* Node */[
              /* Empty */0,
              x,
              data,
              /* Empty */0,
              1
            ];
    }
  };
  var min_binding = function (_param) {
    while(true) {
      var param = _param;
      if (param) {
        var l = param[0];
        if (l) {
          _param = l;
          continue ;
        } else {
          return /* tuple */[
                  param[1],
                  param[2]
                ];
        }
      } else {
        throw Caml_builtin_exceptions.not_found;
      }
    };
  };
  var remove_min_binding = function (param) {
    if (param) {
      var l = param[0];
      if (l) {
        return bal(remove_min_binding(l), param[1], param[2], param[3]);
      } else {
        return param[3];
      }
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "Map.remove_min_elt"
          ];
    }
  };
  var remove = function (x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        var t1 = l;
        var t2 = r;
        if (t1) {
          if (t2) {
            var match = min_binding(t2);
            return bal(t1, match[0], match[1], remove_min_binding(t2));
          } else {
            return t1;
          }
        } else {
          return t2;
        }
      } else if (c < 0) {
        return bal(remove(x, l), v, d, r);
      } else {
        return bal(l, v, d, remove(x, r));
      }
    } else {
      return /* Empty */0;
    }
  };
  var iter = function (f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        iter(f, param[0]);
        Curry._2(f, param[1], param[2]);
        _param = param[3];
        continue ;
      } else {
        return /* () */0;
      }
    };
  };
  var map = function (f, param) {
    if (param) {
      var l$prime = map(f, param[0]);
      var d$prime = Curry._1(f, param[2]);
      var r$prime = map(f, param[3]);
      return /* Node */[
              l$prime,
              param[1],
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  };
  var mapi = function (f, param) {
    if (param) {
      var v = param[1];
      var l$prime = mapi(f, param[0]);
      var d$prime = Curry._2(f, v, param[2]);
      var r$prime = mapi(f, param[3]);
      return /* Node */[
              l$prime,
              v,
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  };
  var fold = function (f, _m, _accu) {
    while(true) {
      var accu = _accu;
      var m = _m;
      if (m) {
        _accu = Curry._3(f, m[1], m[2], fold(f, m[0], accu));
        _m = m[3];
        continue ;
      } else {
        return accu;
      }
    };
  };
  var for_all = function (p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (Curry._2(p, param[1], param[2]) && for_all(p, param[0])) {
          _param = param[3];
          continue ;
        } else {
          return false;
        }
      } else {
        return true;
      }
    };
  };
  var exists = function (p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (Curry._2(p, param[1], param[2]) || exists(p, param[0])) {
          return true;
        } else {
          _param = param[3];
          continue ;
        }
      } else {
        return false;
      }
    };
  };
  var add_min_binding = function (k, v, param) {
    if (param) {
      return bal(add_min_binding(k, v, param[0]), param[1], param[2], param[3]);
    } else {
      return singleton(k, v);
    }
  };
  var add_max_binding = function (k, v, param) {
    if (param) {
      return bal(param[0], param[1], param[2], add_max_binding(k, v, param[3]));
    } else {
      return singleton(k, v);
    }
  };
  var join = function (l, v, d, r) {
    if (l) {
      if (r) {
        var rh = r[4];
        var lh = l[4];
        if (lh > (rh + 2 | 0)) {
          return bal(l[0], l[1], l[2], join(l[3], v, d, r));
        } else if (rh > (lh + 2 | 0)) {
          return bal(join(l, v, d, r[0]), r[1], r[2], r[3]);
        } else {
          return create(l, v, d, r);
        }
      } else {
        return add_max_binding(v, d, l);
      }
    } else {
      return add_min_binding(v, d, r);
    }
  };
  var concat = function (t1, t2) {
    if (t1) {
      if (t2) {
        var match = min_binding(t2);
        return join(t1, match[0], match[1], remove_min_binding(t2));
      } else {
        return t1;
      }
    } else {
      return t2;
    }
  };
  var concat_or_join = function (t1, v, d, t2) {
    if (d !== undefined) {
      return join(t1, v, Js_primitive.valFromOption(d), t2);
    } else {
      return concat(t1, t2);
    }
  };
  var split = function (x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        return /* tuple */[
                l,
                Js_primitive.some(d),
                r
              ];
      } else if (c < 0) {
        var match = split(x, l);
        return /* tuple */[
                match[0],
                match[1],
                join(match[2], v, d, r)
              ];
      } else {
        var match$1 = split(x, r);
        return /* tuple */[
                join(l, v, d, match$1[0]),
                match$1[1],
                match$1[2]
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              undefined,
              /* Empty */0
            ];
    }
  };
  var merge = function (f, s1, s2) {
    var exit = 0;
    if (s1) {
      var v1 = s1[1];
      if (s1[4] >= height(s2)) {
        var match = split(v1, s2);
        return concat_or_join(merge(f, s1[0], match[0]), v1, Curry._3(f, v1, Js_primitive.some(s1[2]), match[1]), merge(f, s1[3], match[2]));
      } else {
        exit = 1;
      }
    } else if (s2) {
      exit = 1;
    } else {
      return /* Empty */0;
    }
    if (exit === 1) {
      if (s2) {
        var v2 = s2[1];
        var match$1 = split(v2, s1);
        return concat_or_join(merge(f, match$1[0], s2[0]), v2, Curry._3(f, v2, match$1[1], Js_primitive.some(s2[2])), merge(f, match$1[2], s2[3]));
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "map.ml",
                270,
                10
              ]
            ];
      }
    }
    
  };
  var filter = function (p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var l$prime = filter(p, param[0]);
      var pvd = Curry._2(p, v, d);
      var r$prime = filter(p, param[3]);
      if (pvd) {
        return join(l$prime, v, d, r$prime);
      } else {
        return concat(l$prime, r$prime);
      }
    } else {
      return /* Empty */0;
    }
  };
  var partition = function (p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var match = partition(p, param[0]);
      var lf = match[1];
      var lt = match[0];
      var pvd = Curry._2(p, v, d);
      var match$1 = partition(p, param[3]);
      var rf = match$1[1];
      var rt = match$1[0];
      if (pvd) {
        return /* tuple */[
                join(lt, v, d, rt),
                concat(lf, rf)
              ];
      } else {
        return /* tuple */[
                concat(lt, rt),
                join(lf, v, d, rf)
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              /* Empty */0
            ];
    }
  };
  var cardinal = function (param) {
    if (param) {
      return (cardinal(param[0]) + 1 | 0) + cardinal(param[3]) | 0;
    } else {
      return 0;
    }
  };
  var bindings_aux = function (_accu, _param) {
    while(true) {
      var param = _param;
      var accu = _accu;
      if (param) {
        _param = param[0];
        _accu = /* :: */[
          /* tuple */[
            param[1],
            param[2]
          ],
          bindings_aux(accu, param[3])
        ];
        continue ;
      } else {
        return accu;
      }
    };
  };
  var expect = request[/* expect */4];
  var responseToResult = expect[1];
  var typ = expect[0];
  var withCredentials = request[/* withCredentials */6];
  var timeout = request[/* timeout */5];
  var body = request[/* body */3];
  var url = request[/* url */2];
  var headers = request[/* headers */1];
  var method$prime = request[/* method' */0];
  return /* Task */[(function (cb) {
              var enqRes = function (result, _ev) {
                return Curry._1(cb, result);
              };
              var xhr = new XMLHttpRequest();
              var partial_arg = /* Error */Block.__(1, [/* NetworkError */1]);
              var cb$1 = function (param) {
                return Curry._1(cb, partial_arg);
              };
              xhr.onerror = cb$1;
              var partial_arg$1 = /* Error */Block.__(1, [/* Timeout */0]);
              var cb$2 = function (param) {
                return Curry._1(cb, partial_arg$1);
              };
              xhr.ontimeout = cb$2;
              var partial_arg$2 = /* Error */Block.__(1, [/* Aborted */2]);
              var cb$3 = function (param) {
                return Curry._1(cb, partial_arg$2);
              };
              xhr.onabort = cb$3;
              var cb$4 = function (_ev) {
                var match = Web_xmlhttprequest.getAllResponseHeadersAsDict(xhr);
                var headers;
                headers = match.tag ? /* Empty */0 : match[0];
                var response_000 = /* url */xhr.responseURL;
                var response_001 = /* status : record */[
                  /* code */xhr.status,
                  /* message */xhr.statusText
                ];
                var response_003 = /* body */Web_xmlhttprequest.get_response(xhr);
                var response = /* record */[
                  response_000,
                  response_001,
                  /* headers */headers,
                  response_003
                ];
                if (response_001[/* code */0] < 200 || 300 <= response_001[/* code */0]) {
                  var partial_arg = /* Error */Block.__(1, [/* BadStatus */Block.__(1, [response])]);
                  return (function (param) {
                              return enqRes(partial_arg, param);
                            })(/* () */0);
                } else {
                  var match$1 = Curry._1(responseToResult, response);
                  if (match$1.tag) {
                    var partial_arg$1 = /* Error */Block.__(1, [/* BadPayload */Block.__(2, [
                            match$1[0],
                            response
                          ])]);
                    return (function (param) {
                                return enqRes(partial_arg$1, param);
                              })(/* () */0);
                  } else {
                    var partial_arg$2 = /* Ok */Block.__(0, [match$1[0]]);
                    return (function (param) {
                                return enqRes(partial_arg$2, param);
                              })(/* () */0);
                  }
                }
              };
              xhr.onload = cb$4;
              try {
                Web_xmlhttprequest.open_(method$prime, url, undefined, undefined, undefined, xhr);
              }
              catch (exn){
                var partial_arg$3 = /* Error */Block.__(1, [/* BadUrl */Block.__(0, [url])]);
                ((function (param) {
                        return enqRes(partial_arg$3, param);
                      })(/* () */0));
              }
              var setHeader = function (param) {
                return Web_xmlhttprequest.setRequestHeader(param[0], param[1], xhr);
              };
              List.iter(setHeader, headers);
              Web_xmlhttprequest.set_responseType(typ, xhr);
              if (timeout !== undefined) {
                xhr.timeout = timeout;
              }
              xhr.withCredentials = withCredentials;
              Web_xmlhttprequest.send(body, xhr);
              return /* () */0;
            })];
}

function send(resultToMessage, param) {
  var maybeEvents = param[1];
  var request = param[0];
  var height = function (param) {
    if (param) {
      return param[4];
    } else {
      return 0;
    }
  };
  var create = function (l, x, d, r) {
    var hl = height(l);
    var hr = height(r);
    return /* Node */[
            l,
            x,
            d,
            r,
            hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          ];
  };
  var singleton = function (x, d) {
    return /* Node */[
            /* Empty */0,
            x,
            d,
            /* Empty */0,
            1
          ];
  };
  var bal = function (l, x, d, r) {
    var hl = l ? l[4] : 0;
    var hr = r ? r[4] : 0;
    if (hl > (hr + 2 | 0)) {
      if (l) {
        var lr = l[3];
        var ld = l[2];
        var lv = l[1];
        var ll = l[0];
        if (height(ll) >= height(lr)) {
          return create(ll, lv, ld, create(lr, x, d, r));
        } else if (lr) {
          return create(create(ll, lv, ld, lr[0]), lr[1], lr[2], create(lr[3], x, d, r));
        } else {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else if (hr > (hl + 2 | 0)) {
      if (r) {
        var rr = r[3];
        var rd = r[2];
        var rv = r[1];
        var rl = r[0];
        if (height(rr) >= height(rl)) {
          return create(create(l, x, d, rl), rv, rd, rr);
        } else if (rl) {
          return create(create(l, x, d, rl[0]), rl[1], rl[2], create(rl[3], rv, rd, rr));
        } else {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else {
      return /* Node */[
              l,
              x,
              d,
              r,
              hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            ];
    }
  };
  var add = function (x, data, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        return /* Node */[
                l,
                x,
                data,
                r,
                param[4]
              ];
      } else if (c < 0) {
        return bal(add(x, data, l), v, d, r);
      } else {
        return bal(l, v, d, add(x, data, r));
      }
    } else {
      return /* Node */[
              /* Empty */0,
              x,
              data,
              /* Empty */0,
              1
            ];
    }
  };
  var min_binding = function (_param) {
    while(true) {
      var param = _param;
      if (param) {
        var l = param[0];
        if (l) {
          _param = l;
          continue ;
        } else {
          return /* tuple */[
                  param[1],
                  param[2]
                ];
        }
      } else {
        throw Caml_builtin_exceptions.not_found;
      }
    };
  };
  var remove_min_binding = function (param) {
    if (param) {
      var l = param[0];
      if (l) {
        return bal(remove_min_binding(l), param[1], param[2], param[3]);
      } else {
        return param[3];
      }
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "Map.remove_min_elt"
          ];
    }
  };
  var remove = function (x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        var t1 = l;
        var t2 = r;
        if (t1) {
          if (t2) {
            var match = min_binding(t2);
            return bal(t1, match[0], match[1], remove_min_binding(t2));
          } else {
            return t1;
          }
        } else {
          return t2;
        }
      } else if (c < 0) {
        return bal(remove(x, l), v, d, r);
      } else {
        return bal(l, v, d, remove(x, r));
      }
    } else {
      return /* Empty */0;
    }
  };
  var iter = function (f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        iter(f, param[0]);
        Curry._2(f, param[1], param[2]);
        _param = param[3];
        continue ;
      } else {
        return /* () */0;
      }
    };
  };
  var map = function (f, param) {
    if (param) {
      var l$prime = map(f, param[0]);
      var d$prime = Curry._1(f, param[2]);
      var r$prime = map(f, param[3]);
      return /* Node */[
              l$prime,
              param[1],
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  };
  var mapi = function (f, param) {
    if (param) {
      var v = param[1];
      var l$prime = mapi(f, param[0]);
      var d$prime = Curry._2(f, v, param[2]);
      var r$prime = mapi(f, param[3]);
      return /* Node */[
              l$prime,
              v,
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  };
  var fold = function (f, _m, _accu) {
    while(true) {
      var accu = _accu;
      var m = _m;
      if (m) {
        _accu = Curry._3(f, m[1], m[2], fold(f, m[0], accu));
        _m = m[3];
        continue ;
      } else {
        return accu;
      }
    };
  };
  var for_all = function (p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (Curry._2(p, param[1], param[2]) && for_all(p, param[0])) {
          _param = param[3];
          continue ;
        } else {
          return false;
        }
      } else {
        return true;
      }
    };
  };
  var exists = function (p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (Curry._2(p, param[1], param[2]) || exists(p, param[0])) {
          return true;
        } else {
          _param = param[3];
          continue ;
        }
      } else {
        return false;
      }
    };
  };
  var add_min_binding = function (k, v, param) {
    if (param) {
      return bal(add_min_binding(k, v, param[0]), param[1], param[2], param[3]);
    } else {
      return singleton(k, v);
    }
  };
  var add_max_binding = function (k, v, param) {
    if (param) {
      return bal(param[0], param[1], param[2], add_max_binding(k, v, param[3]));
    } else {
      return singleton(k, v);
    }
  };
  var join = function (l, v, d, r) {
    if (l) {
      if (r) {
        var rh = r[4];
        var lh = l[4];
        if (lh > (rh + 2 | 0)) {
          return bal(l[0], l[1], l[2], join(l[3], v, d, r));
        } else if (rh > (lh + 2 | 0)) {
          return bal(join(l, v, d, r[0]), r[1], r[2], r[3]);
        } else {
          return create(l, v, d, r);
        }
      } else {
        return add_max_binding(v, d, l);
      }
    } else {
      return add_min_binding(v, d, r);
    }
  };
  var concat = function (t1, t2) {
    if (t1) {
      if (t2) {
        var match = min_binding(t2);
        return join(t1, match[0], match[1], remove_min_binding(t2));
      } else {
        return t1;
      }
    } else {
      return t2;
    }
  };
  var concat_or_join = function (t1, v, d, t2) {
    if (d !== undefined) {
      return join(t1, v, Js_primitive.valFromOption(d), t2);
    } else {
      return concat(t1, t2);
    }
  };
  var split = function (x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        return /* tuple */[
                l,
                Js_primitive.some(d),
                r
              ];
      } else if (c < 0) {
        var match = split(x, l);
        return /* tuple */[
                match[0],
                match[1],
                join(match[2], v, d, r)
              ];
      } else {
        var match$1 = split(x, r);
        return /* tuple */[
                join(l, v, d, match$1[0]),
                match$1[1],
                match$1[2]
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              undefined,
              /* Empty */0
            ];
    }
  };
  var merge = function (f, s1, s2) {
    var exit = 0;
    if (s1) {
      var v1 = s1[1];
      if (s1[4] >= height(s2)) {
        var match = split(v1, s2);
        return concat_or_join(merge(f, s1[0], match[0]), v1, Curry._3(f, v1, Js_primitive.some(s1[2]), match[1]), merge(f, s1[3], match[2]));
      } else {
        exit = 1;
      }
    } else if (s2) {
      exit = 1;
    } else {
      return /* Empty */0;
    }
    if (exit === 1) {
      if (s2) {
        var v2 = s2[1];
        var match$1 = split(v2, s1);
        return concat_or_join(merge(f, match$1[0], s2[0]), v2, Curry._3(f, v2, match$1[1], Js_primitive.some(s2[2])), merge(f, match$1[2], s2[3]));
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "map.ml",
                270,
                10
              ]
            ];
      }
    }
    
  };
  var filter = function (p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var l$prime = filter(p, param[0]);
      var pvd = Curry._2(p, v, d);
      var r$prime = filter(p, param[3]);
      if (pvd) {
        return join(l$prime, v, d, r$prime);
      } else {
        return concat(l$prime, r$prime);
      }
    } else {
      return /* Empty */0;
    }
  };
  var partition = function (p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var match = partition(p, param[0]);
      var lf = match[1];
      var lt = match[0];
      var pvd = Curry._2(p, v, d);
      var match$1 = partition(p, param[3]);
      var rf = match$1[1];
      var rt = match$1[0];
      if (pvd) {
        return /* tuple */[
                join(lt, v, d, rt),
                concat(lf, rf)
              ];
      } else {
        return /* tuple */[
                concat(lt, rt),
                join(lf, v, d, rf)
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              /* Empty */0
            ];
    }
  };
  var cardinal = function (param) {
    if (param) {
      return (cardinal(param[0]) + 1 | 0) + cardinal(param[3]) | 0;
    } else {
      return 0;
    }
  };
  var bindings_aux = function (_accu, _param) {
    while(true) {
      var param = _param;
      var accu = _accu;
      if (param) {
        _param = param[0];
        _accu = /* :: */[
          /* tuple */[
            param[1],
            param[2]
          ],
          bindings_aux(accu, param[3])
        ];
        continue ;
      } else {
        return accu;
      }
    };
  };
  var expect = request[/* expect */4];
  var responseToResult = expect[1];
  var typ = expect[0];
  var withCredentials = request[/* withCredentials */6];
  var timeout = request[/* timeout */5];
  var body = request[/* body */3];
  var url = request[/* url */2];
  var headers = request[/* headers */1];
  var method$prime = request[/* method' */0];
  return /* EnqueueCall */Block.__(2, [(function (callbacks) {
                var enqRes = function (result, _ev) {
                  return Curry._1(callbacks[0][/* enqueue */0], Curry._1(resultToMessage, result));
                };
                var xhr = new XMLHttpRequest();
                if (maybeEvents !== undefined) {
                  var match = maybeEvents;
                  var mayCB = function (thenDo, param) {
                    if (param !== undefined) {
                      return Curry._1(thenDo, Curry._1(param, callbacks));
                    } else {
                      return /* () */0;
                    }
                  };
                  mayCB((function (param) {
                          xhr.onreadystatechange = param;
                          return /* () */0;
                        }), match[/* onreadystatechange */0]);
                  mayCB((function (param) {
                          xhr.onprogress = param;
                          return /* () */0;
                        }), match[/* onprogress */1]);
                }
                var partial_arg = /* Error */Block.__(1, [/* NetworkError */1]);
                var cb = function (param) {
                  return enqRes(partial_arg, param);
                };
                xhr.onerror = cb;
                var partial_arg$1 = /* Error */Block.__(1, [/* Timeout */0]);
                var cb$1 = function (param) {
                  return enqRes(partial_arg$1, param);
                };
                xhr.ontimeout = cb$1;
                var partial_arg$2 = /* Error */Block.__(1, [/* Aborted */2]);
                var cb$2 = function (param) {
                  return enqRes(partial_arg$2, param);
                };
                xhr.onabort = cb$2;
                var cb$3 = function (_ev) {
                  var match = Web_xmlhttprequest.getAllResponseHeadersAsDict(xhr);
                  var headers;
                  headers = match.tag ? /* Empty */0 : match[0];
                  var response_000 = /* url */xhr.responseURL;
                  var response_001 = /* status : record */[
                    /* code */xhr.status,
                    /* message */xhr.statusText
                  ];
                  var response_003 = /* body */Web_xmlhttprequest.get_response(xhr);
                  var response = /* record */[
                    response_000,
                    response_001,
                    /* headers */headers,
                    response_003
                  ];
                  if (response_001[/* code */0] < 200 || 300 <= response_001[/* code */0]) {
                    var partial_arg = /* Error */Block.__(1, [/* BadStatus */Block.__(1, [response])]);
                    return (function (param) {
                                return enqRes(partial_arg, param);
                              })(/* () */0);
                  } else {
                    var match$1 = Curry._1(responseToResult, response);
                    if (match$1.tag) {
                      var partial_arg$1 = /* Error */Block.__(1, [/* BadPayload */Block.__(2, [
                              match$1[0],
                              response
                            ])]);
                      return (function (param) {
                                  return enqRes(partial_arg$1, param);
                                })(/* () */0);
                    } else {
                      var partial_arg$2 = /* Ok */Block.__(0, [match$1[0]]);
                      return (function (param) {
                                  return enqRes(partial_arg$2, param);
                                })(/* () */0);
                    }
                  }
                };
                xhr.onload = cb$3;
                try {
                  Web_xmlhttprequest.open_(method$prime, url, undefined, undefined, undefined, xhr);
                }
                catch (exn){
                  var partial_arg$3 = /* Error */Block.__(1, [/* BadUrl */Block.__(0, [url])]);
                  ((function (param) {
                          return enqRes(partial_arg$3, param);
                        })(/* () */0));
                }
                var setHeader = function (param) {
                  return Web_xmlhttprequest.setRequestHeader(param[0], param[1], xhr);
                };
                List.iter(setHeader, headers);
                Web_xmlhttprequest.set_responseType(typ, xhr);
                if (timeout !== undefined) {
                  xhr.timeout = timeout;
                }
                xhr.withCredentials = withCredentials;
                Web_xmlhttprequest.send(body, xhr);
                return /* () */0;
              })]);
}

function encodeUri(str) {
  return encodeURIComponent(str);
}

function decodeUri(str) {
  try {
    return decodeURIComponent(str);
  }
  catch (exn){
    return undefined;
  }
}

function track(toMessage, param) {
  var events = param[1];
  var onprogress = (function (callbacks, ev) {
      var match = Tea_json.Decoder[/* decodeValue */30](Tea_json.Decoder[/* field */11]("lengthComputable", Tea_json.Decoder[/* bool */5]), ev);
      var lengthComputable;
      lengthComputable = match.tag ? false : match[0];
      if (lengthComputable) {
        var decoder = Tea_json.Decoder[/* map2 */17]((function (bytes, bytesExpected) {
                return /* record */[
                        /* bytes */bytes,
                        /* bytesExpected */bytesExpected
                      ];
              }), Tea_json.Decoder[/* field */11]("loaded", Tea_json.Decoder[/* int */3]), Tea_json.Decoder[/* field */11]("total", Tea_json.Decoder[/* int */3]));
        var match$1 = Tea_json.Decoder[/* decodeValue */30](decoder, ev);
        if (match$1.tag) {
          return /* () */0;
        } else {
          return Curry._1(callbacks[0][/* enqueue */0], Curry._1(toMessage, match$1[0]));
        }
      } else {
        return 0;
      }
    });
  var events$1 = events !== undefined ? events : emptyRequestEvents;
  return /* Request */[
          param[0],
          /* record */[
            /* onreadystatechange */events$1[/* onreadystatechange */0],
            /* onprogress */onprogress
          ]
        ];
}

var Progress_000 = /* emptyProgress : record */[
  /* bytes */0,
  /* bytesExpected */0
];

var Progress = /* module */[
  Progress_000,
  /* track */track
];

exports.string_of_error = string_of_error;
exports.emptyRequestEvents = emptyRequestEvents;
exports.expectStringResponse = expectStringResponse;
exports.expectString = expectString;
exports.request = request;
exports.getString = getString;
exports.toTask = toTask;
exports.send = send;
exports.encodeUri = encodeUri;
exports.decodeUri = decodeUri;
exports.Progress = Progress;
/* expectString Not a pure module */

},{"./tea_json.js":8,"./web_xmlhttprequest.js":21,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/caml_builtin_exceptions.js":37,"bs-platform/lib/js/caml_primitive.js":47,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/js_primitive.js":57,"bs-platform/lib/js/list.js":58}],8:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Web_json = require("./web_json.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Tea_result = require("./tea_result.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function height(param) {
  if (param) {
    return param[4];
  } else {
    return 0;
  }
}

function create(l, x, d, r) {
  var hl = height(l);
  var hr = height(r);
  return /* Node */[
          l,
          x,
          d,
          r,
          hl >= hr ? hl + 1 | 0 : hr + 1 | 0
        ];
}

function singleton(x, d) {
  return /* Node */[
          /* Empty */0,
          x,
          d,
          /* Empty */0,
          1
        ];
}

function bal(l, x, d, r) {
  var hl = l ? l[4] : 0;
  var hr = r ? r[4] : 0;
  if (hl > (hr + 2 | 0)) {
    if (l) {
      var lr = l[3];
      var ld = l[2];
      var lv = l[1];
      var ll = l[0];
      if (height(ll) >= height(lr)) {
        return create(ll, lv, ld, create(lr, x, d, r));
      } else if (lr) {
        return create(create(ll, lv, ld, lr[0]), lr[1], lr[2], create(lr[3], x, d, r));
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "Map.bal"
          ];
    }
  } else if (hr > (hl + 2 | 0)) {
    if (r) {
      var rr = r[3];
      var rd = r[2];
      var rv = r[1];
      var rl = r[0];
      if (height(rr) >= height(rl)) {
        return create(create(l, x, d, rl), rv, rd, rr);
      } else if (rl) {
        return create(create(l, x, d, rl[0]), rl[1], rl[2], create(rl[3], rv, rd, rr));
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "Map.bal"
          ];
    }
  } else {
    return /* Node */[
            l,
            x,
            d,
            r,
            hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          ];
  }
}

function is_empty(param) {
  if (param) {
    return false;
  } else {
    return true;
  }
}

function add(x, data, param) {
  if (param) {
    var r = param[3];
    var d = param[2];
    var v = param[1];
    var l = param[0];
    var c = Caml_primitive.caml_string_compare(x, v);
    if (c === 0) {
      return /* Node */[
              l,
              x,
              data,
              r,
              param[4]
            ];
    } else if (c < 0) {
      return bal(add(x, data, l), v, d, r);
    } else {
      return bal(l, v, d, add(x, data, r));
    }
  } else {
    return /* Node */[
            /* Empty */0,
            x,
            data,
            /* Empty */0,
            1
          ];
  }
}

function find(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var c = Caml_primitive.caml_string_compare(x, param[1]);
      if (c === 0) {
        return param[2];
      } else {
        _param = c < 0 ? param[0] : param[3];
        continue ;
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function mem(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var c = Caml_primitive.caml_string_compare(x, param[1]);
      if (c === 0) {
        return true;
      } else {
        _param = c < 0 ? param[0] : param[3];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function min_binding(_param) {
  while(true) {
    var param = _param;
    if (param) {
      var l = param[0];
      if (l) {
        _param = l;
        continue ;
      } else {
        return /* tuple */[
                param[1],
                param[2]
              ];
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function max_binding(_param) {
  while(true) {
    var param = _param;
    if (param) {
      var r = param[3];
      if (r) {
        _param = r;
        continue ;
      } else {
        return /* tuple */[
                param[1],
                param[2]
              ];
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function remove_min_binding(param) {
  if (param) {
    var l = param[0];
    if (l) {
      return bal(remove_min_binding(l), param[1], param[2], param[3]);
    } else {
      return param[3];
    }
  } else {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Map.remove_min_elt"
        ];
  }
}

function remove(x, param) {
  if (param) {
    var r = param[3];
    var d = param[2];
    var v = param[1];
    var l = param[0];
    var c = Caml_primitive.caml_string_compare(x, v);
    if (c === 0) {
      var t1 = l;
      var t2 = r;
      if (t1) {
        if (t2) {
          var match = min_binding(t2);
          return bal(t1, match[0], match[1], remove_min_binding(t2));
        } else {
          return t1;
        }
      } else {
        return t2;
      }
    } else if (c < 0) {
      return bal(remove(x, l), v, d, r);
    } else {
      return bal(l, v, d, remove(x, r));
    }
  } else {
    return /* Empty */0;
  }
}

function iter(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      iter(f, param[0]);
      Curry._2(f, param[1], param[2]);
      _param = param[3];
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function map(f, param) {
  if (param) {
    var l$prime = map(f, param[0]);
    var d$prime = Curry._1(f, param[2]);
    var r$prime = map(f, param[3]);
    return /* Node */[
            l$prime,
            param[1],
            d$prime,
            r$prime,
            param[4]
          ];
  } else {
    return /* Empty */0;
  }
}

function mapi(f, param) {
  if (param) {
    var v = param[1];
    var l$prime = mapi(f, param[0]);
    var d$prime = Curry._2(f, v, param[2]);
    var r$prime = mapi(f, param[3]);
    return /* Node */[
            l$prime,
            v,
            d$prime,
            r$prime,
            param[4]
          ];
  } else {
    return /* Empty */0;
  }
}

function fold(f, _m, _accu) {
  while(true) {
    var accu = _accu;
    var m = _m;
    if (m) {
      _accu = Curry._3(f, m[1], m[2], fold(f, m[0], accu));
      _m = m[3];
      continue ;
    } else {
      return accu;
    }
  };
}

function for_all(p, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._2(p, param[1], param[2]) && for_all(p, param[0])) {
        _param = param[3];
        continue ;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };
}

function exists(p, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._2(p, param[1], param[2]) || exists(p, param[0])) {
        return true;
      } else {
        _param = param[3];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function add_min_binding(k, v, param) {
  if (param) {
    return bal(add_min_binding(k, v, param[0]), param[1], param[2], param[3]);
  } else {
    return singleton(k, v);
  }
}

function add_max_binding(k, v, param) {
  if (param) {
    return bal(param[0], param[1], param[2], add_max_binding(k, v, param[3]));
  } else {
    return singleton(k, v);
  }
}

function join(l, v, d, r) {
  if (l) {
    if (r) {
      var rh = r[4];
      var lh = l[4];
      if (lh > (rh + 2 | 0)) {
        return bal(l[0], l[1], l[2], join(l[3], v, d, r));
      } else if (rh > (lh + 2 | 0)) {
        return bal(join(l, v, d, r[0]), r[1], r[2], r[3]);
      } else {
        return create(l, v, d, r);
      }
    } else {
      return add_max_binding(v, d, l);
    }
  } else {
    return add_min_binding(v, d, r);
  }
}

function concat(t1, t2) {
  if (t1) {
    if (t2) {
      var match = min_binding(t2);
      return join(t1, match[0], match[1], remove_min_binding(t2));
    } else {
      return t1;
    }
  } else {
    return t2;
  }
}

function concat_or_join(t1, v, d, t2) {
  if (d !== undefined) {
    return join(t1, v, Js_primitive.valFromOption(d), t2);
  } else {
    return concat(t1, t2);
  }
}

function split(x, param) {
  if (param) {
    var r = param[3];
    var d = param[2];
    var v = param[1];
    var l = param[0];
    var c = Caml_primitive.caml_string_compare(x, v);
    if (c === 0) {
      return /* tuple */[
              l,
              Js_primitive.some(d),
              r
            ];
    } else if (c < 0) {
      var match = split(x, l);
      return /* tuple */[
              match[0],
              match[1],
              join(match[2], v, d, r)
            ];
    } else {
      var match$1 = split(x, r);
      return /* tuple */[
              join(l, v, d, match$1[0]),
              match$1[1],
              match$1[2]
            ];
    }
  } else {
    return /* tuple */[
            /* Empty */0,
            undefined,
            /* Empty */0
          ];
  }
}

function merge(f, s1, s2) {
  var exit = 0;
  if (s1) {
    var v1 = s1[1];
    if (s1[4] >= height(s2)) {
      var match = split(v1, s2);
      return concat_or_join(merge(f, s1[0], match[0]), v1, Curry._3(f, v1, Js_primitive.some(s1[2]), match[1]), merge(f, s1[3], match[2]));
    } else {
      exit = 1;
    }
  } else if (s2) {
    exit = 1;
  } else {
    return /* Empty */0;
  }
  if (exit === 1) {
    if (s2) {
      var v2 = s2[1];
      var match$1 = split(v2, s1);
      return concat_or_join(merge(f, match$1[0], s2[0]), v2, Curry._3(f, v2, match$1[1], Js_primitive.some(s2[2])), merge(f, match$1[2], s2[3]));
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "map.ml",
              270,
              10
            ]
          ];
    }
  }
  
}

function filter(p, param) {
  if (param) {
    var d = param[2];
    var v = param[1];
    var l$prime = filter(p, param[0]);
    var pvd = Curry._2(p, v, d);
    var r$prime = filter(p, param[3]);
    if (pvd) {
      return join(l$prime, v, d, r$prime);
    } else {
      return concat(l$prime, r$prime);
    }
  } else {
    return /* Empty */0;
  }
}

function partition(p, param) {
  if (param) {
    var d = param[2];
    var v = param[1];
    var match = partition(p, param[0]);
    var lf = match[1];
    var lt = match[0];
    var pvd = Curry._2(p, v, d);
    var match$1 = partition(p, param[3]);
    var rf = match$1[1];
    var rt = match$1[0];
    if (pvd) {
      return /* tuple */[
              join(lt, v, d, rt),
              concat(lf, rf)
            ];
    } else {
      return /* tuple */[
              concat(lt, rt),
              join(lf, v, d, rf)
            ];
    }
  } else {
    return /* tuple */[
            /* Empty */0,
            /* Empty */0
          ];
  }
}

function cons_enum(_m, _e) {
  while(true) {
    var e = _e;
    var m = _m;
    if (m) {
      _e = /* More */[
        m[1],
        m[2],
        m[3],
        e
      ];
      _m = m[0];
      continue ;
    } else {
      return e;
    }
  };
}

function compare(cmp, m1, m2) {
  var _e1 = cons_enum(m1, /* End */0);
  var _e2 = cons_enum(m2, /* End */0);
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (e1) {
      if (e2) {
        var c = Caml_primitive.caml_string_compare(e1[0], e2[0]);
        if (c !== 0) {
          return c;
        } else {
          var c$1 = Curry._2(cmp, e1[1], e2[1]);
          if (c$1 !== 0) {
            return c$1;
          } else {
            _e2 = cons_enum(e2[2], e2[3]);
            _e1 = cons_enum(e1[2], e1[3]);
            continue ;
          }
        }
      } else {
        return 1;
      }
    } else if (e2) {
      return -1;
    } else {
      return 0;
    }
  };
}

function equal(cmp, m1, m2) {
  var _e1 = cons_enum(m1, /* End */0);
  var _e2 = cons_enum(m2, /* End */0);
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (e1) {
      if (e2 && Caml_primitive.caml_string_compare(e1[0], e2[0]) === 0 && Curry._2(cmp, e1[1], e2[1])) {
        _e2 = cons_enum(e2[2], e2[3]);
        _e1 = cons_enum(e1[2], e1[3]);
        continue ;
      } else {
        return false;
      }
    } else if (e2) {
      return false;
    } else {
      return true;
    }
  };
}

function cardinal(param) {
  if (param) {
    return (cardinal(param[0]) + 1 | 0) + cardinal(param[3]) | 0;
  } else {
    return 0;
  }
}

function bindings_aux(_accu, _param) {
  while(true) {
    var param = _param;
    var accu = _accu;
    if (param) {
      _param = param[0];
      _accu = /* :: */[
        /* tuple */[
          param[1],
          param[2]
        ],
        bindings_aux(accu, param[3])
      ];
      continue ;
    } else {
      return accu;
    }
  };
}

function bindings(s) {
  return bindings_aux(/* [] */0, s);
}

var ObjectDict = [
  /* Empty */0,
  is_empty,
  mem,
  add,
  singleton,
  remove,
  merge,
  compare,
  equal,
  iter,
  fold,
  for_all,
  exists,
  filter,
  partition,
  cardinal,
  bindings,
  min_binding,
  max_binding,
  min_binding,
  split,
  find,
  map,
  mapi
];

var ParseFail = Caml_exceptions.create("Tea_json.Decoder.ParseFail");

var string = /* Decoder */[(function (value) {
      var match = Web_json.classify(value);
      if (typeof match === "number" || match.tag) {
        return /* Error */Block.__(1, ["Non-string value"]);
      } else {
        return /* Ok */Block.__(0, [match[0]]);
      }
    })];

var $$int = /* Decoder */[(function (value) {
      var match = Web_json.classify(value);
      if (typeof match === "number" || match.tag !== 1) {
        return /* Error */Block.__(1, ["Non-int value"]);
      } else {
        var n = match[0];
        if (n > Pervasives.min_int && n < Pervasives.max_int) {
          return /* Ok */Block.__(0, [n | 0]);
        } else {
          return /* Error */Block.__(1, ["number out of int range"]);
        }
      }
    })];

var $$float = /* Decoder */[(function (value) {
      var match = Web_json.classify(value);
      if (typeof match === "number" || match.tag !== 1) {
        return /* Error */Block.__(1, ["Non-float-value"]);
      } else {
        return /* Ok */Block.__(0, [match[0]]);
      }
    })];

var bool = /* Decoder */[(function (value) {
      var match = Web_json.classify(value);
      if (typeof match === "number") {
        switch (match) {
          case 0 : 
              return /* Ok */Block.__(0, [false]);
          case 1 : 
              return /* Ok */Block.__(0, [true]);
          case 2 : 
              return /* Error */Block.__(1, ["Non-boolean value"]);
          
        }
      } else {
        return /* Error */Block.__(1, ["Non-boolean value"]);
      }
    })];

function $$null(v) {
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number" && match >= 2) {
                return /* Ok */Block.__(0, [v]);
              } else {
                return /* Error */Block.__(1, ["Non-null value"]);
              }
            })];
}

function list(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number" || match.tag !== 3) {
                return /* Error */Block.__(1, ["Non-list value"]);
              } else {
                var parse = function (v) {
                  var match = Curry._1(decoder, v);
                  if (match.tag) {
                    throw [
                          ParseFail,
                          match[0]
                        ];
                  } else {
                    return match[0];
                  }
                };
                try {
                  return /* Ok */Block.__(0, [List.map(parse, $$Array.to_list(match[0]))]);
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn[0] === ParseFail) {
                    return /* Error */Block.__(1, ["list -> " + exn[1]]);
                  } else {
                    throw exn;
                  }
                }
              }
            })];
}

function array(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number" || match.tag !== 3) {
                return /* Error */Block.__(1, ["Non-array value"]);
              } else {
                var parse = function (v) {
                  var match = Curry._1(decoder, v);
                  if (match.tag) {
                    throw [
                          ParseFail,
                          match[0]
                        ];
                  } else {
                    return match[0];
                  }
                };
                try {
                  return /* Ok */Block.__(0, [$$Array.map(parse, match[0])]);
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn[0] === ParseFail) {
                    return /* Error */Block.__(1, ["array -> " + exn[1]]);
                  } else {
                    throw exn;
                  }
                }
              }
            })];
}

function keyValuePairs(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number" || match.tag !== 2) {
                return /* Error */Block.__(1, ["Non-keyValuePair value"]);
              } else {
                var o = match[0];
                var keys = Object.keys(o);
                var parse = function (k, l) {
                  var match = o[k];
                  if (match !== undefined) {
                    var match$1 = Curry._1(decoder, match);
                    if (match$1.tag) {
                      throw [
                            ParseFail,
                            match$1[0]
                          ];
                    } else {
                      return /* :: */[
                              /* tuple */[
                                k,
                                match$1[0]
                              ],
                              l
                            ];
                    }
                  } else {
                    throw [
                          ParseFail,
                          "Key is undefined: " + k
                        ];
                  }
                };
                try {
                  return /* Ok */Block.__(0, [$$Array.fold_right(parse, keys, /* [] */0)]);
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn[0] === ParseFail) {
                    return /* Error */Block.__(1, ["Invalid keyValuePair parsing: " + exn[1]]);
                  } else {
                    throw exn;
                  }
                }
              }
            })];
}

function dict(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number" || match.tag !== 2) {
                return /* Error */Block.__(1, ["Non-dict value"]);
              } else {
                var o = match[0];
                var keys = Object.keys(o);
                var parse = function (k, d) {
                  var match = o[k];
                  if (match !== undefined) {
                    var match$1 = Curry._1(decoder, match);
                    if (match$1.tag) {
                      throw [
                            ParseFail,
                            match$1[0]
                          ];
                    } else {
                      return add(k, match$1[0], d);
                    }
                  } else {
                    throw [
                          ParseFail,
                          "Key is undefined: " + k
                        ];
                  }
                };
                try {
                  return /* Ok */Block.__(0, [$$Array.fold_right(parse, keys, /* Empty */0)]);
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn[0] === ParseFail) {
                    return /* Error */Block.__(1, ["Invalid dict parsing: " + exn[1]]);
                  } else {
                    throw exn;
                  }
                }
              }
            })];
}

function field(key, param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number" || match.tag !== 2) {
                return /* Error */Block.__(1, ["Non-fieldable value"]);
              } else {
                var match$1 = match[0][key];
                if (match$1 !== undefined) {
                  var o = Curry._1(decoder, match$1);
                  if (o.tag) {
                    return /* Error */Block.__(1, ["field `" + (key + ("` -> " + o[0]))]);
                  } else {
                    return o;
                  }
                } else {
                  return /* Error */Block.__(1, ["Field Value is undefined: " + key]);
                }
              }
            })];
}

function at(fields, dec) {
  return List.fold_right(field, fields, dec);
}

function index(idx, param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number" || match.tag !== 3) {
                return /* Error */Block.__(1, ["Non-array value"]);
              } else {
                var a = match[0];
                if (idx < 0 || idx > a.length) {
                  return /* Error */Block.__(1, ["Array index out of range: " + String(idx)]);
                } else {
                  return Curry._1(decoder, Caml_array.caml_array_get(a, idx));
                }
              }
            })];
}

function maybe(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder, value);
              if (match.tag) {
                return /* Ok */Block.__(0, [undefined]);
              } else {
                return /* Ok */Block.__(0, [Js_primitive.some(match[0])]);
              }
            })];
}

function oneOf(decoders) {
  return /* Decoder */[(function (value) {
              var parse = function (v, _param) {
                while(true) {
                  var param = _param;
                  if (param) {
                    var rest = param[1];
                    try {
                      var ok = Curry._1(param[0][0], v);
                      if (ok.tag) {
                        return parse(v, rest);
                      } else {
                        return ok;
                      }
                    }
                    catch (exn){
                      _param = rest;
                      continue ;
                    }
                  } else {
                    return /* Error */Block.__(1, ["No one-of's matched"]);
                  }
                };
              };
              return parse(value, decoders);
            })];
}

function map$1(mapper, param) {
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              if (match.tag) {
                return /* Error */Block.__(1, ["map " + match[0]]);
              } else {
                return /* Ok */Block.__(0, [Curry._1(mapper, match[0])]);
              }
            })];
}

function map2(mapper, param, param$1) {
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var exit = 0;
              if (match.tag || match$1.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._2(mapper, match[0], match$1[0])]);
              }
              if (exit === 1) {
                var match$2 = Tea_result.error_of_first(match, match$1);
                if (match$2 !== undefined) {
                  return /* Error */Block.__(1, ["map2 -> " + match$2]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map3(mapper, param, param$1, param$2) {
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._3(mapper, match[0], match$1[0], match$2[0])]);
              }
              if (exit === 1) {
                var match$3 = Tea_result.first(match$2, Tea_result.first(match$1, match));
                if (match$3.tag) {
                  return /* Error */Block.__(1, ["map3 -> " + match$3[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map4(mapper, param, param$1, param$2, param$3) {
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._4(mapper, match[0], match$1[0], match$2[0], match$3[0])]);
              }
              if (exit === 1) {
                var match$4 = Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match)));
                if (match$4.tag) {
                  return /* Error */Block.__(1, ["map4 -> " + match$4[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map5(mapper, param, param$1, param$2, param$3, param$4) {
  var decoder5 = param$4[0];
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var match$4 = Curry._1(decoder5, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._5(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0])]);
              }
              if (exit === 1) {
                var match$5 = Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match))));
                if (match$5.tag) {
                  return /* Error */Block.__(1, ["map5 -> " + match$5[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map6(mapper, param, param$1, param$2, param$3, param$4, param$5) {
  var decoder6 = param$5[0];
  var decoder5 = param$4[0];
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var match$4 = Curry._1(decoder5, value);
              var match$5 = Curry._1(decoder6, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag || match$5.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._6(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0])]);
              }
              if (exit === 1) {
                var match$6 = Tea_result.first(match$5, Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match)))));
                if (match$6.tag) {
                  return /* Error */Block.__(1, ["map6 -> " + match$6[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map7(mapper, param, param$1, param$2, param$3, param$4, param$5, param$6) {
  var decoder7 = param$6[0];
  var decoder6 = param$5[0];
  var decoder5 = param$4[0];
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var match$4 = Curry._1(decoder5, value);
              var match$5 = Curry._1(decoder6, value);
              var match$6 = Curry._1(decoder7, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag || match$5.tag || match$6.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._7(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0], match$6[0])]);
              }
              if (exit === 1) {
                var match$7 = Tea_result.first(match$6, Tea_result.first(match$5, Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match))))));
                if (match$7.tag) {
                  return /* Error */Block.__(1, ["map7 -> " + match$7[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map8(mapper, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
  var decoder8 = param$7[0];
  var decoder7 = param$6[0];
  var decoder6 = param$5[0];
  var decoder5 = param$4[0];
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var match$4 = Curry._1(decoder5, value);
              var match$5 = Curry._1(decoder6, value);
              var match$6 = Curry._1(decoder7, value);
              var match$7 = Curry._1(decoder8, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag || match$5.tag || match$6.tag || match$7.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._8(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0], match$6[0], match$7[0])]);
              }
              if (exit === 1) {
                var match$8 = Tea_result.first(match$7, Tea_result.first(match$6, Tea_result.first(match$5, Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match)))))));
                if (match$8.tag) {
                  return /* Error */Block.__(1, ["map8 -> " + match$8[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function succeed(v) {
  return /* Decoder */[(function (_value) {
              return /* Ok */Block.__(0, [v]);
            })];
}

function fail(e) {
  return /* Decoder */[(function (_value) {
              return /* Error */Block.__(1, [e]);
            })];
}

var value = /* Decoder */[(function (value) {
      return /* Ok */Block.__(0, [value]);
    })];

function andThen(func, param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var err = Curry._1(decoder, value);
              if (err.tag) {
                return err;
              } else {
                var match = Curry._1(func, err[0]);
                return Curry._1(match[0], value);
              }
            })];
}

function lazy_(func) {
  return andThen(func, /* Decoder */[(function (_value) {
                  return /* Ok */Block.__(0, [/* () */0]);
                })]);
}

function nullable(decoder) {
  return oneOf(/* :: */[
              $$null(undefined),
              /* :: */[
                map$1((function (v) {
                        return Js_primitive.some(v);
                      }), decoder),
                /* [] */0
              ]
            ]);
}

function decodeValue(param, value) {
  try {
    return Curry._1(param[0], value);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === ParseFail) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      return /* Error */Block.__(1, ["Unknown JSON parsing error"]);
    }
  }
}

function decodeEvent(param, value) {
  try {
    return Curry._1(param[0], value);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === ParseFail) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      return /* Error */Block.__(1, ["Unknown JSON parsing error"]);
    }
  }
}

function decodeString(decoder, string) {
  try {
    var value = JSON.parse(string);
    return decodeValue(decoder, value);
  }
  catch (exn){
    return /* Error */Block.__(1, ["Invalid JSON string"]);
  }
}

var Decoder = /* module */[
  /* ObjectDict */ObjectDict,
  /* ParseFail */ParseFail,
  /* string */string,
  /* int */$$int,
  /* float */$$float,
  /* bool */bool,
  /* null */$$null,
  /* list */list,
  /* array */array,
  /* keyValuePairs */keyValuePairs,
  /* dict */dict,
  /* field */field,
  /* at */at,
  /* index */index,
  /* maybe */maybe,
  /* oneOf */oneOf,
  /* map */map$1,
  /* map2 */map2,
  /* map3 */map3,
  /* map4 */map4,
  /* map5 */map5,
  /* map6 */map6,
  /* map7 */map7,
  /* map8 */map8,
  /* succeed */succeed,
  /* fail */fail,
  /* value */value,
  /* andThen */andThen,
  /* lazy_ */lazy_,
  /* nullable */nullable,
  /* decodeValue */decodeValue,
  /* decodeEvent */decodeEvent,
  /* decodeString */decodeString
];

function encode(indentLevel, value) {
  return Web_json.string_of_json(indentLevel, value);
}

function string$1(v) {
  return v;
}

function $$int$1(v) {
  return v;
}

function $$float$1(v) {
  return v;
}

function bool$1(v) {
  return v;
}

function object_(v) {
  var aux = function (o, param) {
    o[param[0]] = param[1];
    return o;
  };
  return List.fold_left(aux, { }, v);
}

function array$1(v) {
  return v;
}

var list$1 = $$Array.of_list;

var Encoder = /* module */[
  /* encode */encode,
  /* string */string$1,
  /* int */$$int$1,
  /* float */$$float$1,
  /* bool */bool$1,
  /* null */Web_json.$$null,
  /* object_ */object_,
  /* array */array$1,
  /* list */list$1
];

exports.Decoder = Decoder;
exports.Encoder = Encoder;
/* No side effect */

},{"./tea_result.js":10,"./web_json.js":17,"bs-platform/lib/js/array.js":32,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/caml_array.js":36,"bs-platform/lib/js/caml_builtin_exceptions.js":37,"bs-platform/lib/js/caml_exceptions.js":39,"bs-platform/lib/js/caml_primitive.js":47,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/js_exn.js":55,"bs-platform/lib/js/js_primitive.js":57,"bs-platform/lib/js/list.js":58,"bs-platform/lib/js/pervasives.js":59}],9:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Vdom = require("./vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Tea_sub = require("./tea_sub.js");
var Tea_json = require("./tea_json.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var position = Tea_json.Decoder[/* map2 */17]((function (x, y) {
        return /* record */[
                /* x */x,
                /* y */y
              ];
      }), Tea_json.Decoder[/* field */11]("pageX", Tea_json.Decoder[/* int */3]), Tea_json.Decoder[/* field */11]("pageY", Tea_json.Decoder[/* int */3]));

function registerGlobal(name, key, tagger) {
  var enableCall = function (callbacks_base) {
    var callbacks = /* record */[/* contents */callbacks_base];
    var fn = function (ev) {
      var match = Tea_json.Decoder[/* decodeEvent */31](position, ev);
      if (match.tag) {
        return undefined;
      } else {
        return Js_primitive.some(Curry._1(tagger, match[0]));
      }
    };
    var handler = /* EventHandlerCallback */Block.__(0, [
        key,
        fn
      ]);
    var elem = document;
    var cache = Vdom.eventHandler_Register(callbacks, elem, name, handler);
    return (function (param) {
        Vdom.eventHandler_Unregister(elem, name, cache);
        return /* () */0;
      });
  };
  return Tea_sub.registration(key, enableCall);
}

function clicks($staropt$star, tagger) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return registerGlobal("click", key, tagger);
}

function moves($staropt$star, tagger) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return registerGlobal("mousemove", key, tagger);
}

function downs($staropt$star, tagger) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return registerGlobal("mousedown", key, tagger);
}

function ups($staropt$star, tagger) {
  var key = $staropt$star !== undefined ? $staropt$star : "";
  return registerGlobal("mouseup", key, tagger);
}

exports.position = position;
exports.registerGlobal = registerGlobal;
exports.clicks = clicks;
exports.moves = moves;
exports.downs = downs;
exports.ups = ups;
/* position Not a pure module */

},{"./tea_json.js":8,"./tea_sub.js":11,"./vdom.js":13,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/js_primitive.js":57}],10:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function result_to_option(param) {
  if (param.tag) {
    return undefined;
  } else {
    return Js_primitive.some(param[0]);
  }
}

function option_of_result(param) {
  if (param.tag) {
    return undefined;
  } else {
    return Js_primitive.some(param[0]);
  }
}

function ok(param) {
  if (param.tag) {
    return undefined;
  } else {
    return Js_primitive.some(param[0]);
  }
}

function error(param) {
  if (param.tag) {
    return Js_primitive.some(param[0]);
  }
  
}

function last_of(_param) {
  while(true) {
    var param = _param;
    if (param) {
      var tl = param[1];
      var last = param[0];
      if (tl && !last.tag) {
        _param = tl;
        continue ;
      } else {
        return last;
      }
    } else {
      throw [
            Caml_builtin_exceptions.failure,
            "`Tea.Result.do` must never be passed the empty list"
          ];
    }
  };
}

function accumulate(param) {
  if (param) {
    var tl = param[1];
    var last = param[0];
    if (tl) {
      if (last.tag) {
        return last;
      } else {
        var e = accumulate(tl);
        if (e.tag) {
          return e;
        } else {
          return /* Ok */Block.__(0, [/* :: */[
                      last[0],
                      e[0]
                    ]]);
        }
      }
    } else if (last.tag) {
      return last;
    } else {
      return /* Ok */Block.__(0, [/* :: */[
                  last[0],
                  /* [] */0
                ]]);
    }
  } else {
    return /* Ok */Block.__(0, [/* [] */0]);
  }
}

function first(fst, e) {
  if (e.tag) {
    return e;
  } else {
    return fst;
  }
}

function error_of_any(_param) {
  while(true) {
    var param = _param;
    if (param) {
      var hd = param[0];
      if (hd.tag) {
        return Js_primitive.some(hd[0]);
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return undefined;
    }
  };
}

function error_of_first(fst, param) {
  if (param.tag) {
    return Js_primitive.some(param[0]);
  } else {
    return error(fst);
  }
}

exports.result_to_option = result_to_option;
exports.option_of_result = option_of_result;
exports.ok = ok;
exports.error = error;
exports.last_of = last_of;
exports.accumulate = accumulate;
exports.first = first;
exports.error_of_any = error_of_any;
exports.error_of_first = error_of_first;
/* No side effect */

},{"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/caml_builtin_exceptions.js":37,"bs-platform/lib/js/js_primitive.js":57}],11:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");

function batch(subs) {
  return /* Batch */Block.__(0, [subs]);
}

function registration(key, enableCall) {
  return /* Registration */Block.__(1, [
            key,
            (function (callbacks) {
                return Curry._1(enableCall, callbacks[0]);
              }),
            /* record */[/* contents */undefined]
          ]);
}

function map(msgMapper, sub) {
  var func = function (callbacks) {
    return /* record */[/* contents : record */[/* enqueue */(function (userMsg) {
                  return Curry._1(callbacks[0][/* enqueue */0], Curry._1(msgMapper, userMsg));
                })]];
  };
  return /* Mapper */Block.__(2, [
            func,
            sub
          ]);
}

function mapFunc(func, sub) {
  return /* Mapper */Block.__(2, [
            func,
            sub
          ]);
}

function run(oldCallbacks, newCallbacks, oldSub, newSub) {
  var enable = function (_callbacks, _param) {
    while(true) {
      var param = _param;
      var callbacks = _callbacks;
      if (typeof param === "number") {
        return /* () */0;
      } else {
        switch (param.tag | 0) {
          case 0 : 
              var subs = param[0];
              if (subs) {
                return List.iter((function(callbacks){
                          return function (param) {
                            return enable(callbacks, param);
                          }
                          }(callbacks)), subs);
              } else {
                return /* () */0;
              }
          case 1 : 
              param[2][0] = Curry._1(param[1], callbacks);
              return /* () */0;
          case 2 : 
              var subCallbacks = Curry._1(param[0], callbacks);
              _param = param[1];
              _callbacks = subCallbacks;
              continue ;
          
        }
      }
    };
  };
  var disable = function (_callbacks, _param) {
    while(true) {
      var param = _param;
      var callbacks = _callbacks;
      if (typeof param === "number") {
        return /* () */0;
      } else {
        switch (param.tag | 0) {
          case 0 : 
              var subs = param[0];
              if (subs) {
                return List.iter((function(callbacks){
                          return function (param) {
                            return disable(callbacks, param);
                          }
                          }(callbacks)), subs);
              } else {
                return /* () */0;
              }
          case 1 : 
              var diCB = param[2];
              var match = diCB[0];
              if (match !== undefined) {
                diCB[0] = undefined;
                return Curry._1(match, /* () */0);
              } else {
                return /* () */0;
              }
          case 2 : 
              var subCallbacks = Curry._1(param[0], callbacks);
              _param = param[1];
              _callbacks = subCallbacks;
              continue ;
          
        }
      }
    };
  };
  var exit = 0;
  if (typeof oldSub === "number") {
    if (typeof newSub === "number") {
      return newSub;
    } else {
      exit = 1;
    }
  } else {
    switch (oldSub.tag | 0) {
      case 0 : 
          if (typeof newSub === "number" || newSub.tag) {
            exit = 1;
          } else {
            var aux = function (_oldList, _newList) {
              while(true) {
                var newList = _newList;
                var oldList = _oldList;
                if (oldList) {
                  var oldRest = oldList[1];
                  var oldSubSub = oldList[0];
                  if (newList) {
                    run(oldCallbacks, newCallbacks, oldSubSub, newList[0]);
                    _newList = newList[1];
                    _oldList = oldRest;
                    continue ;
                  } else {
                    disable(oldCallbacks, oldSubSub);
                    _newList = /* [] */0;
                    _oldList = oldRest;
                    continue ;
                  }
                } else if (newList) {
                  enable(newCallbacks, newList[0]);
                  _newList = newList[1];
                  _oldList = /* [] */0;
                  continue ;
                } else {
                  return /* () */0;
                }
              };
            };
            aux(oldSub[0], newSub[0]);
            return newSub;
          }
          break;
      case 1 : 
          if (typeof newSub === "number" || !(newSub.tag === 1 && oldSub[0] === newSub[0])) {
            exit = 1;
          } else {
            newSub[2][0] = oldSub[2][0];
            return newSub;
          }
          break;
      case 2 : 
          if (typeof newSub === "number" || newSub.tag !== 2) {
            exit = 1;
          } else {
            var olderCallbacks = Curry._1(oldSub[0], oldCallbacks);
            var newerCallbacks = Curry._1(newSub[0], newCallbacks);
            run(olderCallbacks, newerCallbacks, oldSub[1], newSub[1]);
            return newSub;
          }
          break;
      
    }
  }
  if (exit === 1) {
    disable(oldCallbacks, oldSub);
    enable(newCallbacks, newSub);
    return newSub;
  }
  
}

var none = /* NoSub */0;

exports.none = none;
exports.batch = batch;
exports.registration = registration;
exports.map = map;
exports.mapFunc = mapFunc;
exports.run = run;
/* No side effect */

},{"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/list.js":58}],12:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function nothing(param) {
  return /* () */0;
}

function performOpt(toOptionalMessage, param) {
  var task = param[0];
  return /* EnqueueCall */Block.__(2, [(function (callbacks) {
                return Curry._1(task, (function (param) {
                              if (param.tag) {
                                throw [
                                      Caml_builtin_exceptions.failure,
                                      "ERROR:  Task perfom returned error of never! Should not happen!"
                                    ];
                              } else {
                                var match = Curry._1(toOptionalMessage, param[0]);
                                if (match !== undefined) {
                                  return Curry._1(callbacks[0][/* enqueue */0], Js_primitive.valFromOption(match));
                                } else {
                                  return /* () */0;
                                }
                              }
                            }));
              })]);
}

function perform(toMessage, task) {
  return performOpt((function (v) {
                return Js_primitive.some(Curry._1(toMessage, v));
              }), task);
}

function attemptOpt(resultToOptionalMessage, param) {
  var task = param[0];
  return /* EnqueueCall */Block.__(2, [(function (callbacks) {
                return Curry._1(task, (function (value) {
                              var match = Curry._1(resultToOptionalMessage, value);
                              if (match !== undefined) {
                                return Curry._1(callbacks[0][/* enqueue */0], Js_primitive.valFromOption(match));
                              } else {
                                return /* () */0;
                              }
                            }));
              })]);
}

function attempt(resultToMessage, task) {
  return attemptOpt((function (v) {
                return Js_primitive.some(Curry._1(resultToMessage, v));
              }), task);
}

function ignore(task) {
  return attemptOpt((function (param) {
                return undefined;
              }), task);
}

function succeed(value) {
  return /* Task */[(function (cb) {
              return Curry._1(cb, /* Ok */Block.__(0, [value]));
            })];
}

function fail(value) {
  return /* Task */[(function (cb) {
              return Curry._1(cb, /* Error */Block.__(1, [value]));
            })];
}

function nativeBinding(func) {
  return /* Task */[func];
}

function andThen(fn, param) {
  var task = param[0];
  return /* Task */[(function (cb) {
              return Curry._1(task, (function (err) {
                            if (err.tag) {
                              return Curry._1(cb, err);
                            } else {
                              var match = Curry._1(fn, err[0]);
                              return Curry._1(match[0], cb);
                            }
                          }));
            })];
}

function onError(fn, param) {
  var task = param[0];
  return /* Task */[(function (cb) {
              return Curry._1(task, (function (ok) {
                            if (ok.tag) {
                              var match = Curry._1(fn, ok[0]);
                              return Curry._1(match[0], cb);
                            } else {
                              return Curry._1(cb, ok);
                            }
                          }));
            })];
}

function fromResult(param) {
  if (param.tag) {
    var value = param[0];
    return /* Task */[(function (cb) {
                return Curry._1(cb, /* Error */Block.__(1, [value]));
              })];
  } else {
    var value$1 = param[0];
    return /* Task */[(function (cb) {
                return Curry._1(cb, /* Ok */Block.__(0, [value$1]));
              })];
  }
}

function mapError(func, task) {
  return onError((function (e) {
                var value = Curry._1(func, e);
                return /* Task */[(function (cb) {
                            return Curry._1(cb, /* Error */Block.__(1, [value]));
                          })];
              }), task);
}

function toOption(task) {
  return onError((function (param) {
                return /* Task */[(function (cb) {
                            return Curry._1(cb, /* Ok */Block.__(0, [undefined]));
                          })];
              }), andThen((function (v) {
                    var value = Js_primitive.some(v);
                    return /* Task */[(function (cb) {
                                return Curry._1(cb, /* Ok */Block.__(0, [value]));
                              })];
                  }), task));
}

function map(func, task1) {
  return andThen((function (v1) {
                var value = Curry._1(func, v1);
                return /* Task */[(function (cb) {
                            return Curry._1(cb, /* Ok */Block.__(0, [value]));
                          })];
              }), task1);
}

function map2(func, task1, task2) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              var value = Curry._2(func, v1, v2);
                              return /* Task */[(function (cb) {
                                          return Curry._1(cb, /* Ok */Block.__(0, [value]));
                                        })];
                            }), task2);
              }), task1);
}

function map3(func, task1, task2, task3) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              return andThen((function (v3) {
                                            var value = Curry._3(func, v1, v2, v3);
                                            return /* Task */[(function (cb) {
                                                        return Curry._1(cb, /* Ok */Block.__(0, [value]));
                                                      })];
                                          }), task3);
                            }), task2);
              }), task1);
}

function map4(func, task1, task2, task3, task4) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              return andThen((function (v3) {
                                            return andThen((function (v4) {
                                                          var value = Curry._4(func, v1, v2, v3, v4);
                                                          return /* Task */[(function (cb) {
                                                                      return Curry._1(cb, /* Ok */Block.__(0, [value]));
                                                                    })];
                                                        }), task4);
                                          }), task3);
                            }), task2);
              }), task1);
}

function map5(func, task1, task2, task3, task4, task5) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              return andThen((function (v3) {
                                            return andThen((function (v4) {
                                                          return andThen((function (v5) {
                                                                        var value = Curry._5(func, v1, v2, v3, v4, v5);
                                                                        return /* Task */[(function (cb) {
                                                                                    return Curry._1(cb, /* Ok */Block.__(0, [value]));
                                                                                  })];
                                                                      }), task5);
                                                        }), task4);
                                          }), task3);
                            }), task2);
              }), task1);
}

function map6(func, task1, task2, task3, task4, task5, task6) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              return andThen((function (v3) {
                                            return andThen((function (v4) {
                                                          return andThen((function (v5) {
                                                                        return andThen((function (v6) {
                                                                                      var value = Curry._6(func, v1, v2, v3, v4, v5, v6);
                                                                                      return /* Task */[(function (cb) {
                                                                                                  return Curry._1(cb, /* Ok */Block.__(0, [value]));
                                                                                                })];
                                                                                    }), task6);
                                                                      }), task5);
                                                        }), task4);
                                          }), task3);
                            }), task2);
              }), task1);
}

function sequence(param) {
  if (param) {
    return map2((function (l, r) {
                  return /* :: */[
                          l,
                          r
                        ];
                }), param[0], sequence(param[1]));
  } else {
    return /* Task */[(function (cb) {
                return Curry._1(cb, /* Ok */Block.__(0, [/* [] */0]));
              })];
  }
}

var testing_deop = /* record */[/* contents */true];

function testing(param) {
  var doTest = function (expected, param) {
    return Curry._1(param[0], (function (v) {
                  if (Caml_obj.caml_equal(v, expected)) {
                    console.log(/* tuple */[
                          "Passed:",
                          expected,
                          v
                        ]);
                    return /* () */0;
                  } else {
                    console.log(/* tuple */[
                          "FAILED:",
                          expected,
                          v
                        ]);
                    return /* () */0;
                  }
                }));
  };
  var s = /* Task */[(function (cb) {
        return Curry._1(cb, /* Ok */Block.__(0, [42]));
      })];
  doTest(/* Ok */Block.__(0, [42]), s);
  var f = /* Task */[(function (cb) {
        return Curry._1(cb, /* Error */Block.__(1, [86]));
      })];
  doTest(/* Error */Block.__(1, [86]), f);
  var r = function (param) {
    if (testing_deop[0]) {
      return /* Task */[(function (cb) {
                  return Curry._1(cb, /* Ok */Block.__(0, [42]));
                })];
    } else {
      return /* Task */[(function (cb) {
                  return Curry._1(cb, /* Error */Block.__(1, [3.14]));
                })];
    }
  };
  var a1 = andThen((function (n) {
          var value = n + 2 | 0;
          return /* Task */[(function (cb) {
                      return Curry._1(cb, /* Ok */Block.__(0, [value]));
                    })];
        }), /* Task */[(function (cb) {
            return Curry._1(cb, /* Ok */Block.__(0, [2]));
          })]);
  doTest(/* Ok */Block.__(0, [4]), a1);
  var a2 = andThen((function (n) {
          var value = String(n);
          return /* Task */[(function (cb) {
                      return Curry._1(cb, /* Ok */Block.__(0, [value]));
                    })];
        }), /* Task */[(function (cb) {
            return Curry._1(cb, /* Ok */Block.__(0, [2]));
          })]);
  doTest(/* Ok */Block.__(0, ["2"]), a2);
  var m1 = map((function (prim) {
          return Math.sqrt(prim);
        }), /* Task */[(function (cb) {
            return Curry._1(cb, /* Ok */Block.__(0, [9]));
          })]);
  doTest(/* Ok */Block.__(0, [3]), m1);
  var m2 = map2((function (prim, prim$1) {
          return prim + prim$1 | 0;
        }), /* Task */[(function (cb) {
            return Curry._1(cb, /* Ok */Block.__(0, [9]));
          })], /* Task */[(function (cb) {
            return Curry._1(cb, /* Ok */Block.__(0, [3]));
          })]);
  doTest(/* Ok */Block.__(0, [12]), m2);
  var m3 = map((function (prim) {
          return String(prim);
        }), /* Task */[(function (cb) {
            return Curry._1(cb, /* Ok */Block.__(0, [9]));
          })]);
  doTest(/* Ok */Block.__(0, ["9"]), m3);
  var s0 = sequence(/* :: */[
        /* Task */[(function (cb) {
              return Curry._1(cb, /* Ok */Block.__(0, [1]));
            })],
        /* :: */[
          /* Task */[(function (cb) {
                return Curry._1(cb, /* Ok */Block.__(0, [2]));
              })],
          /* [] */0
        ]
      ]);
  doTest(/* Ok */Block.__(0, [/* :: */[
            1,
            /* :: */[
              2,
              /* [] */0
            ]
          ]]), s0);
  var s1 = sequence(/* :: */[
        /* Task */[(function (cb) {
              return Curry._1(cb, /* Ok */Block.__(0, [1]));
            })],
        /* :: */[
          /* Task */[(function (cb) {
                return Curry._1(cb, /* Error */Block.__(1, [2.7]));
              })],
          /* :: */[
            r(/* () */0),
            /* [] */0
          ]
        ]
      ]);
  doTest(/* Error */Block.__(1, [2.7]), s1);
  var e0 = onError((function (_msg) {
          return /* Task */[(function (cb) {
                      return Curry._1(cb, /* Ok */Block.__(0, [42]));
                    })];
        }), /* Task */[(function (cb) {
            return Curry._1(cb, /* Error */Block.__(1, ["file not found"]));
          })]);
  doTest(/* Ok */Block.__(0, [42]), e0);
  var e1 = onError((function (_msg) {
          return /* Task */[(function (cb) {
                      return Curry._1(cb, /* Error */Block.__(1, [42]));
                    })];
        }), /* Task */[(function (cb) {
            return Curry._1(cb, /* Error */Block.__(1, ["file not found"]));
          })]);
  doTest(/* Error */Block.__(1, [42]), e1);
  var n0 = sequence(/* :: */[
        mapError((function (prim) {
                return String(prim);
              }), /* Task */[(function (cb) {
                  return Curry._1(cb, /* Error */Block.__(1, [42]));
                })]),
        /* :: */[
          mapError(Pervasives.string_of_float, /* Task */[(function (cb) {
                    return Curry._1(cb, /* Error */Block.__(1, [3.14]));
                  })]),
          /* [] */0
        ]
      ]);
  doTest(/* Error */Block.__(1, ["42"]), n0);
  var n1 = sequence(/* :: */[
        mapError((function (prim) {
                return String(prim);
              }), /* Task */[(function (cb) {
                  return Curry._1(cb, /* Ok */Block.__(0, [1]));
                })]),
        /* :: */[
          mapError(Pervasives.string_of_float, /* Task */[(function (cb) {
                    return Curry._1(cb, /* Error */Block.__(1, [3.14]));
                  })]),
          /* [] */0
        ]
      ]);
  doTest(/* Error */Block.__(1, ["3.14"]), n1);
  var n2 = sequence(/* :: */[
        mapError((function (prim) {
                return String(prim);
              }), /* Task */[(function (cb) {
                  return Curry._1(cb, /* Ok */Block.__(0, [1]));
                })]),
        /* :: */[
          mapError(Pervasives.string_of_float, /* Task */[(function (cb) {
                    return Curry._1(cb, /* Ok */Block.__(0, [2]));
                  })]),
          /* [] */0
        ]
      ]);
  doTest(/* Ok */Block.__(0, [/* :: */[
            1,
            /* :: */[
              2,
              /* [] */0
            ]
          ]]), n2);
  perform((function (param) {
          return 42;
        }), /* Task */[(function (cb) {
            return Curry._1(cb, /* Ok */Block.__(0, [18]));
          })]);
  var value = 42;
  doTest(/* Ok */Block.__(0, [42]), /* Task */[(function (cb) {
            return Curry._1(cb, /* Ok */Block.__(0, [value]));
          })]);
  var value$1 = "failure";
  doTest(/* Error */Block.__(1, ["failure"]), /* Task */[(function (cb) {
            return Curry._1(cb, /* Error */Block.__(1, [value$1]));
          })]);
  doTest(/* Ok */Block.__(0, [undefined]), toOption(/* Task */[(function (cb) {
                return Curry._1(cb, /* Error */Block.__(1, ["for some reason"]));
              })]));
  doTest(/* Ok */Block.__(0, [42]), toOption(/* Task */[(function (cb) {
                return Curry._1(cb, /* Ok */Block.__(0, [42]));
              })]));
  return /* () */0;
}

exports.nothing = nothing;
exports.performOpt = performOpt;
exports.perform = perform;
exports.attemptOpt = attemptOpt;
exports.attempt = attempt;
exports.ignore = ignore;
exports.succeed = succeed;
exports.fail = fail;
exports.nativeBinding = nativeBinding;
exports.andThen = andThen;
exports.onError = onError;
exports.fromResult = fromResult;
exports.mapError = mapError;
exports.toOption = toOption;
exports.map = map;
exports.map2 = map2;
exports.map3 = map3;
exports.map4 = map4;
exports.map5 = map5;
exports.map6 = map6;
exports.sequence = sequence;
exports.testing_deop = testing_deop;
exports.testing = testing;
/* No side effect */

},{"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/caml_builtin_exceptions.js":37,"bs-platform/lib/js/caml_obj.js":46,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/js_primitive.js":57,"bs-platform/lib/js/pervasives.js":59}],13:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Web_node = require("./web_node.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Web_document = require("./web_document.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var noNode = /* CommentNode */Block.__(0, [""]);

function comment(s) {
  return /* CommentNode */Block.__(0, [s]);
}

function text(s) {
  return /* Text */Block.__(1, [s]);
}

function fullnode(namespace, tagName, key, unique, props, vdoms) {
  return /* Node */Block.__(2, [
            namespace,
            tagName,
            key,
            unique,
            props,
            vdoms
          ]);
}

function node($staropt$star, tagName, $staropt$star$1, $staropt$star$2, props, vdoms) {
  var namespace = $staropt$star !== undefined ? $staropt$star : "";
  var key = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  var unique = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
  return fullnode(namespace, tagName, key, unique, props, vdoms);
}

function lazyGen(key, fn) {
  return /* LazyGen */Block.__(3, [
            key,
            fn,
            /* record */[/* contents */noNode]
          ]);
}

function prop(key, value) {
  return /* RawProp */Block.__(0, [
            key,
            value
          ]);
}

function onCB(name, key, cb) {
  return /* Event */Block.__(3, [
            name,
            /* EventHandlerCallback */Block.__(0, [
                key,
                cb
              ]),
            /* record */[/* contents */undefined]
          ]);
}

function onMsg(name, msg) {
  return /* Event */Block.__(3, [
            name,
            /* EventHandlerMsg */Block.__(1, [msg]),
            /* record */[/* contents */undefined]
          ]);
}

function attribute(namespace, key, value) {
  return /* Attribute */Block.__(1, [
            namespace,
            key,
            value
          ]);
}

function data(key, value) {
  return /* Data */Block.__(2, [
            key,
            value
          ]);
}

function style(key, value) {
  return /* Style */Block.__(4, [/* :: */[
              /* tuple */[
                key,
                value
              ],
              /* [] */0
            ]]);
}

function styles(s) {
  return /* Style */Block.__(4, [s]);
}

function renderToHtmlString(_param) {
  while(true) {
    var param = _param;
    switch (param.tag | 0) {
      case 0 : 
          return "<!-- " + (param[0] + " -->");
      case 1 : 
          return param[0];
      case 2 : 
          var tagName = param[1];
          var namespace = param[0];
          return $$String.concat("", /* :: */[
                      "<",
                      /* :: */[
                        namespace,
                        /* :: */[
                          namespace === "" ? "" : ":",
                          /* :: */[
                            tagName,
                            /* :: */[
                              $$String.concat("", List.map((function (p) {
                                          var param = p;
                                          if (typeof param === "number") {
                                            return "";
                                          } else {
                                            switch (param.tag | 0) {
                                              case 0 : 
                                                  return $$String.concat("", /* :: */[
                                                              " ",
                                                              /* :: */[
                                                                param[0],
                                                                /* :: */[
                                                                  "=\"",
                                                                  /* :: */[
                                                                    param[1],
                                                                    /* :: */[
                                                                      "\"",
                                                                      /* [] */0
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]);
                                              case 1 : 
                                                  return $$String.concat("", /* :: */[
                                                              " ",
                                                              /* :: */[
                                                                param[1],
                                                                /* :: */[
                                                                  "=\"",
                                                                  /* :: */[
                                                                    param[2],
                                                                    /* :: */[
                                                                      "\"",
                                                                      /* [] */0
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]);
                                              case 2 : 
                                                  return $$String.concat("", /* :: */[
                                                              " data-",
                                                              /* :: */[
                                                                param[0],
                                                                /* :: */[
                                                                  "=\"",
                                                                  /* :: */[
                                                                    param[1],
                                                                    /* :: */[
                                                                      "\"",
                                                                      /* [] */0
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]);
                                              case 3 : 
                                                  return "";
                                              case 4 : 
                                                  return $$String.concat("", /* :: */[
                                                              " style=\"",
                                                              /* :: */[
                                                                $$String.concat(";", List.map((function (param) {
                                                                            return $$String.concat("", /* :: */[
                                                                                        param[0],
                                                                                        /* :: */[
                                                                                          ":",
                                                                                          /* :: */[
                                                                                            param[1],
                                                                                            /* :: */[
                                                                                              ";",
                                                                                              /* [] */0
                                                                                            ]
                                                                                          ]
                                                                                        ]
                                                                                      ]);
                                                                          }), param[0])),
                                                                /* :: */[
                                                                  "\"",
                                                                  /* [] */0
                                                                ]
                                                              ]
                                                            ]);
                                              
                                            }
                                          }
                                        }), param[4])),
                              /* :: */[
                                ">",
                                /* :: */[
                                  $$String.concat("", List.map(renderToHtmlString, param[5])),
                                  /* :: */[
                                    "</",
                                    /* :: */[
                                      tagName,
                                      /* :: */[
                                        ">",
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]);
      case 3 : 
          _param = Curry._1(param[1], /* () */0);
          continue ;
      case 4 : 
          _param = param[1];
          continue ;
      
    }
  };
}

function emptyEventHandler(_ev) {
  return /* () */0;
}

function emptyEventCB(_ev) {
  return undefined;
}

function eventHandler(callbacks, cb) {
  return (function (ev) {
      var match = Curry._1(cb[0], ev);
      if (match !== undefined) {
        return Curry._1(callbacks[0][/* enqueue */0], Js_primitive.valFromOption(match));
      } else {
        return /* () */0;
      }
    });
}

function eventHandler_GetCB(param) {
  if (param.tag) {
    var msg = param[0];
    return (function (_ev) {
        return Js_primitive.some(msg);
      });
  } else {
    return param[1];
  }
}

function compareEventHandlerTypes(left, param) {
  if (param.tag) {
    if (left.tag && Caml_obj.caml_equal(param[0], left[0])) {
      return true;
    } else {
      return false;
    }
  } else if (left.tag) {
    return false;
  } else {
    return param[0] === left[0];
  }
}

function eventHandler_Register(callbacks, elem, name, handlerType) {
  var cb = /* record */[/* contents */eventHandler_GetCB(handlerType)];
  var handler = eventHandler(callbacks, cb);
  Web_node.addEventListener(elem, name, handler, false);
  return /* record */[
          /* handler */handler,
          /* cb */cb
        ];
}

function eventHandler_Unregister(elem, name, param) {
  if (param !== undefined) {
    Web_node.removeEventListener(elem, name, param[/* handler */0], false);
    return undefined;
  }
  
}

function eventHandler_Mutate(callbacks, elem, oldName, newName, oldHandlerType, newHandlerType, oldCache, newCache) {
  var match = oldCache[0];
  if (match !== undefined) {
    if (oldName === newName) {
      newCache[0] = oldCache[0];
      if (compareEventHandlerTypes(oldHandlerType, newHandlerType)) {
        return /* () */0;
      } else {
        var cb = eventHandler_GetCB(newHandlerType);
        match[/* cb */1][0] = cb;
        return /* () */0;
      }
    } else {
      oldCache[0] = eventHandler_Unregister(elem, oldName, oldCache[0]);
      newCache[0] = eventHandler_Register(callbacks, elem, newName, newHandlerType);
      return /* () */0;
    }
  } else {
    newCache[0] = eventHandler_Register(callbacks, elem, newName, newHandlerType);
    return /* () */0;
  }
}

function patchVNodesOnElems_PropertiesApply_Add(callbacks, elem, _idx, param) {
  if (typeof param === "number") {
    return /* () */0;
  } else {
    switch (param.tag | 0) {
      case 0 : 
          elem[param[0]] = param[1];
          return /* () */0;
      case 1 : 
          return Web_node.setAttributeNsOptional(elem, param[0], param[1], param[2]);
      case 2 : 
          console.log(/* tuple */[
                "TODO:  Add Data Unhandled",
                param[0],
                param[1]
              ]);
          throw [
                Caml_builtin_exceptions.failure,
                "TODO:  Add Data Unhandled"
              ];
      case 3 : 
          param[2][0] = eventHandler_Register(callbacks, elem, param[0], param[1]);
          return /* () */0;
      case 4 : 
          return List.fold_left((function (param, param$1) {
                        return Web_node.setStyleProperty(elem, undefined, param$1[0], param$1[1]);
                      }), /* () */0, param[0]);
      
    }
  }
}

function patchVNodesOnElems_PropertiesApply_Remove(_callbacks, elem, _idx, param) {
  if (typeof param === "number") {
    return /* () */0;
  } else {
    switch (param.tag | 0) {
      case 0 : 
          elem[param[0]] = undefined;
          return /* () */0;
      case 1 : 
          return Web_node.removeAttributeNsOptional(elem, param[0], param[1]);
      case 2 : 
          console.log(/* tuple */[
                "TODO:  Remove Data Unhandled",
                param[0],
                param[1]
              ]);
          throw [
                Caml_builtin_exceptions.failure,
                "TODO:  Remove Data Unhandled"
              ];
      case 3 : 
          var cache = param[2];
          cache[0] = eventHandler_Unregister(elem, param[0], cache[0]);
          return /* () */0;
      case 4 : 
          return List.fold_left((function (param, param$1) {
                        return Web_node.setStyleProperty(elem, undefined, param$1[0], null);
                      }), /* () */0, param[0]);
      
    }
  }
}

function patchVNodesOnElems_PropertiesApply_RemoveAdd(callbacks, elem, idx, oldProp, newProp) {
  patchVNodesOnElems_PropertiesApply_Remove(callbacks, elem, idx, oldProp);
  patchVNodesOnElems_PropertiesApply_Add(callbacks, elem, idx, newProp);
  return /* () */0;
}

function patchVNodesOnElems_PropertiesApply_Mutate(_callbacks, elem, _idx, oldProp, _newProp) {
  if (typeof _newProp === "number") {
    throw [
          Caml_builtin_exceptions.failure,
          "This should never be called as all entries through NoProp are gated."
        ];
  } else {
    switch (_newProp.tag | 0) {
      case 0 : 
          elem[_newProp[0]] = _newProp[1];
          return /* () */0;
      case 1 : 
          return Web_node.setAttributeNsOptional(elem, _newProp[0], _newProp[1], _newProp[2]);
      case 2 : 
          console.log(/* tuple */[
                "TODO:  Mutate Data Unhandled",
                _newProp[0],
                _newProp[1]
              ]);
          throw [
                Caml_builtin_exceptions.failure,
                "TODO:  Mutate Data Unhandled"
              ];
      case 3 : 
          throw [
                Caml_builtin_exceptions.failure,
                "This will never be called because it is gated"
              ];
      case 4 : 
          if (typeof oldProp === "number") {
            throw [
                  Caml_builtin_exceptions.failure,
                  "Passed a non-Style to a new Style as a Mutations while the old Style is not actually a style!"
                ];
          } else if (oldProp.tag === 4) {
            return List.fold_left2((function (param, param$1, param$2) {
                          var nv = param$2[1];
                          var nk = param$2[0];
                          var ok = param$1[0];
                          if (ok === nk) {
                            if (param$1[1] === nv) {
                              return /* () */0;
                            } else {
                              return Web_node.setStyleProperty(elem, undefined, nk, nv);
                            }
                          } else {
                            Web_node.setStyleProperty(elem, undefined, ok, null);
                            return Web_node.setStyleProperty(elem, undefined, nk, nv);
                          }
                        }), /* () */0, oldProp[0], _newProp[0]);
          } else {
            throw [
                  Caml_builtin_exceptions.failure,
                  "Passed a non-Style to a new Style as a Mutations while the old Style is not actually a style!"
                ];
          }
      
    }
  }
}

function patchVNodesOnElems_PropertiesApply(callbacks, elem, _idx, _oldProperties, _newProperties) {
  while(true) {
    var newProperties = _newProperties;
    var oldProperties = _oldProperties;
    var idx = _idx;
    if (oldProperties) {
      var _oldProp = oldProperties[0];
      var exit = 0;
      if (newProperties) {
        if (typeof _oldProp === "number") {
          if (typeof newProperties[0] === "number") {
            _newProperties = newProperties[1];
            _oldProperties = oldProperties[1];
            _idx = idx + 1 | 0;
            continue ;
          } else {
            exit = 1;
          }
        } else {
          switch (_oldProp.tag | 0) {
            case 0 : 
                var newProp = newProperties[0];
                if (typeof newProp === "number" || newProp.tag) {
                  exit = 1;
                } else {
                  if (!(_oldProp[0] === newProp[0] && _oldProp[1] === newProp[1])) {
                    patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp);
                  }
                  _newProperties = newProperties[1];
                  _oldProperties = oldProperties[1];
                  _idx = idx + 1 | 0;
                  continue ;
                }
                break;
            case 1 : 
                var newProp$1 = newProperties[0];
                if (typeof newProp$1 === "number" || newProp$1.tag !== 1) {
                  exit = 1;
                } else {
                  if (!(_oldProp[0] === newProp$1[0] && _oldProp[1] === newProp$1[1] && _oldProp[2] === newProp$1[2])) {
                    patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$1);
                  }
                  _newProperties = newProperties[1];
                  _oldProperties = oldProperties[1];
                  _idx = idx + 1 | 0;
                  continue ;
                }
                break;
            case 2 : 
                var newProp$2 = newProperties[0];
                if (typeof newProp$2 === "number" || newProp$2.tag !== 2) {
                  exit = 1;
                } else {
                  if (!(_oldProp[0] === newProp$2[0] && _oldProp[1] === newProp$2[1])) {
                    patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$2);
                  }
                  _newProperties = newProperties[1];
                  _oldProperties = oldProperties[1];
                  _idx = idx + 1 | 0;
                  continue ;
                }
                break;
            case 3 : 
                var _newProp = newProperties[0];
                if (typeof _newProp === "number" || _newProp.tag !== 3) {
                  exit = 1;
                } else {
                  eventHandler_Mutate(callbacks, elem, _oldProp[0], _newProp[0], _oldProp[1], _newProp[1], _oldProp[2], _newProp[2]);
                  _newProperties = newProperties[1];
                  _oldProperties = oldProperties[1];
                  _idx = idx + 1 | 0;
                  continue ;
                }
                break;
            case 4 : 
                var newProp$3 = newProperties[0];
                if (typeof newProp$3 === "number" || newProp$3.tag !== 4) {
                  exit = 1;
                } else {
                  if (!Caml_obj.caml_equal(_oldProp[0], newProp$3[0])) {
                    patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$3);
                  }
                  _newProperties = newProperties[1];
                  _oldProperties = oldProperties[1];
                  _idx = idx + 1 | 0;
                  continue ;
                }
                break;
            
          }
        }
      } else {
        return false;
      }
      if (exit === 1) {
        patchVNodesOnElems_PropertiesApply_RemoveAdd(callbacks, elem, idx, _oldProp, newProperties[0]);
        _newProperties = newProperties[1];
        _oldProperties = oldProperties[1];
        _idx = idx + 1 | 0;
        continue ;
      }
      
    } else if (newProperties) {
      return false;
    } else {
      return true;
    }
  };
}

function patchVNodesOnElems_Properties(callbacks, elem, oldProperties, newProperties) {
  return patchVNodesOnElems_PropertiesApply(callbacks, elem, 0, oldProperties, newProperties);
}

function genEmptyProps(length) {
  var _lst = /* [] */0;
  var _len = length;
  while(true) {
    var len = _len;
    var lst = _lst;
    if (len !== 0) {
      _len = len - 1 | 0;
      _lst = /* :: */[
        /* NoProp */0,
        lst
      ];
      continue ;
    } else {
      return lst;
    }
  };
}

function mapEmptyProps(props) {
  return List.map((function (param) {
                return /* NoProp */0;
              }), props);
}

function patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, param) {
  if (param.tag === 2) {
    var newProperties = param[4];
    var oldChild = Caml_array.caml_array_get(elems, idx);
    var newChild = Web_document.createElementNsOptional(param[0], param[1]);
    var match = patchVNodesOnElems_Properties(callbacks, newChild, List.map((function (param) {
                return /* NoProp */0;
              }), newProperties), newProperties);
    if (match) {
      var childChildren = newChild.childNodes;
      patchVNodesOnElems(callbacks, newChild, childChildren, 0, /* [] */0, param[5]);
      Web_node.insertBefore(elem, newChild, oldChild);
      elem.removeChild(oldChild);
      return /* () */0;
    } else {
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "vdom.ml",
              383,
              30
            ]
          ];
    }
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "Node replacement should never be passed anything but a node itself"
        ];
  }
}

function patchVNodesOnElems_CreateElement(_callbacks, _param) {
  while(true) {
    var param = _param;
    var callbacks = _callbacks;
    switch (param.tag | 0) {
      case 0 : 
          var text = param[0];
          return document.createComment(text);
      case 1 : 
          var text$1 = param[0];
          return document.createTextNode(text$1);
      case 2 : 
          var newProperties = param[4];
          var newChild = Web_document.createElementNsOptional(param[0], param[1]);
          var match = patchVNodesOnElems_Properties(callbacks, newChild, List.map((function (param) {
                      return /* NoProp */0;
                    }), newProperties), newProperties);
          if (match) {
            var childChildren = newChild.childNodes;
            patchVNodesOnElems(callbacks, newChild, childChildren, 0, /* [] */0, param[5]);
            return newChild;
          } else {
            throw [
                  Caml_builtin_exceptions.match_failure,
                  /* tuple */[
                    "vdom.ml",
                    400,
                    30
                  ]
                ];
          }
      case 3 : 
          var vdom = Curry._1(param[1], /* () */0);
          param[2][0] = vdom;
          _param = vdom;
          continue ;
      case 4 : 
          _param = param[1];
          _callbacks = Curry._1(param[0], callbacks);
          continue ;
      
    }
  };
}

function patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode) {
  if (oldNode.tag === 2) {
    if (newNode.tag === 2) {
      if (oldNode[3] !== newNode[3] || oldNode[1] !== newNode[1]) {
        return patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, newNode);
      } else {
        var child = Caml_array.caml_array_get(elems, idx);
        var childChildren = child.childNodes;
        if (!patchVNodesOnElems_Properties(callbacks, child, oldNode[4], newNode[4])) {
          console.log("VDom:  Failed swapping properties because the property list length changed, use `noProp` to swap properties instead, not by altering the list structure.  This is a massive inefficiency until this issue is resolved.");
          patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, newNode);
        }
        return patchVNodesOnElems(callbacks, child, childChildren, 0, oldNode[5], newNode[5]);
      }
    } else {
      throw [
            Caml_builtin_exceptions.failure,
            "Non-node passed to patchVNodesOnElems_MutateNode"
          ];
    }
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "Non-node passed to patchVNodesOnElems_MutateNode"
        ];
  }
}

function patchVNodesOnElems(callbacks, elem, elems, _idx, _oldVNodes, _newVNodes) {
  while(true) {
    var newVNodes = _newVNodes;
    var oldVNodes = _oldVNodes;
    var idx = _idx;
    if (oldVNodes) {
      var oldNode = oldVNodes[0];
      var exit = 0;
      switch (oldNode.tag | 0) {
        case 0 : 
            if (newVNodes) {
              var match = newVNodes[0];
              if (match.tag || oldNode[0] !== match[0]) {
                exit = 1;
              } else {
                _newVNodes = newVNodes[1];
                _oldVNodes = oldVNodes[1];
                _idx = idx + 1 | 0;
                continue ;
              }
            } else {
              exit = 1;
            }
            break;
        case 1 : 
            if (newVNodes) {
              var match$1 = newVNodes[0];
              if (match$1.tag === 1) {
                var newText = match$1[0];
                if (oldNode[0] !== newText) {
                  var child = Caml_array.caml_array_get(elems, idx);
                  child.nodeValue = newText;
                }
                _newVNodes = newVNodes[1];
                _oldVNodes = oldVNodes[1];
                _idx = idx + 1 | 0;
                continue ;
              } else {
                exit = 1;
              }
            } else {
              exit = 1;
            }
            break;
        case 2 : 
            if (newVNodes) {
              var newNode = newVNodes[0];
              if (newNode.tag === 2) {
                var newRest = newVNodes[1];
                var newKey = newNode[2];
                var newTagName = newNode[1];
                var newNamespace = newNode[0];
                var oldRest = oldVNodes[1];
                var oldKey = oldNode[2];
                var oldTagName = oldNode[1];
                var oldNamespace = oldNode[0];
                if (oldKey === newKey && oldKey !== "") {
                  _newVNodes = newRest;
                  _oldVNodes = oldRest;
                  _idx = idx + 1 | 0;
                  continue ;
                } else if (oldKey === "" || newKey === "") {
                  patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode);
                  _newVNodes = newRest;
                  _oldVNodes = oldRest;
                  _idx = idx + 1 | 0;
                  continue ;
                } else {
                  var exit$1 = 0;
                  var exit$2 = 0;
                  if (oldRest) {
                    var match$2 = oldRest[0];
                    if (match$2.tag === 2) {
                      var olderRest = oldRest[1];
                      var olderKey = match$2[2];
                      var olderTagName = match$2[1];
                      var olderNamespace = match$2[0];
                      var exit$3 = 0;
                      if (newRest) {
                        var match$3 = newRest[0];
                        if (match$3.tag === 2 && olderNamespace === newNamespace && olderTagName === newTagName && olderKey === newKey && oldNamespace === match$3[0] && oldTagName === match$3[1] && oldKey === match$3[2]) {
                          var firstChild = Caml_array.caml_array_get(elems, idx);
                          var secondChild = Caml_array.caml_array_get(elems, idx + 1 | 0);
                          elem.removeChild(secondChild);
                          Web_node.insertBefore(elem, secondChild, firstChild);
                          _newVNodes = newRest[1];
                          _oldVNodes = olderRest;
                          _idx = idx + 2 | 0;
                          continue ;
                        } else {
                          exit$3 = 4;
                        }
                      } else {
                        exit$3 = 4;
                      }
                      if (exit$3 === 4) {
                        if (olderNamespace === newNamespace && olderTagName === newTagName && olderKey === newKey) {
                          var oldChild = Caml_array.caml_array_get(elems, idx);
                          elem.removeChild(oldChild);
                          _newVNodes = newRest;
                          _oldVNodes = olderRest;
                          _idx = idx + 1 | 0;
                          continue ;
                        } else {
                          exit$2 = 3;
                        }
                      }
                      
                    } else {
                      exit$2 = 3;
                    }
                  } else {
                    exit$2 = 3;
                  }
                  if (exit$2 === 3) {
                    if (newRest) {
                      var match$4 = newRest[0];
                      if (match$4.tag === 2 && oldNamespace === match$4[0] && oldTagName === match$4[1] && oldKey === match$4[2]) {
                        var oldChild$1 = Caml_array.caml_array_get(elems, idx);
                        var newChild = patchVNodesOnElems_CreateElement(callbacks, newNode);
                        Web_node.insertBefore(elem, newChild, oldChild$1);
                        _newVNodes = newRest;
                        _idx = idx + 1 | 0;
                        continue ;
                      } else {
                        exit$1 = 2;
                      }
                    } else {
                      exit$1 = 2;
                    }
                  }
                  if (exit$1 === 2) {
                    patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode);
                    _newVNodes = newRest;
                    _oldVNodes = oldRest;
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  
                }
              } else {
                exit = 1;
              }
            } else {
              exit = 1;
            }
            break;
        case 3 : 
            if (newVNodes) {
              var match$5 = newVNodes[0];
              if (match$5.tag === 3) {
                var newRest$1 = newVNodes[1];
                var newCache = match$5[2];
                var newGen = match$5[1];
                var newKey$1 = match$5[0];
                var oldRest$1 = oldVNodes[1];
                var oldCache = oldNode[2];
                var oldKey$1 = oldNode[0];
                if (oldKey$1 === newKey$1) {
                  newCache[0] = oldCache[0];
                  _newVNodes = newRest$1;
                  _oldVNodes = oldRest$1;
                  _idx = idx + 1 | 0;
                  continue ;
                } else {
                  var exit$4 = 0;
                  var exit$5 = 0;
                  if (oldRest$1) {
                    var match$6 = oldRest$1[0];
                    if (match$6.tag === 3) {
                      var olderRest$1 = oldRest$1[1];
                      var olderKey$1 = match$6[0];
                      var exit$6 = 0;
                      if (newRest$1) {
                        var match$7 = newRest$1[0];
                        if (match$7.tag === 3 && olderKey$1 === newKey$1 && oldKey$1 === match$7[0]) {
                          var firstChild$1 = Caml_array.caml_array_get(elems, idx);
                          var secondChild$1 = Caml_array.caml_array_get(elems, idx + 1 | 0);
                          elem.removeChild(secondChild$1);
                          Web_node.insertBefore(elem, secondChild$1, firstChild$1);
                          _newVNodes = newRest$1[1];
                          _oldVNodes = olderRest$1;
                          _idx = idx + 2 | 0;
                          continue ;
                        } else {
                          exit$6 = 4;
                        }
                      } else {
                        exit$6 = 4;
                      }
                      if (exit$6 === 4) {
                        if (olderKey$1 === newKey$1) {
                          var oldChild$2 = Caml_array.caml_array_get(elems, idx);
                          elem.removeChild(oldChild$2);
                          var oldVdom = match$6[2][0];
                          newCache[0] = oldVdom;
                          _newVNodes = newRest$1;
                          _oldVNodes = olderRest$1;
                          _idx = idx + 1 | 0;
                          continue ;
                        } else {
                          exit$5 = 3;
                        }
                      }
                      
                    } else {
                      exit$5 = 3;
                    }
                  } else {
                    exit$5 = 3;
                  }
                  if (exit$5 === 3) {
                    if (newRest$1) {
                      var match$8 = newRest$1[0];
                      if (match$8.tag === 3 && match$8[0] === oldKey$1) {
                        var oldChild$3 = Caml_array.caml_array_get(elems, idx);
                        var newVdom = Curry._1(newGen, /* () */0);
                        newCache[0] = newVdom;
                        var newChild$1 = patchVNodesOnElems_CreateElement(callbacks, newVdom);
                        Web_node.insertBefore(elem, newChild$1, oldChild$3);
                        _newVNodes = newRest$1;
                        _idx = idx + 1 | 0;
                        continue ;
                      } else {
                        exit$4 = 2;
                      }
                    } else {
                      exit$4 = 2;
                    }
                  }
                  if (exit$4 === 2) {
                    var oldVdom$1 = oldCache[0];
                    var newVdom$1 = Curry._1(newGen, /* () */0);
                    newCache[0] = newVdom$1;
                    _newVNodes = /* :: */[
                      newVdom$1,
                      newRest$1
                    ];
                    _oldVNodes = /* :: */[
                      oldVdom$1,
                      oldRest$1
                    ];
                    continue ;
                  }
                  
                }
              } else {
                exit = 1;
              }
            } else {
              exit = 1;
            }
            break;
        case 4 : 
            _oldVNodes = /* :: */[
              oldNode[1],
              oldVNodes[1]
            ];
            continue ;
        
      }
      if (exit === 1) {
        var oldRest$2 = oldVNodes[1];
        if (newVNodes) {
          var newNode$1 = newVNodes[0];
          if (newNode$1.tag === 4) {
            patchVNodesOnElems(Curry._1(newNode$1[0], callbacks), elem, elems, idx, /* :: */[
                  oldNode,
                  /* [] */0
                ], /* :: */[
                  newNode$1[1],
                  /* [] */0
                ]);
            _newVNodes = newVNodes[1];
            _oldVNodes = oldRest$2;
            _idx = idx + 1 | 0;
            continue ;
          } else {
            var oldChild$4 = Caml_array.caml_array_get(elems, idx);
            var newChild$2 = patchVNodesOnElems_CreateElement(callbacks, newNode$1);
            Web_node.insertBefore(elem, newChild$2, oldChild$4);
            elem.removeChild(oldChild$4);
            _newVNodes = newVNodes[1];
            _oldVNodes = oldRest$2;
            _idx = idx + 1 | 0;
            continue ;
          }
        } else {
          var child$1 = Caml_array.caml_array_get(elems, idx);
          elem.removeChild(child$1);
          _newVNodes = /* [] */0;
          _oldVNodes = oldRest$2;
          continue ;
        }
      }
      
    } else if (newVNodes) {
      var newChild$3 = patchVNodesOnElems_CreateElement(callbacks, newVNodes[0]);
      elem.appendChild(newChild$3);
      _newVNodes = newVNodes[1];
      _oldVNodes = /* [] */0;
      _idx = idx + 1 | 0;
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function patchVNodesIntoElement(callbacks, elem, oldVNodes, newVNodes) {
  var elems = elem.childNodes;
  patchVNodesOnElems(callbacks, elem, elems, 0, oldVNodes, newVNodes);
  return newVNodes;
}

function patchVNodeIntoElement(callbacks, elem, oldVNode, newVNode) {
  return patchVNodesIntoElement(callbacks, elem, /* :: */[
              oldVNode,
              /* [] */0
            ], /* :: */[
              newVNode,
              /* [] */0
            ]);
}

function wrapCallbacks(func, callbacks) {
  return /* record */[/* contents : record */[/* enqueue */(function (msg) {
                return Curry._1(callbacks[0][/* enqueue */0], Curry._1(func, msg));
              })]];
}

function map(func, vdom) {
  var tagger = function (callbacks) {
    return /* record */[/* contents : record */[/* enqueue */(function (msg) {
                  return Curry._1(callbacks[0][/* enqueue */0], Curry._1(func, msg));
                })]];
  };
  return /* Tagger */Block.__(4, [
            tagger,
            vdom
          ]);
}

var noProp = /* NoProp */0;

exports.noNode = noNode;
exports.comment = comment;
exports.text = text;
exports.fullnode = fullnode;
exports.node = node;
exports.lazyGen = lazyGen;
exports.noProp = noProp;
exports.prop = prop;
exports.onCB = onCB;
exports.onMsg = onMsg;
exports.attribute = attribute;
exports.data = data;
exports.style = style;
exports.styles = styles;
exports.renderToHtmlString = renderToHtmlString;
exports.emptyEventHandler = emptyEventHandler;
exports.emptyEventCB = emptyEventCB;
exports.eventHandler = eventHandler;
exports.eventHandler_GetCB = eventHandler_GetCB;
exports.compareEventHandlerTypes = compareEventHandlerTypes;
exports.eventHandler_Register = eventHandler_Register;
exports.eventHandler_Unregister = eventHandler_Unregister;
exports.eventHandler_Mutate = eventHandler_Mutate;
exports.patchVNodesOnElems_PropertiesApply_Add = patchVNodesOnElems_PropertiesApply_Add;
exports.patchVNodesOnElems_PropertiesApply_Remove = patchVNodesOnElems_PropertiesApply_Remove;
exports.patchVNodesOnElems_PropertiesApply_RemoveAdd = patchVNodesOnElems_PropertiesApply_RemoveAdd;
exports.patchVNodesOnElems_PropertiesApply_Mutate = patchVNodesOnElems_PropertiesApply_Mutate;
exports.patchVNodesOnElems_PropertiesApply = patchVNodesOnElems_PropertiesApply;
exports.patchVNodesOnElems_Properties = patchVNodesOnElems_Properties;
exports.genEmptyProps = genEmptyProps;
exports.mapEmptyProps = mapEmptyProps;
exports.patchVNodesOnElems_ReplaceNode = patchVNodesOnElems_ReplaceNode;
exports.patchVNodesOnElems_CreateElement = patchVNodesOnElems_CreateElement;
exports.patchVNodesOnElems_MutateNode = patchVNodesOnElems_MutateNode;
exports.patchVNodesOnElems = patchVNodesOnElems;
exports.patchVNodesIntoElement = patchVNodesIntoElement;
exports.patchVNodeIntoElement = patchVNodeIntoElement;
exports.wrapCallbacks = wrapCallbacks;
exports.map = map;
/* No side effect */

},{"./web_document.js":15,"./web_node.js":18,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/caml_array.js":36,"bs-platform/lib/js/caml_builtin_exceptions.js":37,"bs-platform/lib/js/caml_obj.js":46,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/js_primitive.js":57,"bs-platform/lib/js/list.js":58,"bs-platform/lib/js/string.js":61}],14:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Web_node = require("./web_node.js");
var Web_window = require("./web_window.js");

function polyfills(param) {
  Web_node.remove_polyfill(/* () */0);
  Web_window.requestAnimationFrame_polyfill(/* () */0);
  return /* () */0;
}

var Event = 0;

var Node = 0;

var Document = 0;

var $$Date = 0;

var Window = 0;

var Location = 0;

var Json = 0;

var $$XMLHttpRequest = 0;

var FormData = 0;

exports.Event = Event;
exports.Node = Node;
exports.Document = Document;
exports.$$Date = $$Date;
exports.Window = Window;
exports.Location = Location;
exports.Json = Json;
exports.$$XMLHttpRequest = $$XMLHttpRequest;
exports.FormData = FormData;
exports.polyfills = polyfills;
/* No side effect */

},{"./web_node.js":18,"./web_window.js":19}],15:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';


function body(param) {
  return document.body;
}

function createElement(typ) {
  return document.createElement(typ);
}

function createElementNS(namespace, key) {
  return document.createElementNS(namespace, key);
}

function createComment(text) {
  return document.createComment(text);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function getElementById(id) {
  return document.getElementById(id);
}

function createElementNsOptional(namespace, tagName) {
  if (namespace === "") {
    return document.createElement(tagName);
  } else {
    return document.createElementNS(namespace, tagName);
  }
}

function $$location(param) {
  return document.location;
}

exports.body = body;
exports.createElement = createElement;
exports.createElementNS = createElementNS;
exports.createComment = createComment;
exports.createTextNode = createTextNode;
exports.getElementById = getElementById;
exports.createElementNsOptional = createElementNsOptional;
exports.$$location = $$location;
/* No side effect */

},{}],16:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';


function append(key, value, f) {
  return f.append(key, value);
}

exports.append = append;
/* No side effect */

},{}],17:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Js_json = require("bs-platform/lib/js/js_json.js");

function string_of_json($staropt$star, value) {
  var indent = $staropt$star !== undefined ? $staropt$star : 2;
  if (value !== undefined) {
    try {
      return JSON.stringify(value, null, indent);
    }
    catch (exn){
      return "";
    }
  } else {
    return "undefined";
  }
}

function of_type(_v, x) {
  return x;
}

var classify = Js_json.classify;

var test = Js_json.test;

var decodeString = Js_json.decodeString;

var decodeNumber = Js_json.decodeNumber;

var decodeObject = Js_json.decodeObject;

var decodeArray = Js_json.decodeArray;

var decodeBoolean = Js_json.decodeBoolean;

var decodeNull = Js_json.decodeNull;

var $$null = null;

exports.classify = classify;
exports.test = test;
exports.decodeString = decodeString;
exports.decodeNumber = decodeNumber;
exports.decodeObject = decodeObject;
exports.decodeArray = decodeArray;
exports.decodeBoolean = decodeBoolean;
exports.decodeNull = decodeNull;
exports.string_of_json = string_of_json;
exports.of_type = of_type;
exports.$$null = $$null;
/* No side effect */

},{"bs-platform/lib/js/js_json.js":56}],18:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';


function style(n) {
  return n.style;
}

function getStyle(n, key) {
  return n.style[key];
}

function setStyle(n, key, value) {
  n.style[key] = value;
  return /* () */0;
}

function setStyleProperty(n, $staropt$star, key, value) {
  var priority = $staropt$star !== undefined ? $staropt$star : false;
  var style = n.style;
  var match = style.setProperty;
  if (match !== undefined) {
    return style.setProperty(key, value, priority ? "important" : null);
  } else {
    return setStyle(n, key, value);
  }
}

function childNodes(n) {
  return n.childNodes;
}

function firstChild(n) {
  return n.firstChild;
}

function appendChild(n, child) {
  return n.appendChild(child);
}

function removeChild(n, child) {
  return n.removeChild(child);
}

function insertBefore(n, child, refNode) {
  return n.insertBefore(child, refNode);
}

function remove(n, child) {
  return n.remove(child);
}

function setAttributeNS(n, namespace, key, value) {
  return n.setAttributeNS(namespace, key, value);
}

function setAttribute(n, key, value) {
  return n.setAttribute(key, value);
}

function setAttributeNsOptional(n, namespace, key, value) {
  if (namespace === "") {
    return n.setAttribute(key, value);
  } else {
    return n.setAttributeNS(namespace, key, value);
  }
}

function removeAttributeNS(n, namespace, key) {
  return n.removeAttributeNS(namespace, key);
}

function removeAttribute(n, key) {
  return n.removeAttribute(key);
}

function removeAttributeNsOptional(n, namespace, key) {
  if (namespace === "") {
    return n.removeAttribute(key);
  } else {
    return n.removeAttributeNS(namespace, key);
  }
}

function addEventListener(n, typ, listener, options) {
  return n.addEventListener(typ, listener, options);
}

function removeEventListener(n, typ, listener, options) {
  return n.removeEventListener(typ, listener, options);
}

function focus(n) {
  return n.focus();
}

function set_nodeValue(n, text) {
  n.nodeValue = text;
  return /* () */0;
}

function get_nodeValue(n) {
  return n.nodeValue;
}

function remove_polyfill(param) {
  return (
  // remove polyfill
  (function() {
    if (!('remove' in Element.prototype)) {
      Element.prototype.remove = function() {
        if (this.parentNode) {
          this.parentNode.removeChild(this);
        }
      };
    };
  }())
  );
}

exports.style = style;
exports.getStyle = getStyle;
exports.setStyle = setStyle;
exports.setStyleProperty = setStyleProperty;
exports.childNodes = childNodes;
exports.firstChild = firstChild;
exports.appendChild = appendChild;
exports.removeChild = removeChild;
exports.insertBefore = insertBefore;
exports.remove = remove;
exports.setAttributeNS = setAttributeNS;
exports.setAttribute = setAttribute;
exports.setAttributeNsOptional = setAttributeNsOptional;
exports.removeAttributeNS = removeAttributeNS;
exports.removeAttribute = removeAttribute;
exports.removeAttributeNsOptional = removeAttributeNsOptional;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;
exports.focus = focus;
exports.set_nodeValue = set_nodeValue;
exports.get_nodeValue = get_nodeValue;
exports.remove_polyfill = remove_polyfill;
/* No side effect */

},{}],19:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';


function history(param) {
  return window.history;
}

function localStorage(param) {
  return window.localStorage;
}

function $$location(param) {
  return window.location;
}

function requestAnimationFrame(callback) {
  return window.requestAnimationFrame(callback);
}

function cancelAnimationFrame(id) {
  return window.cancelAnimationFrame(id);
}

function $$clearTimeout(id) {
  return window.clearTimeout(id);
}

function $$setInterval(cb, msTime) {
  return window.setInterval(cb, msTime);
}

function $$setTimeout(cb, msTime) {
  return window.setTimeout(cb, msTime);
}

function addEventListener(typ, listener, options) {
  return window.addEventListener(typ, listener, options);
}

function removeEventListener(typ, listener, options) {
  return window.removeEventListener(typ, listener, options);
}

function requestAnimationFrame_polyfill(param) {
  return (
  // requestAnimationFrame polyfill
  (function() {
      var lastTime = 0;
      var vendors = ['ms', 'moz', 'webkit', 'o'];
      for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
          window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
          window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
                                     || window[vendors[x]+'CancelRequestAnimationFrame'];
      }

      if (!window.requestAnimationFrame)
          window.requestAnimationFrame = function(callback, element) {
              var currTime = new Date().getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window.setTimeout(function() { callback(currTime + timeToCall); },
                timeToCall);
              lastTime = currTime + timeToCall;
              return id;
          };

      if (!window.cancelAnimationFrame)
          window.cancelAnimationFrame = function(id) {
              clearTimeout(id);
          };
  }())
  );
}

var History = 0;

var LocalStorage = 0;

exports.History = History;
exports.LocalStorage = LocalStorage;
exports.history = history;
exports.localStorage = localStorage;
exports.$$location = $$location;
exports.requestAnimationFrame = requestAnimationFrame;
exports.cancelAnimationFrame = cancelAnimationFrame;
exports.$$clearTimeout = $$clearTimeout;
exports.$$setInterval = $$setInterval;
exports.$$setTimeout = $$setTimeout;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;
exports.requestAnimationFrame_polyfill = requestAnimationFrame_polyfill;
/* No side effect */

},{}],20:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function length($$window) {
  var match = $$window.localStorage;
  if (match !== undefined) {
    return Js_primitive.some(match.length);
  }
  
}

function clear($$window) {
  var match = $$window.localStorage;
  if (match !== undefined) {
    return Js_primitive.some(match.clear());
  }
  
}

function key($$window, idx) {
  var match = $$window.localStorage;
  if (match !== undefined) {
    return Js_primitive.some(match.key(idx));
  }
  
}

function getItem($$window, key) {
  var match = $$window.localStorage;
  if (match !== undefined) {
    try {
      return Js_primitive.some(match.getItem(key));
    }
    catch (exn){
      return undefined;
    }
  }
  
}

function removeItem($$window, key) {
  var match = $$window.localStorage;
  if (match !== undefined) {
    return Js_primitive.some(match.removeItem(key));
  }
  
}

function setItem($$window, key, value) {
  var match = $$window.localStorage;
  if (match !== undefined) {
    return Js_primitive.some(match.setItem(key, value));
  }
  
}

exports.length = length;
exports.clear = clear;
exports.key = key;
exports.getItem = getItem;
exports.removeItem = removeItem;
exports.setItem = setItem;
/* No side effect */

},{"bs-platform/lib/js/js_primitive.js":57}],21:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Web_formdata = require("./web_formdata.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function abort(x) {
  return x.abort();
}

function getAllResponseHeaders(x) {
  var match = x.getAllResponseHeaders();
  if (match !== null) {
    if (match === "") {
      return /* Error */Block.__(1, [/* NetworkError */1]);
    } else {
      return /* Ok */Block.__(0, [match]);
    }
  } else {
    return /* Error */Block.__(1, [/* IncompleteResponse */0]);
  }
}

function getAllResponseHeadersAsList(x) {
  var err = getAllResponseHeaders(x);
  if (err.tag) {
    return err;
  } else {
    return /* Ok */Block.__(0, [List.map((function (param) {
                      if (param.length !== 2) {
                        throw [
                              Caml_builtin_exceptions.failure,
                              "Cannot happen, already checked length"
                            ];
                      } else {
                        var key = param[0];
                        var value = param[1];
                        return /* tuple */[
                                key,
                                value
                              ];
                      }
                    }), List.filter((function (a) {
                            return a.length === 2;
                          }))($$Array.to_list($$Array.map((function (param) {
                                  return param.split(": ", 2);
                                }), err[0].split("\r\n")))))]);
  }
}

function getAllResponseHeadersAsDict(x) {
  var height = function (param) {
    if (param) {
      return param[4];
    } else {
      return 0;
    }
  };
  var create = function (l, x, d, r) {
    var hl = height(l);
    var hr = height(r);
    return /* Node */[
            l,
            x,
            d,
            r,
            hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          ];
  };
  var singleton = function (x, d) {
    return /* Node */[
            /* Empty */0,
            x,
            d,
            /* Empty */0,
            1
          ];
  };
  var bal = function (l, x, d, r) {
    var hl = l ? l[4] : 0;
    var hr = r ? r[4] : 0;
    if (hl > (hr + 2 | 0)) {
      if (l) {
        var lr = l[3];
        var ld = l[2];
        var lv = l[1];
        var ll = l[0];
        if (height(ll) >= height(lr)) {
          return create(ll, lv, ld, create(lr, x, d, r));
        } else if (lr) {
          return create(create(ll, lv, ld, lr[0]), lr[1], lr[2], create(lr[3], x, d, r));
        } else {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else if (hr > (hl + 2 | 0)) {
      if (r) {
        var rr = r[3];
        var rd = r[2];
        var rv = r[1];
        var rl = r[0];
        if (height(rr) >= height(rl)) {
          return create(create(l, x, d, rl), rv, rd, rr);
        } else if (rl) {
          return create(create(l, x, d, rl[0]), rl[1], rl[2], create(rl[3], rv, rd, rr));
        } else {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else {
      return /* Node */[
              l,
              x,
              d,
              r,
              hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            ];
    }
  };
  var add = function (x, data, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        return /* Node */[
                l,
                x,
                data,
                r,
                param[4]
              ];
      } else if (c < 0) {
        return bal(add(x, data, l), v, d, r);
      } else {
        return bal(l, v, d, add(x, data, r));
      }
    } else {
      return /* Node */[
              /* Empty */0,
              x,
              data,
              /* Empty */0,
              1
            ];
    }
  };
  var min_binding = function (_param) {
    while(true) {
      var param = _param;
      if (param) {
        var l = param[0];
        if (l) {
          _param = l;
          continue ;
        } else {
          return /* tuple */[
                  param[1],
                  param[2]
                ];
        }
      } else {
        throw Caml_builtin_exceptions.not_found;
      }
    };
  };
  var remove_min_binding = function (param) {
    if (param) {
      var l = param[0];
      if (l) {
        return bal(remove_min_binding(l), param[1], param[2], param[3]);
      } else {
        return param[3];
      }
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "Map.remove_min_elt"
          ];
    }
  };
  var remove = function (x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        var t1 = l;
        var t2 = r;
        if (t1) {
          if (t2) {
            var match = min_binding(t2);
            return bal(t1, match[0], match[1], remove_min_binding(t2));
          } else {
            return t1;
          }
        } else {
          return t2;
        }
      } else if (c < 0) {
        return bal(remove(x, l), v, d, r);
      } else {
        return bal(l, v, d, remove(x, r));
      }
    } else {
      return /* Empty */0;
    }
  };
  var iter = function (f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        iter(f, param[0]);
        Curry._2(f, param[1], param[2]);
        _param = param[3];
        continue ;
      } else {
        return /* () */0;
      }
    };
  };
  var map = function (f, param) {
    if (param) {
      var l$prime = map(f, param[0]);
      var d$prime = Curry._1(f, param[2]);
      var r$prime = map(f, param[3]);
      return /* Node */[
              l$prime,
              param[1],
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  };
  var mapi = function (f, param) {
    if (param) {
      var v = param[1];
      var l$prime = mapi(f, param[0]);
      var d$prime = Curry._2(f, v, param[2]);
      var r$prime = mapi(f, param[3]);
      return /* Node */[
              l$prime,
              v,
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  };
  var fold = function (f, _m, _accu) {
    while(true) {
      var accu = _accu;
      var m = _m;
      if (m) {
        _accu = Curry._3(f, m[1], m[2], fold(f, m[0], accu));
        _m = m[3];
        continue ;
      } else {
        return accu;
      }
    };
  };
  var for_all = function (p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (Curry._2(p, param[1], param[2]) && for_all(p, param[0])) {
          _param = param[3];
          continue ;
        } else {
          return false;
        }
      } else {
        return true;
      }
    };
  };
  var exists = function (p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (Curry._2(p, param[1], param[2]) || exists(p, param[0])) {
          return true;
        } else {
          _param = param[3];
          continue ;
        }
      } else {
        return false;
      }
    };
  };
  var add_min_binding = function (k, v, param) {
    if (param) {
      return bal(add_min_binding(k, v, param[0]), param[1], param[2], param[3]);
    } else {
      return singleton(k, v);
    }
  };
  var add_max_binding = function (k, v, param) {
    if (param) {
      return bal(param[0], param[1], param[2], add_max_binding(k, v, param[3]));
    } else {
      return singleton(k, v);
    }
  };
  var join = function (l, v, d, r) {
    if (l) {
      if (r) {
        var rh = r[4];
        var lh = l[4];
        if (lh > (rh + 2 | 0)) {
          return bal(l[0], l[1], l[2], join(l[3], v, d, r));
        } else if (rh > (lh + 2 | 0)) {
          return bal(join(l, v, d, r[0]), r[1], r[2], r[3]);
        } else {
          return create(l, v, d, r);
        }
      } else {
        return add_max_binding(v, d, l);
      }
    } else {
      return add_min_binding(v, d, r);
    }
  };
  var concat = function (t1, t2) {
    if (t1) {
      if (t2) {
        var match = min_binding(t2);
        return join(t1, match[0], match[1], remove_min_binding(t2));
      } else {
        return t1;
      }
    } else {
      return t2;
    }
  };
  var concat_or_join = function (t1, v, d, t2) {
    if (d !== undefined) {
      return join(t1, v, Js_primitive.valFromOption(d), t2);
    } else {
      return concat(t1, t2);
    }
  };
  var split = function (x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        return /* tuple */[
                l,
                Js_primitive.some(d),
                r
              ];
      } else if (c < 0) {
        var match = split(x, l);
        return /* tuple */[
                match[0],
                match[1],
                join(match[2], v, d, r)
              ];
      } else {
        var match$1 = split(x, r);
        return /* tuple */[
                join(l, v, d, match$1[0]),
                match$1[1],
                match$1[2]
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              undefined,
              /* Empty */0
            ];
    }
  };
  var merge = function (f, s1, s2) {
    var exit = 0;
    if (s1) {
      var v1 = s1[1];
      if (s1[4] >= height(s2)) {
        var match = split(v1, s2);
        return concat_or_join(merge(f, s1[0], match[0]), v1, Curry._3(f, v1, Js_primitive.some(s1[2]), match[1]), merge(f, s1[3], match[2]));
      } else {
        exit = 1;
      }
    } else if (s2) {
      exit = 1;
    } else {
      return /* Empty */0;
    }
    if (exit === 1) {
      if (s2) {
        var v2 = s2[1];
        var match$1 = split(v2, s1);
        return concat_or_join(merge(f, match$1[0], s2[0]), v2, Curry._3(f, v2, match$1[1], Js_primitive.some(s2[2])), merge(f, match$1[2], s2[3]));
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "map.ml",
                270,
                10
              ]
            ];
      }
    }
    
  };
  var filter = function (p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var l$prime = filter(p, param[0]);
      var pvd = Curry._2(p, v, d);
      var r$prime = filter(p, param[3]);
      if (pvd) {
        return join(l$prime, v, d, r$prime);
      } else {
        return concat(l$prime, r$prime);
      }
    } else {
      return /* Empty */0;
    }
  };
  var partition = function (p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var match = partition(p, param[0]);
      var lf = match[1];
      var lt = match[0];
      var pvd = Curry._2(p, v, d);
      var match$1 = partition(p, param[3]);
      var rf = match$1[1];
      var rt = match$1[0];
      if (pvd) {
        return /* tuple */[
                join(lt, v, d, rt),
                concat(lf, rf)
              ];
      } else {
        return /* tuple */[
                concat(lt, rt),
                join(lf, v, d, rf)
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              /* Empty */0
            ];
    }
  };
  var cardinal = function (param) {
    if (param) {
      return (cardinal(param[0]) + 1 | 0) + cardinal(param[3]) | 0;
    } else {
      return 0;
    }
  };
  var bindings_aux = function (_accu, _param) {
    while(true) {
      var param = _param;
      var accu = _accu;
      if (param) {
        _param = param[0];
        _accu = /* :: */[
          /* tuple */[
            param[1],
            param[2]
          ],
          bindings_aux(accu, param[3])
        ];
        continue ;
      } else {
        return accu;
      }
    };
  };
  var err = getAllResponseHeadersAsList(x);
  if (err.tag) {
    return err;
  } else {
    var insert = function (d, param) {
      return add(param[0], param[1], d);
    };
    return /* Ok */Block.__(0, [List.fold_left(insert, /* Empty */0, err[0])]);
  }
}

function getResponseHeader(key, x) {
  return Js_primitive.null_to_opt(x.getResponse(key));
}

function open_(method$prime, url, $staropt$star, $staropt$star$1, $staropt$star$2, x) {
  var async = $staropt$star !== undefined ? $staropt$star : true;
  var user = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  var password = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
  return x.open(method$prime, url, async, user, password);
}

function overrideMimeType(mimetype, x) {
  return x.overrideMimeType(mimetype);
}

function send(body, x) {
  if (typeof body === "number") {
    if (body === 0) {
      return x.send();
    } else {
      return x.send(null);
    }
  } else {
    switch (body.tag | 0) {
      case 0 : 
          return x.send(body[0]);
      case 1 : 
          return x.send(body[0]);
      case 2 : 
          var form = List.fold_left((function (f, param) {
                  Web_formdata.append(param[0], param[1], f);
                  return f;
                }), new FormData(), body[0]);
          return x.send(form);
      case 3 : 
          return x.send(body[0]);
      
    }
  }
}

function setRequestHeader(header, value, x) {
  return x.setRequestHeader(header, value);
}

function set_onreadystatechange(cb, x) {
  x.onreadystatechange = cb;
  return /* () */0;
}

function get_onreadystatechange(x) {
  return x.onreadystatechange;
}

function readyState(x) {
  var i = x.readyState;
  if (i > 4 || i < 0) {
    var s = "Invalid return from 'readystate' of: " + String(i);
    throw [
          Caml_builtin_exceptions.failure,
          s
        ];
  } else {
    return i;
  }
}

function set_responseType(typ, x) {
  if (typeof typ === "number") {
    switch (typ) {
      case 0 : 
          x.responseType = "";
          return /* () */0;
      case 1 : 
          x.responseType = "arraybuffer";
          return /* () */0;
      case 2 : 
          x.responseType = "blob";
          return /* () */0;
      case 3 : 
          x.responseType = "document";
          return /* () */0;
      case 4 : 
          x.responseType = "json";
          return /* () */0;
      case 5 : 
          x.responseType = "text";
          return /* () */0;
      
    }
  } else {
    x.responseType = typ[0];
    return /* () */0;
  }
}

function get_responseType(x) {
  var s = x.responseType;
  switch (s) {
    case "" : 
        return /* StringResponseType */0;
    case "arraybuffer" : 
        return /* ArrayBufferResponseType */1;
    case "blob" : 
        return /* BlobResponseType */2;
    case "document" : 
        return /* DocumentResponseType */3;
    case "json" : 
        return /* JsonResponseType */4;
    case "text" : 
        return /* TextResponseType */5;
    default:
      return /* RawResponseType */[s];
  }
}

function get_response(x) {
  var match = x.response;
  if (match !== null) {
    var match$1 = get_responseType(x);
    if (typeof match$1 === "number") {
      switch (match$1) {
        case 0 : 
            return /* StringResponse */Block.__(0, [match]);
        case 1 : 
            return /* ArrayBufferResponse */Block.__(1, [match]);
        case 2 : 
            return /* BlobResponse */Block.__(2, [match]);
        case 3 : 
            return /* DocumentResponse */Block.__(3, [match]);
        case 4 : 
            return /* JsonResponse */Block.__(4, [match]);
        case 5 : 
            return /* TextResponse */Block.__(5, [match]);
        
      }
    } else {
      return /* RawResponse */Block.__(6, [
                match$1[0],
                match
              ]);
    }
  } else {
    return /* NoResponse */0;
  }
}

function get_responseText(x) {
  return x.responseText;
}

function get_responseURL(x) {
  return x.responseURL;
}

function get_responseXML(x) {
  return Js_primitive.null_to_opt(x.responseXML);
}

function get_status(x) {
  return x.status;
}

function get_statusText(x) {
  return x.statusText;
}

function set_timeout(t, x) {
  x.timeout = t;
  return /* () */0;
}

function get_timeout(x) {
  return x.timeout;
}

function set_withCredentials(b, x) {
  x.withCredentials = b;
  return /* () */0;
}

function get_withCredentials(x) {
  return x.withCredentials;
}

function set_onabort(cb, x) {
  x.onabort = cb;
  return /* () */0;
}

function get_onabort(x) {
  return x.onabort;
}

function set_onerror(cb, x) {
  x.onerror = cb;
  return /* () */0;
}

function get_onerror(x) {
  return x.onerror;
}

function set_onload(cb, x) {
  x.onload = cb;
  return /* () */0;
}

function get_onload(x) {
  return x.onload;
}

function set_onloadstart(cb, x) {
  x.onloadstart = cb;
  return /* () */0;
}

function get_onloadstart(x) {
  return x.onloadstart;
}

function set_onprogress(cb, x) {
  x.onprogress = cb;
  return /* () */0;
}

function get_onprogress(x) {
  return x.onprogress;
}

function set_ontimeout(cb, x) {
  x.ontimeout = cb;
  return /* () */0;
}

function get_ontimeout(x) {
  return x.ontimeout;
}

function set_onloadend(cb, x) {
  x.onloadend = cb;
  return /* () */0;
}

function get_onloadend(x) {
  return x.onloadend;
}

exports.abort = abort;
exports.getAllResponseHeaders = getAllResponseHeaders;
exports.getAllResponseHeadersAsList = getAllResponseHeadersAsList;
exports.getAllResponseHeadersAsDict = getAllResponseHeadersAsDict;
exports.getResponseHeader = getResponseHeader;
exports.open_ = open_;
exports.overrideMimeType = overrideMimeType;
exports.send = send;
exports.setRequestHeader = setRequestHeader;
exports.set_onreadystatechange = set_onreadystatechange;
exports.get_onreadystatechange = get_onreadystatechange;
exports.readyState = readyState;
exports.set_responseType = set_responseType;
exports.get_responseType = get_responseType;
exports.get_response = get_response;
exports.get_responseText = get_responseText;
exports.get_responseURL = get_responseURL;
exports.get_responseXML = get_responseXML;
exports.get_status = get_status;
exports.get_statusText = get_statusText;
exports.set_timeout = set_timeout;
exports.get_timeout = get_timeout;
exports.set_withCredentials = set_withCredentials;
exports.get_withCredentials = get_withCredentials;
exports.set_onabort = set_onabort;
exports.get_onabort = get_onabort;
exports.set_onerror = set_onerror;
exports.get_onerror = get_onerror;
exports.set_onload = set_onload;
exports.get_onload = get_onload;
exports.set_onloadstart = set_onloadstart;
exports.get_onloadstart = get_onloadstart;
exports.set_onprogress = set_onprogress;
exports.get_onprogress = get_onprogress;
exports.set_ontimeout = set_ontimeout;
exports.get_ontimeout = get_ontimeout;
exports.set_onloadend = set_onloadend;
exports.get_onloadend = get_onloadend;
/* No side effect */

},{"./web_formdata.js":16,"bs-platform/lib/js/array.js":32,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/caml_builtin_exceptions.js":37,"bs-platform/lib/js/caml_primitive.js":47,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/js_primitive.js":57,"bs-platform/lib/js/list.js":58}],22:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Test_client_drag = require("./test_client_drag.js");
var Test_client_counter = require("./test_client_counter.js");
var Test_client_http_task = require("./test_client_http_task.js");
var Test_client_btn_update_span = require("./test_client_btn_update_span.js");
var Test_client_on_with_options = require("./test_client_on_with_options.js");
var Test_client_attribute_removal = require("./test_client_attribute_removal.js");
var Test_client_counter_debug_program = require("./test_client_counter_debug_program.js");
var Test_client_counter_debug_beginner = require("./test_client_counter_debug_beginner.js");
var Test_client_counter_debug_standard = require("./test_client_counter_debug_standard.js");

var counter = Test_client_counter.main;

var counter_debug_beginner = Test_client_counter_debug_beginner.main;

var counter_debug_standard = Test_client_counter_debug_standard.main;

var counter_debug_program = Test_client_counter_debug_program.main;

var btn_update_span = Test_client_btn_update_span.main;

var attribute_removal = Test_client_attribute_removal.main;

var drag = Test_client_drag.main;

var on_with_options = Test_client_on_with_options.main;

var http_task = Test_client_http_task.main;

exports.counter = counter;
exports.counter_debug_beginner = counter_debug_beginner;
exports.counter_debug_standard = counter_debug_standard;
exports.counter_debug_program = counter_debug_program;
exports.btn_update_span = btn_update_span;
exports.attribute_removal = attribute_removal;
exports.drag = drag;
exports.on_with_options = on_with_options;
exports.http_task = http_task;
/* Test_client_drag Not a pure module */

},{"./test_client_attribute_removal.js":23,"./test_client_btn_update_span.js":24,"./test_client_counter.js":25,"./test_client_counter_debug_beginner.js":26,"./test_client_counter_debug_program.js":27,"./test_client_counter_debug_standard.js":28,"./test_client_drag.js":29,"./test_client_http_task.js":30,"./test_client_on_with_options.js":31}],23:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Vdom = require("../src-ocaml/vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Tea_app = require("../src-ocaml/tea_app.js");
var Tea_html = require("../src-ocaml/tea_html.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function select(param_0) {
  return /* Select */[param_0];
}

function render_selected(param) {
  if (param !== undefined) {
    return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
                /* Text */Block.__(1, ["you selected " + param]),
                /* :: */[
                  Tea_html.div(undefined, undefined, /* :: */[
                        Vdom.onMsg("click", /* Delete */0),
                        /* [] */0
                      ], /* :: */[
                        /* Text */Block.__(1, ["delete selection"]),
                        /* [] */0
                      ]),
                  /* [] */0
                ]
              ]);
  } else {
    return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
                /* Text */Block.__(1, ["Nothing selected"]),
                /* [] */0
              ]);
  }
}

function lang(l, is_selected) {
  var msg = /* Select */[l];
  return Tea_html.li(undefined, undefined, /* :: */[
              Vdom.onMsg("click", msg),
              /* :: */[
                Vdom.style("color", "blue"),
                /* :: */[
                  is_selected ? Vdom.style("border", "1px solid black") : Tea_html.noProp,
                  /* :: */[
                    is_selected ? /* Attribute */Block.__(1, [
                          "",
                          "lang",
                          l
                        ]) : Tea_html.noProp,
                    /* [] */0
                  ]
                ]
              ]
            ], /* :: */[
              /* Text */Block.__(1, [l]),
              /* [] */0
            ]);
}

function render_languages(selected, languages) {
  var is_selected = function (selected, language) {
    if (selected !== undefined) {
      return language === Js_primitive.valFromOption(selected);
    } else {
      return false;
    }
  };
  var rendered = List.map((function (l) {
          return lang(l, is_selected(selected, l));
        }), languages);
  return Tea_html.ul(undefined, undefined, /* [] */0, rendered);
}

function update(state, param) {
  if (param) {
    return /* record */[
            /* selected */param[0],
            /* languages */state[/* languages */1]
          ];
  } else {
    return /* record */[
            /* selected */undefined,
            /* languages */state[/* languages */1]
          ];
  }
}

function view(state) {
  return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
              render_selected(state[/* selected */0]),
              /* :: */[
                render_languages(state[/* selected */0], state[/* languages */1]),
                /* [] */0
              ]
            ]);
}

var partial_arg_000 = /* model : record */[
  /* selected */"Erlang",
  /* languages : :: */[
    "Erlang",
    /* :: */[
      "Ocaml",
      /* :: */[
        "Clojure",
        /* [] */0
      ]
    ]
  ]
];

var partial_arg = /* record */[
  partial_arg_000,
  /* update */update,
  /* view */view
];

function main(param, param$1) {
  return Tea_app.beginnerProgram(partial_arg, param, param$1);
}

var $$delete = /* Delete */0;

exports.select = select;
exports.$$delete = $$delete;
exports.render_selected = render_selected;
exports.lang = lang;
exports.render_languages = render_languages;
exports.update = update;
exports.view = view;
exports.main = main;
/* Tea_html Not a pure module */

},{"../src-ocaml/tea_app.js":1,"../src-ocaml/tea_html.js":5,"../src-ocaml/vdom.js":13,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/js_primitive.js":57,"bs-platform/lib/js/list.js":58}],24:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Vdom = require("../src-ocaml/vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Tea_app = require("../src-ocaml/tea_app.js");
var Tea_html = require("../src-ocaml/tea_html.js");

function update$prime(model, param) {
  return /* tuple */[
          model[0],
          "right"
        ];
}

function render_model(param) {
  var exit = 0;
  if (param[0] !== undefined && param[1] !== undefined) {
    return Tea_html.input$prime(undefined, undefined, /* :: */[
                /* RawProp */Block.__(0, [
                    "value",
                    "This should be on screen"
                  ]),
                /* [] */0
              ], /* [] */0);
  } else {
    exit = 1;
  }
  if (exit === 1) {
    return Tea_html.span(undefined, undefined, /* [] */0, /* :: */[
                /* Text */Block.__(1, ["nothing"]),
                /* [] */0
              ]);
  }
  
}

function view$prime(model) {
  return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
              Tea_html.button(undefined, undefined, /* :: */[
                    Vdom.onMsg("click", /* Trigger */0),
                    /* [] */0
                  ], /* :: */[
                    /* Text */Block.__(1, ["trigger rerender"]),
                    /* [] */0
                  ]),
              /* :: */[
                render_model(model),
                /* [] */0
              ]
            ]);
}

var partial_arg_000 = /* model : tuple */[
  "left",
  undefined
];

var partial_arg = /* record */[
  partial_arg_000,
  /* update */update$prime,
  /* view */view$prime
];

function main(param, param$1) {
  return Tea_app.beginnerProgram(partial_arg, param, param$1);
}

var trigger = /* Trigger */0;

exports.trigger = trigger;
exports.update$prime = update$prime;
exports.render_model = render_model;
exports.view$prime = view$prime;
exports.main = main;
/* Tea_html Not a pure module */

},{"../src-ocaml/tea_app.js":1,"../src-ocaml/tea_html.js":5,"../src-ocaml/vdom.js":13,"bs-platform/lib/js/block.js":33}],25:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Vdom = require("../src-ocaml/vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Tea_app = require("../src-ocaml/tea_app.js");
var Tea_html = require("../src-ocaml/tea_html.js");

function update(model, param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return model + 1 | 0;
      case 1 : 
          return model - 1 | 0;
      case 2 : 
          return 0;
      
    }
  } else {
    return param[0];
  }
}

function view_button(title, msg) {
  return Tea_html.button(undefined, undefined, /* :: */[
              Vdom.onMsg("click", msg),
              /* [] */0
            ], /* :: */[
              /* Text */Block.__(1, [title]),
              /* [] */0
            ]);
}

function view(model) {
  return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
              Tea_html.span(undefined, undefined, /* :: */[
                    Vdom.style("text-weight", "bold"),
                    /* [] */0
                  ], /* :: */[
                    /* Text */Block.__(1, [String(model)]),
                    /* [] */0
                  ]),
              /* :: */[
                Tea_html.br(/* [] */0),
                /* :: */[
                  view_button("Increment", model >= 3 ? /* Decrement */1 : /* Increment */0),
                  /* :: */[
                    Tea_html.br(/* [] */0),
                    /* :: */[
                      view_button("Decrement", /* Decrement */1),
                      /* :: */[
                        Tea_html.br(/* [] */0),
                        /* :: */[
                          view_button("Set to 42", /* Set */[42]),
                          /* :: */[
                            Tea_html.br(/* [] */0),
                            /* :: */[
                              model !== 0 ? view_button("Reset", /* Reset */2) : Tea_html.noNode,
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var partial_arg = /* record */[
  /* model */4,
  /* update */update,
  /* view */view
];

function main(param, param$1) {
  return Tea_app.beginnerProgram(partial_arg, param, param$1);
}

exports.update = update;
exports.view_button = view_button;
exports.view = view;
exports.main = main;
/* Tea_html Not a pure module */

},{"../src-ocaml/tea_app.js":1,"../src-ocaml/tea_html.js":5,"../src-ocaml/vdom.js":13,"bs-platform/lib/js/block.js":33}],26:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Vdom = require("../src-ocaml/vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Tea_html = require("../src-ocaml/tea_html.js");
var Tea_debug = require("../src-ocaml/tea_debug.js");

function string_of_msg(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return "Increment";
      case 1 : 
          return "Decrement";
      case 2 : 
          return "Reset";
      
    }
  } else {
    return "Set";
  }
}

function update(model, param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return model + 1 | 0;
      case 1 : 
          return model - 1 | 0;
      case 2 : 
          return 0;
      
    }
  } else {
    return param[0];
  }
}

function view_button(title, msg) {
  return Tea_html.button(undefined, undefined, /* :: */[
              Vdom.onMsg("click", msg),
              /* [] */0
            ], /* :: */[
              /* Text */Block.__(1, [title]),
              /* [] */0
            ]);
}

function view(model) {
  return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
              Tea_html.span(undefined, undefined, /* :: */[
                    Vdom.style("text-weight", "bold"),
                    /* [] */0
                  ], /* :: */[
                    /* Text */Block.__(1, [String(model)]),
                    /* [] */0
                  ]),
              /* :: */[
                Tea_html.br(/* [] */0),
                /* :: */[
                  view_button("Increment", model >= 3 ? /* Decrement */1 : /* Increment */0),
                  /* :: */[
                    Tea_html.br(/* [] */0),
                    /* :: */[
                      view_button("Decrement", /* Decrement */1),
                      /* :: */[
                        Tea_html.br(/* [] */0),
                        /* :: */[
                          view_button("Set to 42", /* Set */[42]),
                          /* :: */[
                            Tea_html.br(/* [] */0),
                            /* :: */[
                              model !== 0 ? view_button("Reset", /* Reset */2) : Tea_html.noNode,
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

var partial_arg = /* record */[
  /* model */4,
  /* update */update,
  /* view */view
];

function main(param, param$1) {
  return Tea_debug.beginnerProgram(partial_arg, string_of_msg, param, param$1);
}

exports.string_of_msg = string_of_msg;
exports.update = update;
exports.view_button = view_button;
exports.view = view;
exports.main = main;
/* Tea_html Not a pure module */

},{"../src-ocaml/tea_debug.js":3,"../src-ocaml/tea_html.js":5,"../src-ocaml/vdom.js":13,"bs-platform/lib/js/block.js":33}],27:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Vdom = require("../src-ocaml/vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Tea_html = require("../src-ocaml/tea_html.js");
var Tea_debug = require("../src-ocaml/tea_debug.js");

function string_of_msg(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return "Increment";
      case 1 : 
          return "Decrement";
      case 2 : 
          return "Reset";
      
    }
  } else {
    return "Set";
  }
}

function init(param) {
  return /* tuple */[
          4,
          /* NoCmd */0
        ];
}

function subscriptions(param) {
  return /* NoSub */0;
}

function update(model, param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return /* tuple */[
                  model + 1 | 0,
                  /* NoCmd */0
                ];
      case 1 : 
          return /* tuple */[
                  model - 1 | 0,
                  /* NoCmd */0
                ];
      case 2 : 
          return /* tuple */[
                  0,
                  /* NoCmd */0
                ];
      
    }
  } else {
    return /* tuple */[
            param[0],
            /* NoCmd */0
          ];
  }
}

function view_button(title, msg) {
  return Tea_html.button(undefined, undefined, /* :: */[
              Vdom.onMsg("click", msg),
              /* [] */0
            ], /* :: */[
              /* Text */Block.__(1, [title]),
              /* [] */0
            ]);
}

function view(model) {
  return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
              Tea_html.span(undefined, undefined, /* :: */[
                    Vdom.style("text-weight", "bold"),
                    /* [] */0
                  ], /* :: */[
                    /* Text */Block.__(1, [String(model)]),
                    /* [] */0
                  ]),
              /* :: */[
                Tea_html.br(/* [] */0),
                /* :: */[
                  view_button("Increment", model >= 3 ? /* Decrement */1 : /* Increment */0),
                  /* :: */[
                    Tea_html.br(/* [] */0),
                    /* :: */[
                      view_button("Decrement", /* Decrement */1),
                      /* :: */[
                        Tea_html.br(/* [] */0),
                        /* :: */[
                          view_button("Set to 42", /* Set */[42]),
                          /* :: */[
                            Tea_html.br(/* [] */0),
                            /* :: */[
                              model !== 0 ? view_button("Reset", /* Reset */2) : Tea_html.noNode,
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function renderCallback(param) {
  return /* () */0;
}

function partial_arg_005(_model) {
  return /* NoCmd */0;
}

var partial_arg = /* record */[
  /* init */init,
  /* update */update,
  /* view */view,
  /* renderCallback */renderCallback,
  /* subscriptions */subscriptions,
  partial_arg_005
];

function main(param, param$1) {
  return Tea_debug.program(partial_arg, string_of_msg, param, param$1);
}

exports.string_of_msg = string_of_msg;
exports.init = init;
exports.subscriptions = subscriptions;
exports.update = update;
exports.view_button = view_button;
exports.view = view;
exports.renderCallback = renderCallback;
exports.main = main;
/* Tea_html Not a pure module */

},{"../src-ocaml/tea_debug.js":3,"../src-ocaml/tea_html.js":5,"../src-ocaml/vdom.js":13,"bs-platform/lib/js/block.js":33}],28:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Vdom = require("../src-ocaml/vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Tea_html = require("../src-ocaml/tea_html.js");
var Tea_debug = require("../src-ocaml/tea_debug.js");

function string_of_msg(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return "Increment";
      case 1 : 
          return "Decrement";
      case 2 : 
          return "Reset";
      
    }
  } else {
    return "Set";
  }
}

function init(param) {
  return /* tuple */[
          4,
          /* NoCmd */0
        ];
}

function subscriptions(param) {
  return /* NoSub */0;
}

function update(model, param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return /* tuple */[
                  model + 1 | 0,
                  /* NoCmd */0
                ];
      case 1 : 
          return /* tuple */[
                  model - 1 | 0,
                  /* NoCmd */0
                ];
      case 2 : 
          return /* tuple */[
                  0,
                  /* NoCmd */0
                ];
      
    }
  } else {
    return /* tuple */[
            param[0],
            /* NoCmd */0
          ];
  }
}

function view_button(title, msg) {
  return Tea_html.button(undefined, undefined, /* :: */[
              Vdom.onMsg("click", msg),
              /* [] */0
            ], /* :: */[
              /* Text */Block.__(1, [title]),
              /* [] */0
            ]);
}

function view(model) {
  return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
              Tea_html.span(undefined, undefined, /* :: */[
                    Vdom.style("text-weight", "bold"),
                    /* [] */0
                  ], /* :: */[
                    /* Text */Block.__(1, [String(model)]),
                    /* [] */0
                  ]),
              /* :: */[
                Tea_html.br(/* [] */0),
                /* :: */[
                  view_button("Increment", model >= 3 ? /* Decrement */1 : /* Increment */0),
                  /* :: */[
                    Tea_html.br(/* [] */0),
                    /* :: */[
                      view_button("Decrement", /* Decrement */1),
                      /* :: */[
                        Tea_html.br(/* [] */0),
                        /* :: */[
                          view_button("Set to 42", /* Set */[42]),
                          /* :: */[
                            Tea_html.br(/* [] */0),
                            /* :: */[
                              model !== 0 ? view_button("Reset", /* Reset */2) : Tea_html.noNode,
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function renderCallback(param) {
  return /* () */0;
}

var partial_arg = /* record */[
  /* init */init,
  /* update */update,
  /* view */view,
  /* renderCallback */renderCallback,
  /* subscriptions */subscriptions
];

function main(param, param$1) {
  return Tea_debug.standardProgram(partial_arg, string_of_msg, param, param$1);
}

exports.string_of_msg = string_of_msg;
exports.init = init;
exports.subscriptions = subscriptions;
exports.update = update;
exports.view_button = view_button;
exports.view = view;
exports.renderCallback = renderCallback;
exports.main = main;
/* Tea_html Not a pure module */

},{"../src-ocaml/tea_debug.js":3,"../src-ocaml/tea_html.js":5,"../src-ocaml/vdom.js":13,"bs-platform/lib/js/block.js":33}],29:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Vdom = require("../src-ocaml/vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Tea_app = require("../src-ocaml/tea_app.js");
var Tea_html = require("../src-ocaml/tea_html.js");
var Tea_json = require("../src-ocaml/tea_json.js");
var Tea_mouse = require("../src-ocaml/tea_mouse.js");
var Tea_result = require("../src-ocaml/tea_result.js");

function dragStart(param_0) {
  return /* DragStart */Block.__(0, [param_0]);
}

function dragAt(param_0) {
  return /* DragAt */Block.__(1, [param_0]);
}

function dragEnd(param_0) {
  return /* DragEnd */Block.__(2, [param_0]);
}

function init(param) {
  return /* tuple */[
          /* record */[
            /* position : record */[
              /* x */200,
              /* y */200
            ],
            /* drag */undefined
          ],
          /* NoCmd */0
        ];
}

function getPosition(param) {
  var drag = param[/* drag */1];
  var position = param[/* position */0];
  if (drag !== undefined) {
    var match = drag;
    var current = match[/* current */1];
    var start = match[/* start */0];
    return /* record */[
            /* x */(position[/* x */0] + current[/* x */0] | 0) - start[/* x */0] | 0,
            /* y */(position[/* y */1] + current[/* y */1] | 0) - start[/* y */1] | 0
          ];
  } else {
    return position;
  }
}

function updateHelp(model, param) {
  var position = model[/* position */0];
  switch (param.tag | 0) {
    case 0 : 
        var xy = param[0];
        return /* record */[
                /* position */position,
                /* drag *//* record */[
                  /* start */xy,
                  /* current */xy
                ]
              ];
    case 1 : 
        var match = model[/* drag */1];
        return /* record */[
                /* position */position,
                /* drag */match !== undefined ? /* record */[
                    /* start */match[/* start */0],
                    /* current */param[0]
                  ] : undefined
              ];
    case 2 : 
        return /* record */[
                /* position */getPosition(model),
                /* drag */undefined
              ];
    
  }
}

function update(model, msg) {
  return /* tuple */[
          updateHelp(model, msg),
          /* NoCmd */0
        ];
}

function subscriptions(model) {
  var match = model[/* drag */1];
  if (match !== undefined) {
    return /* Batch */Block.__(0, [/* :: */[
                Tea_mouse.moves(undefined, dragAt),
                /* :: */[
                  Tea_mouse.ups(undefined, dragEnd),
                  /* [] */0
                ]
              ]]);
  } else {
    return /* NoSub */0;
  }
}

function px(number) {
  return String(number) + "px";
}

function cb(ev) {
  return Tea_result.result_to_option(Tea_json.Decoder[/* decodeEvent */31](Tea_json.Decoder[/* map */16](dragStart, Tea_mouse.position), ev));
}

var onMouseDown = Vdom.onCB("mousedown", "", cb);

function view(model) {
  var realPosition = getPosition(model);
  return Tea_html.div(undefined, undefined, /* :: */[
              onMouseDown,
              /* :: */[
                /* Style */Block.__(4, [/* :: */[
                      /* tuple */[
                        "background-color",
                        "#3C8D2F"
                      ],
                      /* :: */[
                        /* tuple */[
                          "cursor",
                          "move"
                        ],
                        /* :: */[
                          /* tuple */[
                            "width",
                            "100px"
                          ],
                          /* :: */[
                            /* tuple */[
                              "height",
                              "100px"
                            ],
                            /* :: */[
                              /* tuple */[
                                "border-radius",
                                "4px"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "position",
                                  "absolute"
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "left",
                                    String(realPosition[/* x */0]) + "px"
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "top",
                                      String(realPosition[/* y */1]) + "px"
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        "color",
                                        "white"
                                      ],
                                      /* :: */[
                                        /* tuple */[
                                          "display",
                                          "flex"
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            "align-items",
                                            "center"
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "justify-content",
                                              "center"
                                            ],
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]]),
                /* [] */0
              ]
            ], /* :: */[
              /* Text */Block.__(1, ["Drag Me!"]),
              /* [] */0
            ]);
}

function renderCallback(param) {
  return /* () */0;
}

var partial_arg = /* record */[
  /* init */init,
  /* update */update,
  /* view */view,
  /* renderCallback */renderCallback,
  /* subscriptions */subscriptions
];

function main(param, param$1) {
  return Tea_app.standardProgram(partial_arg, param, param$1);
}

exports.dragStart = dragStart;
exports.dragAt = dragAt;
exports.dragEnd = dragEnd;
exports.init = init;
exports.getPosition = getPosition;
exports.updateHelp = updateHelp;
exports.update = update;
exports.subscriptions = subscriptions;
exports.px = px;
exports.onMouseDown = onMouseDown;
exports.view = view;
exports.renderCallback = renderCallback;
exports.main = main;
/* onMouseDown Not a pure module */

},{"../src-ocaml/tea_app.js":1,"../src-ocaml/tea_html.js":5,"../src-ocaml/tea_json.js":8,"../src-ocaml/tea_mouse.js":9,"../src-ocaml/tea_result.js":10,"../src-ocaml/vdom.js":13,"bs-platform/lib/js/block.js":33}],30:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Vdom = require("../src-ocaml/vdom.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Tea_ex = require("../src-ocaml/tea_ex.js");
var Tea_html = require("../src-ocaml/tea_html.js");
var Tea_http = require("../src-ocaml/tea_http.js");
var Tea_task = require("../src-ocaml/tea_task.js");
var Tea_debug = require("../src-ocaml/tea_debug.js");

function gotResponse(param_0) {
  return /* GotResponse */[param_0];
}

function update(model, param) {
  if (param) {
    return /* tuple */[
            param[0][0],
            /* NoCmd */0
          ];
  } else {
    return /* tuple */[
            model,
            Tea_task.attempt(gotResponse, Tea_task.andThen((function (param) {
                        return /* Task */[(function (cb) {
                                    return Curry._1(cb, /* Ok */Block.__(0, ["both saved"]));
                                  })];
                      }), Tea_task.andThen((function (res) {
                            return Tea_ex.LocalStorage[/* setItem */7]("todo-2", res);
                          }), Tea_task.andThen((function (param) {
                                return Tea_task.mapError(Tea_http.string_of_error, Tea_http.toTask(Tea_http.getString("https://jsonplaceholder.typicode.com/todos/2")));
                              }), Tea_task.andThen((function (res) {
                                    return Tea_ex.LocalStorage[/* setItem */7]("todo-1", res);
                                  }), Tea_task.mapError(Tea_http.string_of_error, Tea_http.toTask(Tea_http.getString("https://jsonplaceholder.typicode.com/todos/1"))))))))
          ];
  }
}

function view(model) {
  return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
              Tea_html.button(undefined, undefined, /* :: */[
                    Vdom.onMsg("click", /* Req */0),
                    /* [] */0
                  ], /* :: */[
                    /* Text */Block.__(1, ["execute"]),
                    /* [] */0
                  ]),
              /* :: */[
                /* Text */Block.__(1, [model]),
                /* [] */0
              ]
            ]);
}

function som(param) {
  if (param) {
    if (param[0].tag) {
      return "GotResponse Error";
    } else {
      return "GotResponse Ok";
    }
  } else {
    return "Req";
  }
}

function renderCallback(param) {
  return /* () */0;
}

function partial_arg_000(param) {
  return /* tuple */[
          "nothing",
          /* NoCmd */0
        ];
}

function partial_arg_004(param) {
  return /* NoSub */0;
}

var partial_arg = /* record */[
  partial_arg_000,
  /* update */update,
  /* view */view,
  /* renderCallback */renderCallback,
  partial_arg_004
];

function main(param, param$1) {
  return Tea_debug.standardProgram(partial_arg, som, param, param$1);
}

var req = /* Req */0;

exports.gotResponse = gotResponse;
exports.req = req;
exports.update = update;
exports.view = view;
exports.som = som;
exports.renderCallback = renderCallback;
exports.main = main;
/* Tea_html Not a pure module */

},{"../src-ocaml/tea_debug.js":3,"../src-ocaml/tea_ex.js":4,"../src-ocaml/tea_html.js":5,"../src-ocaml/tea_http.js":7,"../src-ocaml/tea_task.js":12,"../src-ocaml/vdom.js":13,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/curry.js":54}],31:[function(require,module,exports){
// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Tea_app = require("../src-ocaml/tea_app.js");
var Tea_json = require("../src-ocaml/tea_json.js");
var Tea_html2 = require("../src-ocaml/tea_html2.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function set_value(param_0) {
  return /* Set_value */[param_0];
}

function update(model, param) {
  if (param) {
    return param[0];
  } else {
    return model + 1 | 0;
  }
}

function view(model) {
  var clientX = Tea_json.Decoder[/* field */11]("clientX", Tea_json.Decoder[/* int */3]);
  var init = Tea_html2.Events[/* defaultOptions */4];
  return Tea_html2.div(undefined, undefined, /* [] */0, List.map((function (e) {
                    return Tea_html2.div(undefined, undefined, /* [] */0, /* :: */[
                                e,
                                /* [] */0
                              ]);
                  }), /* :: */[
                  /* Text */Block.__(1, [String(model)]),
                  /* :: */[
                    Tea_html2.button(undefined, undefined, /* :: */[
                          Tea_html2.Events[/* onClick */9](/* Click */0),
                          /* [] */0
                        ], /* :: */[
                          /* Text */Block.__(1, ["onClick"]),
                          /* [] */0
                        ]),
                    /* :: */[
                      Tea_html2.button(undefined, undefined, /* :: */[
                            Curry._3(Tea_html2.Events[/* on */2], "", "click", Tea_json.Decoder[/* succeed */24](/* Click */0)),
                            /* [] */0
                          ], /* :: */[
                            /* Text */Block.__(1, ["on \"click\""]),
                            /* [] */0
                          ]),
                      /* :: */[
                        Tea_html2.a(undefined, undefined, /* :: */[
                              Tea_html2.Attributes[/* href */41]("https://www.google.com"),
                              /* [] */0
                            ], /* :: */[
                              /* Text */Block.__(1, ["a normal link"]),
                              /* [] */0
                            ]),
                        /* :: */[
                          Tea_html2.a(undefined, undefined, /* :: */[
                                Tea_html2.Attributes[/* href */41]("https://www.google.com"),
                                /* :: */[
                                  Curry._4(Tea_html2.Events[/* onWithOptions */3], "", "click", /* record */[
                                        /* stopPropagation */init[/* stopPropagation */0],
                                        /* preventDefault */true
                                      ], Tea_json.Decoder[/* succeed */24](/* Click */0)),
                                  /* [] */0
                                ]
                              ], /* :: */[
                                /* Text */Block.__(1, ["a link with prevent default"]),
                                /* [] */0
                              ]),
                          /* :: */[
                            Tea_html2.button(undefined, undefined, /* :: */[
                                  Curry._3(Tea_html2.Events[/* on */2], "", "click", Tea_json.Decoder[/* map */16](set_value, clientX)),
                                  /* [] */0
                                ], /* :: */[
                                  /* Text */Block.__(1, ["on \"click\", use clientX value"]),
                                  /* [] */0
                                ]),
                            /* :: */[
                              Tea_html2.input$prime(undefined, undefined, /* :: */[
                                    Tea_html2.Attributes[/* type' */8]("text"),
                                    /* :: */[
                                      Curry._3(Tea_html2.Events[/* on */2], "", "input", Tea_json.Decoder[/* map */16]((function (v) {
                                                  return /* Set_value */[Caml_format.caml_int_of_string(v)];
                                                }), Tea_html2.Events[/* targetValue */5])),
                                      /* [] */0
                                    ]
                                  ], /* [] */0),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]));
}

var partial_arg = /* record */[
  /* model */0,
  /* update */update,
  /* view */view
];

function main(param, param$1) {
  return Tea_app.beginnerProgram(partial_arg, param, param$1);
}

var click = /* Click */0;

exports.click = click;
exports.set_value = set_value;
exports.update = update;
exports.view = view;
exports.main = main;
/* Tea_html2 Not a pure module */

},{"../src-ocaml/tea_app.js":1,"../src-ocaml/tea_html2.js":6,"../src-ocaml/tea_json.js":8,"bs-platform/lib/js/block.js":33,"bs-platform/lib/js/caml_format.js":41,"bs-platform/lib/js/curry.js":54,"bs-platform/lib/js/list.js":58}],32:[function(require,module,exports){
'use strict';

var Curry = require("./curry.js");
var Js_exn = require("./js_exn.js");
var Caml_array = require("./caml_array.js");
var Caml_exceptions = require("./caml_exceptions.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function init(l, f) {
  if (l === 0) {
    return /* array */[];
  } else if (l < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Array.init"
        ];
  } else {
    var res = Caml_array.caml_make_vect(l, Curry._1(f, 0));
    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      res[i] = Curry._1(f, i);
    }
    return res;
  }
}

function make_matrix(sx, sy, init) {
  var res = Caml_array.caml_make_vect(sx, /* array */[]);
  for(var x = 0 ,x_finish = sx - 1 | 0; x <= x_finish; ++x){
    res[x] = Caml_array.caml_make_vect(sy, init);
  }
  return res;
}

function copy(a) {
  var l = a.length;
  if (l === 0) {
    return /* array */[];
  } else {
    return Caml_array.caml_array_sub(a, 0, l);
  }
}

function append(a1, a2) {
  var l1 = a1.length;
  if (l1 === 0) {
    return copy(a2);
  } else if (a2.length === 0) {
    return Caml_array.caml_array_sub(a1, 0, l1);
  } else {
    return a1.concat(a2);
  }
}

function sub(a, ofs, len) {
  if (len < 0 || ofs > (a.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Array.sub"
        ];
  } else {
    return Caml_array.caml_array_sub(a, ofs, len);
  }
}

function fill(a, ofs, len, v) {
  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Array.fill"
        ];
  } else {
    for(var i = ofs ,i_finish = (ofs + len | 0) - 1 | 0; i <= i_finish; ++i){
      a[i] = v;
    }
    return /* () */0;
  }
}

function blit(a1, ofs1, a2, ofs2, len) {
  if (len < 0 || ofs1 < 0 || ofs1 > (a1.length - len | 0) || ofs2 < 0 || ofs2 > (a2.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Array.blit"
        ];
  } else {
    return Caml_array.caml_array_blit(a1, ofs1, a2, ofs2, len);
  }
}

function iter(f, a) {
  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
    Curry._1(f, a[i]);
  }
  return /* () */0;
}

function map(f, a) {
  var l = a.length;
  if (l === 0) {
    return /* array */[];
  } else {
    var r = Caml_array.caml_make_vect(l, Curry._1(f, a[0]));
    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      r[i] = Curry._1(f, a[i]);
    }
    return r;
  }
}

function iteri(f, a) {
  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
    Curry._2(f, i, a[i]);
  }
  return /* () */0;
}

function mapi(f, a) {
  var l = a.length;
  if (l === 0) {
    return /* array */[];
  } else {
    var r = Caml_array.caml_make_vect(l, Curry._2(f, 0, a[0]));
    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      r[i] = Curry._2(f, i, a[i]);
    }
    return r;
  }
}

function to_list(a) {
  var _i = a.length - 1 | 0;
  var _res = /* [] */0;
  while(true) {
    var res = _res;
    var i = _i;
    if (i < 0) {
      return res;
    } else {
      _res = /* :: */[
        a[i],
        res
      ];
      _i = i - 1 | 0;
      continue ;
    }
  };
}

function list_length(_accu, _param) {
  while(true) {
    var param = _param;
    var accu = _accu;
    if (param) {
      _param = param[1];
      _accu = accu + 1 | 0;
      continue ;
    } else {
      return accu;
    }
  };
}

function of_list(l) {
  if (l) {
    var a = Caml_array.caml_make_vect(list_length(0, l), l[0]);
    var _i = 1;
    var _param = l[1];
    while(true) {
      var param = _param;
      var i = _i;
      if (param) {
        a[i] = param[0];
        _param = param[1];
        _i = i + 1 | 0;
        continue ;
      } else {
        return a;
      }
    };
  } else {
    return /* array */[];
  }
}

function fold_left(f, x, a) {
  var r = x;
  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
    r = Curry._2(f, r, a[i]);
  }
  return r;
}

function fold_right(f, a, x) {
  var r = x;
  for(var i = a.length - 1 | 0; i >= 0; --i){
    r = Curry._2(f, a[i], r);
  }
  return r;
}

var Bottom = Caml_exceptions.create("Array.Bottom");

function sort(cmp, a) {
  var maxson = function (l, i) {
    var i31 = ((i + i | 0) + i | 0) + 1 | 0;
    var x = i31;
    if ((i31 + 2 | 0) < l) {
      if (Curry._2(cmp, Caml_array.caml_array_get(a, i31), Caml_array.caml_array_get(a, i31 + 1 | 0)) < 0) {
        x = i31 + 1 | 0;
      }
      if (Curry._2(cmp, Caml_array.caml_array_get(a, x), Caml_array.caml_array_get(a, i31 + 2 | 0)) < 0) {
        x = i31 + 2 | 0;
      }
      return x;
    } else if ((i31 + 1 | 0) < l && Curry._2(cmp, Caml_array.caml_array_get(a, i31), Caml_array.caml_array_get(a, i31 + 1 | 0)) < 0) {
      return i31 + 1 | 0;
    } else if (i31 < l) {
      return i31;
    } else {
      throw [
            Bottom,
            i
          ];
    }
  };
  var trickle = function (l, i, e) {
    try {
      var l$1 = l;
      var _i = i;
      var e$1 = e;
      while(true) {
        var i$1 = _i;
        var j = maxson(l$1, i$1);
        if (Curry._2(cmp, Caml_array.caml_array_get(a, j), e$1) > 0) {
          Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, j));
          _i = j;
          continue ;
        } else {
          return Caml_array.caml_array_set(a, i$1, e$1);
        }
      };
    }
    catch (raw_exn){
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === Bottom) {
        return Caml_array.caml_array_set(a, exn[1], e);
      } else {
        throw exn;
      }
    }
  };
  var bubble = function (l, i) {
    try {
      var l$1 = l;
      var _i = i;
      while(true) {
        var i$1 = _i;
        var j = maxson(l$1, i$1);
        Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, j));
        _i = j;
        continue ;
      };
    }
    catch (raw_exn){
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === Bottom) {
        return exn[1];
      } else {
        throw exn;
      }
    }
  };
  var trickleup = function (_i, e) {
    while(true) {
      var i = _i;
      var father = (i - 1 | 0) / 3 | 0;
      if (i === father) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "array.ml",
                173,
                4
              ]
            ];
      }
      if (Curry._2(cmp, Caml_array.caml_array_get(a, father), e) < 0) {
        Caml_array.caml_array_set(a, i, Caml_array.caml_array_get(a, father));
        if (father > 0) {
          _i = father;
          continue ;
        } else {
          return Caml_array.caml_array_set(a, 0, e);
        }
      } else {
        return Caml_array.caml_array_set(a, i, e);
      }
    };
  };
  var l = a.length;
  for(var i = ((l + 1 | 0) / 3 | 0) - 1 | 0; i >= 0; --i){
    trickle(l, i, Caml_array.caml_array_get(a, i));
  }
  for(var i$1 = l - 1 | 0; i$1 >= 2; --i$1){
    var e = Caml_array.caml_array_get(a, i$1);
    Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, 0));
    trickleup(bubble(i$1, 0), e);
  }
  if (l > 1) {
    var e$1 = Caml_array.caml_array_get(a, 1);
    Caml_array.caml_array_set(a, 1, Caml_array.caml_array_get(a, 0));
    return Caml_array.caml_array_set(a, 0, e$1);
  } else {
    return 0;
  }
}

function stable_sort(cmp, a) {
  var merge = function (src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {
    var src1r = src1ofs + src1len | 0;
    var src2r = src2ofs + src2len | 0;
    var _i1 = src1ofs;
    var _s1 = Caml_array.caml_array_get(a, src1ofs);
    var _i2 = src2ofs;
    var _s2 = Caml_array.caml_array_get(src2, src2ofs);
    var _d = dstofs;
    while(true) {
      var d = _d;
      var s2 = _s2;
      var i2 = _i2;
      var s1 = _s1;
      var i1 = _i1;
      if (Curry._2(cmp, s1, s2) <= 0) {
        Caml_array.caml_array_set(dst, d, s1);
        var i1$1 = i1 + 1 | 0;
        if (i1$1 < src1r) {
          _d = d + 1 | 0;
          _s1 = Caml_array.caml_array_get(a, i1$1);
          _i1 = i1$1;
          continue ;
        } else {
          return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
        }
      } else {
        Caml_array.caml_array_set(dst, d, s2);
        var i2$1 = i2 + 1 | 0;
        if (i2$1 < src2r) {
          _d = d + 1 | 0;
          _s2 = Caml_array.caml_array_get(src2, i2$1);
          _i2 = i2$1;
          continue ;
        } else {
          return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);
        }
      }
    };
  };
  var isortto = function (srcofs, dst, dstofs, len) {
    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      var e = Caml_array.caml_array_get(a, srcofs + i | 0);
      var j = (dstofs + i | 0) - 1 | 0;
      while(j >= dstofs && Curry._2(cmp, Caml_array.caml_array_get(dst, j), e) > 0) {
        Caml_array.caml_array_set(dst, j + 1 | 0, Caml_array.caml_array_get(dst, j));
        j = j - 1 | 0;
      };
      Caml_array.caml_array_set(dst, j + 1 | 0, e);
    }
    return /* () */0;
  };
  var sortto = function (srcofs, dst, dstofs, len) {
    if (len <= 5) {
      return isortto(srcofs, dst, dstofs, len);
    } else {
      var l1 = len / 2 | 0;
      var l2 = len - l1 | 0;
      sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
      sortto(srcofs, a, srcofs + l2 | 0, l1);
      return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
    }
  };
  var l = a.length;
  if (l <= 5) {
    return isortto(0, a, 0, l);
  } else {
    var l1 = l / 2 | 0;
    var l2 = l - l1 | 0;
    var t = Caml_array.caml_make_vect(l2, Caml_array.caml_array_get(a, 0));
    sortto(l1, t, 0, l2);
    sortto(0, a, l2, l1);
    return merge(l2, l1, t, 0, l2, a, 0);
  }
}

var create_matrix = make_matrix;

var concat = Caml_array.caml_array_concat;

var fast_sort = stable_sort;

exports.init = init;
exports.make_matrix = make_matrix;
exports.create_matrix = create_matrix;
exports.append = append;
exports.concat = concat;
exports.sub = sub;
exports.copy = copy;
exports.fill = fill;
exports.blit = blit;
exports.to_list = to_list;
exports.of_list = of_list;
exports.iter = iter;
exports.map = map;
exports.iteri = iteri;
exports.mapi = mapi;
exports.fold_left = fold_left;
exports.fold_right = fold_right;
exports.sort = sort;
exports.stable_sort = stable_sort;
exports.fast_sort = fast_sort;
/* No side effect */

},{"./caml_array.js":36,"./caml_builtin_exceptions.js":37,"./caml_exceptions.js":39,"./curry.js":54,"./js_exn.js":55}],33:[function(require,module,exports){
'use strict';


function __(tag, block) {
  block.tag = tag;
  return block;
}

function record(meta, xs) {
  return Object.defineProperty(xs, Symbol.for("BsRecord"), {
              value: meta
            });
}

function variant(meta, tag, xs) {
  xs.tag = tag;
  return Object.defineProperty(xs, Symbol.for("BsVariant"), {
              value: meta
            });
}

function simpleVariant(meta, xs) {
  return Object.defineProperty(xs, Symbol.for("BsVariant"), {
              value: meta
            });
}

function localModule(meta, xs) {
  return Object.defineProperty(xs, Symbol.for("BsLocalModule"), {
              value: meta
            });
}

function polyVar(meta, xs) {
  return Object.defineProperty(xs, Symbol.for("BsPolyVar"), {
              value: meta
            });
}

exports.__ = __;
exports.record = record;
exports.variant = variant;
exports.simpleVariant = simpleVariant;
exports.localModule = localModule;
exports.polyVar = polyVar;
/* No side effect */

},{}],34:[function(require,module,exports){
'use strict';

var Bytes = require("./bytes.js");
var Curry = require("./curry.js");
var $$String = require("./string.js");
var Pervasives = require("./pervasives.js");
var Caml_string = require("./caml_string.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function create(n) {
  var n$1 = n < 1 ? 1 : n;
  var s = Caml_string.caml_create_string(n$1);
  return /* record */[
          /* buffer */s,
          /* position */0,
          /* length */n$1,
          /* initial_buffer */s
        ];
}

function contents(b) {
  return Bytes.sub_string(b[/* buffer */0], 0, b[/* position */1]);
}

function to_bytes(b) {
  return Bytes.sub(b[/* buffer */0], 0, b[/* position */1]);
}

function sub(b, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (b[/* position */1] - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.sub"
        ];
  } else {
    return Bytes.sub_string(b[/* buffer */0], ofs, len);
  }
}

function blit(src, srcoff, dst, dstoff, len) {
  if (len < 0 || srcoff < 0 || srcoff > (src[/* position */1] - len | 0) || dstoff < 0 || dstoff > (dst.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.blit"
        ];
  } else {
    return Bytes.blit(src[/* buffer */0], srcoff, dst, dstoff, len);
  }
}

function nth(b, ofs) {
  if (ofs < 0 || ofs >= b[/* position */1]) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.nth"
        ];
  } else {
    return b[/* buffer */0][ofs];
  }
}

function length(b) {
  return b[/* position */1];
}

function clear(b) {
  b[/* position */1] = 0;
  return /* () */0;
}

function reset(b) {
  b[/* position */1] = 0;
  b[/* buffer */0] = b[/* initial_buffer */3];
  b[/* length */2] = b[/* buffer */0].length;
  return /* () */0;
}

function resize(b, more) {
  var len = b[/* length */2];
  var new_len = len;
  while((b[/* position */1] + more | 0) > new_len) {
    new_len = (new_len << 1);
  };
  var new_buffer = Caml_string.caml_create_string(new_len);
  Bytes.blit(b[/* buffer */0], 0, new_buffer, 0, b[/* position */1]);
  b[/* buffer */0] = new_buffer;
  b[/* length */2] = new_len;
  return /* () */0;
}

function add_char(b, c) {
  var pos = b[/* position */1];
  if (pos >= b[/* length */2]) {
    resize(b, 1);
  }
  b[/* buffer */0][pos] = c;
  b[/* position */1] = pos + 1 | 0;
  return /* () */0;
}

function add_substring(b, s, offset, len) {
  if (offset < 0 || len < 0 || (offset + len | 0) > s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.add_substring/add_subbytes"
        ];
  }
  var new_position = b[/* position */1] + len | 0;
  if (new_position > b[/* length */2]) {
    resize(b, len);
  }
  Bytes.blit_string(s, offset, b[/* buffer */0], b[/* position */1], len);
  b[/* position */1] = new_position;
  return /* () */0;
}

function add_subbytes(b, s, offset, len) {
  return add_substring(b, Caml_string.bytes_to_string(s), offset, len);
}

function add_string(b, s) {
  var len = s.length;
  var new_position = b[/* position */1] + len | 0;
  if (new_position > b[/* length */2]) {
    resize(b, len);
  }
  Bytes.blit_string(s, 0, b[/* buffer */0], b[/* position */1], len);
  b[/* position */1] = new_position;
  return /* () */0;
}

function add_bytes(b, s) {
  return add_string(b, Caml_string.bytes_to_string(s));
}

function add_buffer(b, bs) {
  return add_subbytes(b, bs[/* buffer */0], 0, bs[/* position */1]);
}

function add_channel(b, ic, len) {
  if (len < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Buffer.add_channel"
        ];
  }
  if ((b[/* position */1] + len | 0) > b[/* length */2]) {
    resize(b, len);
  }
  Pervasives.really_input(ic, b[/* buffer */0], b[/* position */1], len);
  b[/* position */1] = b[/* position */1] + len | 0;
  return /* () */0;
}

function output_buffer(oc, b) {
  return Pervasives.output(oc, b[/* buffer */0], 0, b[/* position */1]);
}

function closing(param) {
  if (param !== 40) {
    if (param !== 123) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "buffer.ml",
              126,
              9
            ]
          ];
    } else {
      return /* "}" */125;
    }
  } else {
    return /* ")" */41;
  }
}

function advance_to_closing(opening, closing, k, s, start) {
  var _k = k;
  var _i = start;
  var lim = s.length;
  while(true) {
    var i = _i;
    var k$1 = _k;
    if (i >= lim) {
      throw Caml_builtin_exceptions.not_found;
    } else if (Caml_string.get(s, i) === opening) {
      _i = i + 1 | 0;
      _k = k$1 + 1 | 0;
      continue ;
    } else if (Caml_string.get(s, i) === closing) {
      if (k$1 === 0) {
        return i;
      } else {
        _i = i + 1 | 0;
        _k = k$1 - 1 | 0;
        continue ;
      }
    } else {
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function advance_to_non_alpha(s, start) {
  var _i = start;
  var lim = s.length;
  while(true) {
    var i = _i;
    if (i >= lim) {
      return lim;
    } else {
      var match = Caml_string.get(s, i);
      var exit = 0;
      if (match >= 91) {
        if (match >= 97) {
          if (match >= 123) {
            return i;
          } else {
            exit = 1;
          }
        } else if (match !== 95) {
          return i;
        } else {
          exit = 1;
        }
      } else if (match >= 58) {
        if (match >= 65) {
          exit = 1;
        } else {
          return i;
        }
      } else if (match >= 48) {
        exit = 1;
      } else {
        return i;
      }
      if (exit === 1) {
        _i = i + 1 | 0;
        continue ;
      }
      
    }
  };
}

function find_ident(s, start, lim) {
  if (start >= lim) {
    throw Caml_builtin_exceptions.not_found;
  } else {
    var c = Caml_string.get(s, start);
    var exit = 0;
    if (c !== 40 && c !== 123) {
      var stop = advance_to_non_alpha(s, start + 1 | 0);
      return /* tuple */[
              $$String.sub(s, start, stop - start | 0),
              stop
            ];
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var new_start = start + 1 | 0;
      var stop$1 = advance_to_closing(c, closing(c), 0, s, new_start);
      return /* tuple */[
              $$String.sub(s, new_start, (stop$1 - start | 0) - 1 | 0),
              stop$1 + 1 | 0
            ];
    }
    
  }
}

function add_substitute(b, f, s) {
  var lim = s.length;
  var _previous = /* " " */32;
  var _i = 0;
  while(true) {
    var i = _i;
    var previous = _previous;
    if (i < lim) {
      var current = Caml_string.get(s, i);
      if (current !== 36) {
        if (previous === /* "\\" */92) {
          add_char(b, /* "\\" */92);
          add_char(b, current);
          _i = i + 1 | 0;
          _previous = /* " " */32;
          continue ;
        } else if (current !== 92) {
          add_char(b, current);
          _i = i + 1 | 0;
          _previous = current;
          continue ;
        } else {
          _i = i + 1 | 0;
          _previous = current;
          continue ;
        }
      } else if (previous === /* "\\" */92) {
        add_char(b, current);
        _i = i + 1 | 0;
        _previous = /* " " */32;
        continue ;
      } else {
        var j = i + 1 | 0;
        var match = find_ident(s, j, lim);
        add_string(b, Curry._1(f, match[0]));
        _i = match[1];
        _previous = /* " " */32;
        continue ;
      }
    } else if (previous === /* "\\" */92) {
      return add_char(b, previous);
    } else {
      return 0;
    }
  };
}

exports.create = create;
exports.contents = contents;
exports.to_bytes = to_bytes;
exports.sub = sub;
exports.blit = blit;
exports.nth = nth;
exports.length = length;
exports.clear = clear;
exports.reset = reset;
exports.add_char = add_char;
exports.add_string = add_string;
exports.add_bytes = add_bytes;
exports.add_substring = add_substring;
exports.add_subbytes = add_subbytes;
exports.add_substitute = add_substitute;
exports.add_buffer = add_buffer;
exports.add_channel = add_channel;
exports.output_buffer = output_buffer;
/* No side effect */

},{"./bytes.js":35,"./caml_builtin_exceptions.js":37,"./caml_string.js":48,"./curry.js":54,"./pervasives.js":59,"./string.js":61}],35:[function(require,module,exports){
'use strict';

var Char = require("./char.js");
var List = require("./list.js");
var Curry = require("./curry.js");
var Caml_obj = require("./caml_obj.js");
var Caml_int32 = require("./caml_int32.js");
var Caml_string = require("./caml_string.js");
var Caml_primitive = require("./caml_primitive.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function make(n, c) {
  var s = Caml_string.caml_create_string(n);
  Caml_string.caml_fill_string(s, 0, n, c);
  return s;
}

function init(n, f) {
  var s = Caml_string.caml_create_string(n);
  for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){
    s[i] = Curry._1(f, i);
  }
  return s;
}

var empty = [];

function copy(s) {
  var len = s.length;
  var r = Caml_string.caml_create_string(len);
  Caml_string.caml_blit_bytes(s, 0, r, 0, len);
  return r;
}

function to_string(b) {
  return Caml_string.bytes_to_string(copy(b));
}

function of_string(s) {
  return copy(Caml_string.bytes_of_string(s));
}

function sub(s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.sub / Bytes.sub"
        ];
  } else {
    var r = Caml_string.caml_create_string(len);
    Caml_string.caml_blit_bytes(s, ofs, r, 0, len);
    return r;
  }
}

function sub_string(b, ofs, len) {
  return Caml_string.bytes_to_string(sub(b, ofs, len));
}

function extend(s, left, right) {
  var len = (s.length + left | 0) + right | 0;
  var r = Caml_string.caml_create_string(len);
  var match = left < 0 ? /* tuple */[
      -left | 0,
      0
    ] : /* tuple */[
      0,
      left
    ];
  var dstoff = match[1];
  var srcoff = match[0];
  var cpylen = Caml_primitive.caml_int_min(s.length - srcoff | 0, len - dstoff | 0);
  if (cpylen > 0) {
    Caml_string.caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
  }
  return r;
}

function fill(s, ofs, len, c) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.fill / Bytes.fill"
        ];
  } else {
    return Caml_string.caml_fill_string(s, ofs, len, c);
  }
}

function blit(s1, ofs1, s2, ofs2, len) {
  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Bytes.blit"
        ];
  } else {
    return Caml_string.caml_blit_bytes(s1, ofs1, s2, ofs2, len);
  }
}

function blit_string(s1, ofs1, s2, ofs2, len) {
  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.blit / Bytes.blit_string"
        ];
  } else {
    return Caml_string.caml_blit_string(s1, ofs1, s2, ofs2, len);
  }
}

function iter(f, a) {
  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
    Curry._1(f, a[i]);
  }
  return /* () */0;
}

function iteri(f, a) {
  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
    Curry._2(f, i, a[i]);
  }
  return /* () */0;
}

function concat(sep, l) {
  if (l) {
    var hd = l[0];
    var num = /* record */[/* contents */0];
    var len = /* record */[/* contents */0];
    List.iter((function (s) {
            num[0] = num[0] + 1 | 0;
            len[0] = len[0] + s.length | 0;
            return /* () */0;
          }), l);
    var r = Caml_string.caml_create_string(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);
    Caml_string.caml_blit_bytes(hd, 0, r, 0, hd.length);
    var pos = /* record */[/* contents */hd.length];
    List.iter((function (s) {
            Caml_string.caml_blit_bytes(sep, 0, r, pos[0], sep.length);
            pos[0] = pos[0] + sep.length | 0;
            Caml_string.caml_blit_bytes(s, 0, r, pos[0], s.length);
            pos[0] = pos[0] + s.length | 0;
            return /* () */0;
          }), l[1]);
    return r;
  } else {
    return empty;
  }
}

function cat(s1, s2) {
  var l1 = s1.length;
  var l2 = s2.length;
  var r = Caml_string.caml_create_string(l1 + l2 | 0);
  Caml_string.caml_blit_bytes(s1, 0, r, 0, l1);
  Caml_string.caml_blit_bytes(s2, 0, r, l1, l2);
  return r;
}

function is_space(param) {
  var switcher = param - 9 | 0;
  if (switcher > 4 || switcher < 0) {
    return switcher === 23;
  } else {
    return switcher !== 2;
  }
}

function trim(s) {
  var len = s.length;
  var i = 0;
  while(i < len && is_space(s[i])) {
    i = i + 1 | 0;
  };
  var j = len - 1 | 0;
  while(j >= i && is_space(s[j])) {
    j = j - 1 | 0;
  };
  if (j >= i) {
    return sub(s, i, (j - i | 0) + 1 | 0);
  } else {
    return empty;
  }
}

function escaped(s) {
  var n = 0;
  for(var i = 0 ,i_finish = s.length - 1 | 0; i <= i_finish; ++i){
    var match = s[i];
    var tmp;
    if (match >= 32) {
      var switcher = match - 34 | 0;
      tmp = switcher > 58 || switcher < 0 ? (
          switcher >= 93 ? 4 : 1
        ) : (
          switcher > 57 || switcher < 1 ? 2 : 1
        );
    } else {
      tmp = match >= 11 ? (
          match !== 13 ? 4 : 2
        ) : (
          match >= 8 ? 2 : 4
        );
    }
    n = n + tmp | 0;
  }
  if (n === s.length) {
    return copy(s);
  } else {
    var s$prime = Caml_string.caml_create_string(n);
    n = 0;
    for(var i$1 = 0 ,i_finish$1 = s.length - 1 | 0; i$1 <= i_finish$1; ++i$1){
      var c = s[i$1];
      var exit = 0;
      if (c >= 35) {
        if (c !== 92) {
          if (c >= 127) {
            exit = 1;
          } else {
            s$prime[n] = c;
          }
        } else {
          exit = 2;
        }
      } else if (c >= 32) {
        if (c >= 34) {
          exit = 2;
        } else {
          s$prime[n] = c;
        }
      } else if (c >= 14) {
        exit = 1;
      } else {
        switch (c) {
          case 8 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = /* "b" */98;
              break;
          case 9 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = /* "t" */116;
              break;
          case 10 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = /* "n" */110;
              break;
          case 0 : 
          case 1 : 
          case 2 : 
          case 3 : 
          case 4 : 
          case 5 : 
          case 6 : 
          case 7 : 
          case 11 : 
          case 12 : 
              exit = 1;
              break;
          case 13 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = /* "r" */114;
              break;
          
        }
      }
      switch (exit) {
        case 1 : 
            s$prime[n] = /* "\\" */92;
            n = n + 1 | 0;
            s$prime[n] = 48 + (c / 100 | 0) | 0;
            n = n + 1 | 0;
            s$prime[n] = 48 + (c / 10 | 0) % 10 | 0;
            n = n + 1 | 0;
            s$prime[n] = 48 + c % 10 | 0;
            break;
        case 2 : 
            s$prime[n] = /* "\\" */92;
            n = n + 1 | 0;
            s$prime[n] = c;
            break;
        
      }
      n = n + 1 | 0;
    }
    return s$prime;
  }
}

function map(f, s) {
  var l = s.length;
  if (l === 0) {
    return s;
  } else {
    var r = Caml_string.caml_create_string(l);
    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      r[i] = Curry._1(f, s[i]);
    }
    return r;
  }
}

function mapi(f, s) {
  var l = s.length;
  if (l === 0) {
    return s;
  } else {
    var r = Caml_string.caml_create_string(l);
    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      r[i] = Curry._2(f, i, s[i]);
    }
    return r;
  }
}

function uppercase(s) {
  return map(Char.uppercase, s);
}

function lowercase(s) {
  return map(Char.lowercase, s);
}

function apply1(f, s) {
  if (s.length === 0) {
    return s;
  } else {
    var r = copy(s);
    r[0] = Curry._1(f, s[0]);
    return r;
  }
}

function capitalize(s) {
  return apply1(Char.uppercase, s);
}

function uncapitalize(s) {
  return apply1(Char.lowercase, s);
}

function index_rec(s, lim, _i, c) {
  while(true) {
    var i = _i;
    if (i >= lim) {
      throw Caml_builtin_exceptions.not_found;
    } else if (s[i] === c) {
      return i;
    } else {
      _i = i + 1 | 0;
      continue ;
    }
  };
}

function index(s, c) {
  return index_rec(s, s.length, 0, c);
}

function index_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.index_from / Bytes.index_from"
        ];
  } else {
    return index_rec(s, l, i, c);
  }
}

function rindex_rec(s, _i, c) {
  while(true) {
    var i = _i;
    if (i < 0) {
      throw Caml_builtin_exceptions.not_found;
    } else if (s[i] === c) {
      return i;
    } else {
      _i = i - 1 | 0;
      continue ;
    }
  };
}

function rindex(s, c) {
  return rindex_rec(s, s.length - 1 | 0, c);
}

function rindex_from(s, i, c) {
  if (i < -1 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.rindex_from / Bytes.rindex_from"
        ];
  } else {
    return rindex_rec(s, i, c);
  }
}

function contains_from(s, i, c) {
  var l = s.length;
  if (i < 0 || i > l) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.contains_from / Bytes.contains_from"
        ];
  } else {
    try {
      index_rec(s, l, i, c);
      return true;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return false;
      } else {
        throw exn;
      }
    }
  }
}

function contains(s, c) {
  return contains_from(s, 0, c);
}

function rcontains_from(s, i, c) {
  if (i < 0 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.rcontains_from / Bytes.rcontains_from"
        ];
  } else {
    try {
      rindex_rec(s, i, c);
      return true;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return false;
      } else {
        throw exn;
      }
    }
  }
}

var compare = Caml_obj.caml_compare;

var unsafe_to_string = Caml_string.bytes_to_string;

var unsafe_of_string = Caml_string.bytes_of_string;

exports.make = make;
exports.init = init;
exports.empty = empty;
exports.copy = copy;
exports.of_string = of_string;
exports.to_string = to_string;
exports.sub = sub;
exports.sub_string = sub_string;
exports.extend = extend;
exports.fill = fill;
exports.blit = blit;
exports.blit_string = blit_string;
exports.concat = concat;
exports.cat = cat;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi;
exports.trim = trim;
exports.escaped = escaped;
exports.index = index;
exports.rindex = rindex;
exports.index_from = index_from;
exports.rindex_from = rindex_from;
exports.contains = contains;
exports.contains_from = contains_from;
exports.rcontains_from = rcontains_from;
exports.uppercase = uppercase;
exports.lowercase = lowercase;
exports.capitalize = capitalize;
exports.uncapitalize = uncapitalize;
exports.compare = compare;
exports.unsafe_to_string = unsafe_to_string;
exports.unsafe_of_string = unsafe_of_string;
/* No side effect */

},{"./caml_builtin_exceptions.js":37,"./caml_int32.js":42,"./caml_obj.js":46,"./caml_primitive.js":47,"./caml_string.js":48,"./char.js":53,"./curry.js":54,"./list.js":58}],36:[function(require,module,exports){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function caml_array_sub(x, offset, len) {
  var result = new Array(len);
  var j = 0;
  var i = offset;
  while(j < len) {
    result[j] = x[i];
    j = j + 1 | 0;
    i = i + 1 | 0;
  };
  return result;
}

function len(_acc, _l) {
  while(true) {
    var l = _l;
    var acc = _acc;
    if (l) {
      _l = l[1];
      _acc = l[0].length + acc | 0;
      continue ;
    } else {
      return acc;
    }
  };
}

function fill(arr, _i, _l) {
  while(true) {
    var l = _l;
    var i = _i;
    if (l) {
      var x = l[0];
      var l$1 = x.length;
      var k = i;
      var j = 0;
      while(j < l$1) {
        arr[k] = x[j];
        k = k + 1 | 0;
        j = j + 1 | 0;
      };
      _l = l[1];
      _i = k;
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function caml_array_concat(l) {
  var v = len(0, l);
  var result = new Array(v);
  fill(result, 0, l);
  return result;
}

function caml_array_set(xs, index, newval) {
  if (index < 0 || index >= xs.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    xs[index] = newval;
    return /* () */0;
  }
}

function caml_array_get(xs, index) {
  if (index < 0 || index >= xs.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    return xs[index];
  }
}

function caml_make_vect(len, init) {
  var b = new Array(len);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    b[i] = init;
  }
  return b;
}

function caml_make_float_vect(len) {
  var b = new Array(len);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    b[i] = 0;
  }
  return b;
}

function caml_array_blit(a1, i1, a2, i2, len) {
  if (i2 <= i1) {
    for(var j = 0 ,j_finish = len - 1 | 0; j <= j_finish; ++j){
      a2[j + i2 | 0] = a1[j + i1 | 0];
    }
    return /* () */0;
  } else {
    for(var j$1 = len - 1 | 0; j$1 >= 0; --j$1){
      a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];
    }
    return /* () */0;
  }
}

function caml_array_dup(prim) {
  return prim.slice(0);
}

exports.caml_array_dup = caml_array_dup;
exports.caml_array_sub = caml_array_sub;
exports.caml_array_concat = caml_array_concat;
exports.caml_make_vect = caml_make_vect;
exports.caml_make_float_vect = caml_make_float_vect;
exports.caml_array_blit = caml_array_blit;
exports.caml_array_get = caml_array_get;
exports.caml_array_set = caml_array_set;
/* No side effect */

},{"./caml_builtin_exceptions.js":37}],37:[function(require,module,exports){
'use strict';


var out_of_memory = /* tuple */[
  "Out_of_memory",
  0
];

var sys_error = /* tuple */[
  "Sys_error",
  -1
];

var failure = /* tuple */[
  "Failure",
  -2
];

var invalid_argument = /* tuple */[
  "Invalid_argument",
  -3
];

var end_of_file = /* tuple */[
  "End_of_file",
  -4
];

var division_by_zero = /* tuple */[
  "Division_by_zero",
  -5
];

var not_found = /* tuple */[
  "Not_found",
  -6
];

var match_failure = /* tuple */[
  "Match_failure",
  -7
];

var stack_overflow = /* tuple */[
  "Stack_overflow",
  -8
];

var sys_blocked_io = /* tuple */[
  "Sys_blocked_io",
  -9
];

var assert_failure = /* tuple */[
  "Assert_failure",
  -10
];

var undefined_recursive_module = /* tuple */[
  "Undefined_recursive_module",
  -11
];

out_of_memory.tag = 248;

sys_error.tag = 248;

failure.tag = 248;

invalid_argument.tag = 248;

end_of_file.tag = 248;

division_by_zero.tag = 248;

not_found.tag = 248;

match_failure.tag = 248;

stack_overflow.tag = 248;

sys_blocked_io.tag = 248;

assert_failure.tag = 248;

undefined_recursive_module.tag = 248;

exports.out_of_memory = out_of_memory;
exports.sys_error = sys_error;
exports.failure = failure;
exports.invalid_argument = invalid_argument;
exports.end_of_file = end_of_file;
exports.division_by_zero = division_by_zero;
exports.not_found = not_found;
exports.match_failure = match_failure;
exports.stack_overflow = stack_overflow;
exports.sys_blocked_io = sys_blocked_io;
exports.assert_failure = assert_failure;
exports.undefined_recursive_module = undefined_recursive_module;
/*  Not a pure module */

},{}],38:[function(require,module,exports){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function get(s, i) {
  if (i < 0 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    return s[i];
  }
}

exports.get = get;
/* No side effect */

},{"./caml_builtin_exceptions.js":37}],39:[function(require,module,exports){
'use strict';


var id = /* record */[/* contents */0];

function caml_set_oo_id(b) {
  b[1] = id[0];
  id[0] += 1;
  return b;
}

function caml_fresh_oo_id(param) {
  id[0] += 1;
  return id[0];
}

function create(str) {
  var v_001 = caml_fresh_oo_id(/* () */0);
  var v = /* tuple */[
    str,
    v_001
  ];
  v.tag = 248;
  return v;
}

function isCamlExceptionOrOpenVariant(e) {
  if (e === undefined) {
    return false;
  } else if (e.tag === 248) {
    return true;
  } else {
    var slot = e[0];
    if (slot !== undefined) {
      return slot.tag === 248;
    } else {
      return false;
    }
  }
}

exports.caml_set_oo_id = caml_set_oo_id;
exports.caml_fresh_oo_id = caml_fresh_oo_id;
exports.create = create;
exports.isCamlExceptionOrOpenVariant = isCamlExceptionOrOpenVariant;
/* No side effect */

},{}],40:[function(require,module,exports){
'use strict';


function caml_int32_float_of_bits(x) {
  var int32 = new Int32Array(/* array */[x]);
  var float32 = new Float32Array(int32.buffer);
  return float32[0];
}

function caml_int32_bits_of_float(x) {
  var float32 = new Float32Array(/* array */[x]);
  return new Int32Array(float32.buffer)[0];
}

function caml_classify_float(x) {
  if (isFinite(x)) {
    if (Math.abs(x) >= 2.2250738585072014e-308) {
      return /* FP_normal */0;
    } else if (x !== 0) {
      return /* FP_subnormal */1;
    } else {
      return /* FP_zero */2;
    }
  } else if (isNaN(x)) {
    return /* FP_nan */4;
  } else {
    return /* FP_infinite */3;
  }
}

function caml_modf_float(x) {
  if (isFinite(x)) {
    var neg = 1 / x < 0;
    var x$1 = Math.abs(x);
    var i = Math.floor(x$1);
    var f = x$1 - i;
    if (neg) {
      return /* tuple */[
              -f,
              -i
            ];
    } else {
      return /* tuple */[
              f,
              i
            ];
    }
  } else if (isNaN(x)) {
    return /* tuple */[
            NaN,
            NaN
          ];
  } else {
    return /* tuple */[
            1 / x,
            x
          ];
  }
}

function caml_ldexp_float(x, exp) {
  var x$prime = x;
  var exp$prime = exp;
  if (exp$prime > 1023) {
    exp$prime -= 1023;
    x$prime = x$prime * Math.pow(2, 1023);
    if (exp$prime > 1023) {
      exp$prime -= 1023;
      x$prime = x$prime * Math.pow(2, 1023);
    }
    
  } else if (exp$prime < -1023) {
    exp$prime += 1023;
    x$prime = x$prime * Math.pow(2, -1023);
  }
  return x$prime * Math.pow(2, exp$prime);
}

function caml_frexp_float(x) {
  if (x === 0 || !isFinite(x)) {
    return /* tuple */[
            x,
            0
          ];
  } else {
    var neg = x < 0;
    var x$prime = Math.abs(x);
    var exp = Math.floor(Math.LOG2E * Math.log(x$prime)) + 1;
    x$prime = x$prime * Math.pow(2, -exp);
    if (x$prime < 0.5) {
      x$prime = x$prime * 2;
      exp -= 1;
    }
    if (neg) {
      x$prime = -x$prime;
    }
    return /* tuple */[
            x$prime,
            exp | 0
          ];
  }
}

function caml_copysign_float(x, y) {
  var x$1 = Math.abs(x);
  var y$1 = y === 0 ? 1 / y : y;
  if (y$1 < 0) {
    return -x$1;
  } else {
    return x$1;
  }
}

function caml_expm1_float(x) {
  var y = Math.exp(x);
  var z = y - 1;
  if (Math.abs(x) > 1) {
    return z;
  } else if (z === 0) {
    return x;
  } else {
    return x * z / Math.log(y);
  }
}

function caml_hypot_float(x, y) {
  var x0 = Math.abs(x);
  var y0 = Math.abs(y);
  var a = Math.max(x0, y0);
  var b = Math.min(x0, y0) / (
    a !== 0 ? a : 1
  );
  return a * Math.sqrt(1 + b * b);
}

function caml_log10_float(x) {
  return Math.LOG10E * Math.log(x);
}

exports.caml_int32_float_of_bits = caml_int32_float_of_bits;
exports.caml_int32_bits_of_float = caml_int32_bits_of_float;
exports.caml_classify_float = caml_classify_float;
exports.caml_modf_float = caml_modf_float;
exports.caml_ldexp_float = caml_ldexp_float;
exports.caml_frexp_float = caml_frexp_float;
exports.caml_copysign_float = caml_copysign_float;
exports.caml_expm1_float = caml_expm1_float;
exports.caml_hypot_float = caml_hypot_float;
exports.caml_log10_float = caml_log10_float;
/* No side effect */

},{}],41:[function(require,module,exports){
'use strict';

var Curry = require("./curry.js");
var Caml_int32 = require("./caml_int32.js");
var Caml_int64 = require("./caml_int64.js");
var Caml_utils = require("./caml_utils.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function caml_failwith(s) {
  throw [
        Caml_builtin_exceptions.failure,
        s
      ];
}

function parse_digit(c) {
  if (c >= 65) {
    if (c >= 97) {
      if (c >= 123) {
        return -1;
      } else {
        return c - 87 | 0;
      }
    } else if (c >= 91) {
      return -1;
    } else {
      return c - 55 | 0;
    }
  } else if (c > 57 || c < 48) {
    return -1;
  } else {
    return c - /* "0" */48 | 0;
  }
}

function int_of_string_base(param) {
  switch (param) {
    case 0 : 
        return 8;
    case 1 : 
        return 16;
    case 2 : 
        return 10;
    case 3 : 
        return 2;
    
  }
}

function parse_sign_and_base(s) {
  var sign = 1;
  var base = /* Dec */2;
  var i = 0;
  if (s[i] === "-") {
    sign = -1;
    i = i + 1 | 0;
  }
  var match = s.charCodeAt(i);
  var match$1 = s.charCodeAt(i + 1 | 0);
  if (match === 48) {
    if (match$1 >= 89) {
      if (match$1 !== 98) {
        if (match$1 !== 111) {
          if (match$1 === 120) {
            base = /* Hex */1;
            i = i + 2 | 0;
          }
          
        } else {
          base = /* Oct */0;
          i = i + 2 | 0;
        }
      } else {
        base = /* Bin */3;
        i = i + 2 | 0;
      }
    } else if (match$1 !== 66) {
      if (match$1 !== 79) {
        if (match$1 >= 88) {
          base = /* Hex */1;
          i = i + 2 | 0;
        }
        
      } else {
        base = /* Oct */0;
        i = i + 2 | 0;
      }
    } else {
      base = /* Bin */3;
      i = i + 2 | 0;
    }
  }
  return /* tuple */[
          i,
          sign,
          base
        ];
}

function caml_int_of_string(s) {
  var match = parse_sign_and_base(s);
  var i = match[0];
  var base = int_of_string_base(match[2]);
  var threshold = 4294967295;
  var len = s.length;
  var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
  var d = parse_digit(c);
  if (d < 0 || d >= base) {
    throw [
          Caml_builtin_exceptions.failure,
          "int_of_string"
        ];
  }
  var aux = function (_acc, _k) {
    while(true) {
      var k = _k;
      var acc = _acc;
      if (k === len) {
        return acc;
      } else {
        var a = s.charCodeAt(k);
        if (a === /* "_" */95) {
          _k = k + 1 | 0;
          continue ;
        } else {
          var v = parse_digit(a);
          if (v < 0 || v >= base) {
            throw [
                  Caml_builtin_exceptions.failure,
                  "int_of_string"
                ];
          } else {
            var acc$1 = base * acc + v;
            if (acc$1 > threshold) {
              throw [
                    Caml_builtin_exceptions.failure,
                    "int_of_string"
                  ];
            } else {
              _k = k + 1 | 0;
              _acc = acc$1;
              continue ;
            }
          }
        }
      }
    };
  };
  var res = match[1] * aux(d, i + 1 | 0);
  var or_res = res | 0;
  if (base === 10 && res !== or_res) {
    throw [
          Caml_builtin_exceptions.failure,
          "int_of_string"
        ];
  }
  return or_res;
}

function caml_int64_of_string(s) {
  var match = parse_sign_and_base(s);
  var hbase = match[2];
  var i = match[0];
  var base = Caml_int64.of_int32(int_of_string_base(hbase));
  var sign = Caml_int64.of_int32(match[1]);
  var threshold;
  switch (hbase) {
    case 0 : 
        threshold = /* int64 */[
          /* hi */536870911,
          /* lo */4294967295
        ];
        break;
    case 1 : 
        threshold = /* int64 */[
          /* hi */268435455,
          /* lo */4294967295
        ];
        break;
    case 2 : 
        threshold = /* int64 */[
          /* hi */429496729,
          /* lo */2576980377
        ];
        break;
    case 3 : 
        threshold = /* int64 */[
          /* hi */2147483647,
          /* lo */4294967295
        ];
        break;
    
  }
  var len = s.length;
  var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
  var d = Caml_int64.of_int32(parse_digit(c));
  if (Caml_int64.lt(d, /* int64 */[
          /* hi */0,
          /* lo */0
        ]) || Caml_int64.ge(d, base)) {
    throw [
          Caml_builtin_exceptions.failure,
          "int64_of_string"
        ];
  }
  var aux = function (_acc, _k) {
    while(true) {
      var k = _k;
      var acc = _acc;
      if (k === len) {
        return acc;
      } else {
        var a = s.charCodeAt(k);
        if (a === /* "_" */95) {
          _k = k + 1 | 0;
          continue ;
        } else {
          var v = Caml_int64.of_int32(parse_digit(a));
          if (Caml_int64.lt(v, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ]) || Caml_int64.ge(v, base) || Caml_int64.gt(acc, threshold)) {
            throw [
                  Caml_builtin_exceptions.failure,
                  "int64_of_string"
                ];
          } else {
            var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);
            _k = k + 1 | 0;
            _acc = acc$1;
            continue ;
          }
        }
      }
    };
  };
  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));
  var or_res = Caml_int64.or_(res, /* int64 */[
        /* hi */0,
        /* lo */0
      ]);
  if (Caml_int64.eq(base, /* int64 */[
          /* hi */0,
          /* lo */10
        ]) && Caml_int64.neq(res, or_res)) {
    throw [
          Caml_builtin_exceptions.failure,
          "int64_of_string"
        ];
  }
  return or_res;
}

function int_of_base(param) {
  switch (param) {
    case 0 : 
        return 8;
    case 1 : 
        return 16;
    case 2 : 
        return 10;
    
  }
}

function lowercase(c) {
  if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
    return c + 32 | 0;
  } else {
    return c;
  }
}

function parse_format(fmt) {
  var len = fmt.length;
  if (len > 31) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "format_int: format too long"
        ];
  }
  var f = /* record */[
    /* justify */"+",
    /* signstyle */"-",
    /* filter */" ",
    /* alternate */false,
    /* base : Dec */2,
    /* signedconv */false,
    /* width */0,
    /* uppercase */false,
    /* sign */1,
    /* prec */-1,
    /* conv */"f"
  ];
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= len) {
      return f;
    } else {
      var c = fmt.charCodeAt(i);
      var exit = 0;
      if (c >= 69) {
        if (c >= 88) {
          if (c >= 121) {
            exit = 1;
          } else {
            switch (c - 88 | 0) {
              case 0 : 
                  f[/* base */4] = /* Hex */1;
                  f[/* uppercase */7] = true;
                  _i = i + 1 | 0;
                  continue ;
              case 13 : 
              case 14 : 
              case 15 : 
                  exit = 5;
                  break;
              case 12 : 
              case 17 : 
                  exit = 4;
                  break;
              case 23 : 
                  f[/* base */4] = /* Oct */0;
                  _i = i + 1 | 0;
                  continue ;
              case 29 : 
                  f[/* base */4] = /* Dec */2;
                  _i = i + 1 | 0;
                  continue ;
              case 1 : 
              case 2 : 
              case 3 : 
              case 4 : 
              case 5 : 
              case 6 : 
              case 7 : 
              case 8 : 
              case 9 : 
              case 10 : 
              case 11 : 
              case 16 : 
              case 18 : 
              case 19 : 
              case 20 : 
              case 21 : 
              case 22 : 
              case 24 : 
              case 25 : 
              case 26 : 
              case 27 : 
              case 28 : 
              case 30 : 
              case 31 : 
                  exit = 1;
                  break;
              case 32 : 
                  f[/* base */4] = /* Hex */1;
                  _i = i + 1 | 0;
                  continue ;
              
            }
          }
        } else if (c >= 72) {
          exit = 1;
        } else {
          f[/* signedconv */5] = true;
          f[/* uppercase */7] = true;
          f[/* conv */10] = String.fromCharCode(lowercase(c));
          _i = i + 1 | 0;
          continue ;
        }
      } else {
        switch (c) {
          case 35 : 
              f[/* alternate */3] = true;
              _i = i + 1 | 0;
              continue ;
          case 32 : 
          case 43 : 
              exit = 2;
              break;
          case 45 : 
              f[/* justify */0] = "-";
              _i = i + 1 | 0;
              continue ;
          case 46 : 
              f[/* prec */9] = 0;
              var j = i + 1 | 0;
              while((function(j){
                  return function () {
                    var w = fmt.charCodeAt(j) - /* "0" */48 | 0;
                    return w >= 0 && w <= 9;
                  }
                  }(j))()) {
                f[/* prec */9] = (Caml_int32.imul(f[/* prec */9], 10) + fmt.charCodeAt(j) | 0) - /* "0" */48 | 0;
                j = j + 1 | 0;
              };
              _i = j;
              continue ;
          case 33 : 
          case 34 : 
          case 36 : 
          case 37 : 
          case 38 : 
          case 39 : 
          case 40 : 
          case 41 : 
          case 42 : 
          case 44 : 
          case 47 : 
              exit = 1;
              break;
          case 48 : 
              f[/* filter */2] = "0";
              _i = i + 1 | 0;
              continue ;
          case 49 : 
          case 50 : 
          case 51 : 
          case 52 : 
          case 53 : 
          case 54 : 
          case 55 : 
          case 56 : 
          case 57 : 
              exit = 3;
              break;
          default:
            exit = 1;
        }
      }
      switch (exit) {
        case 1 : 
            _i = i + 1 | 0;
            continue ;
        case 2 : 
            f[/* signstyle */1] = String.fromCharCode(c);
            _i = i + 1 | 0;
            continue ;
        case 3 : 
            f[/* width */6] = 0;
            var j$1 = i;
            while((function(j$1){
                return function () {
                  var w = fmt.charCodeAt(j$1) - /* "0" */48 | 0;
                  return w >= 0 && w <= 9;
                }
                }(j$1))()) {
              f[/* width */6] = (Caml_int32.imul(f[/* width */6], 10) + fmt.charCodeAt(j$1) | 0) - /* "0" */48 | 0;
              j$1 = j$1 + 1 | 0;
            };
            _i = j$1;
            continue ;
        case 4 : 
            f[/* signedconv */5] = true;
            f[/* base */4] = /* Dec */2;
            _i = i + 1 | 0;
            continue ;
        case 5 : 
            f[/* signedconv */5] = true;
            f[/* conv */10] = String.fromCharCode(c);
            _i = i + 1 | 0;
            continue ;
        
      }
    }
  };
}

function finish_formatting(config, rawbuffer) {
  var justify = config[/* justify */0];
  var signstyle = config[/* signstyle */1];
  var filter = config[/* filter */2];
  var alternate = config[/* alternate */3];
  var base = config[/* base */4];
  var signedconv = config[/* signedconv */5];
  var width = config[/* width */6];
  var uppercase = config[/* uppercase */7];
  var sign = config[/* sign */8];
  var len = rawbuffer.length;
  if (signedconv && (sign < 0 || signstyle !== "-")) {
    len = len + 1 | 0;
  }
  if (alternate) {
    if (base === /* Oct */0) {
      len = len + 1 | 0;
    } else if (base === /* Hex */1) {
      len = len + 2 | 0;
    }
    
  }
  var buffer = "";
  if (justify === "+" && filter === " ") {
    for(var i = len ,i_finish = width - 1 | 0; i <= i_finish; ++i){
      buffer = buffer + filter;
    }
  }
  if (signedconv) {
    if (sign < 0) {
      buffer = buffer + "-";
    } else if (signstyle !== "-") {
      buffer = buffer + signstyle;
    }
    
  }
  if (alternate && base === /* Oct */0) {
    buffer = buffer + "0";
  }
  if (alternate && base === /* Hex */1) {
    buffer = buffer + "0x";
  }
  if (justify === "+" && filter === "0") {
    for(var i$1 = len ,i_finish$1 = width - 1 | 0; i$1 <= i_finish$1; ++i$1){
      buffer = buffer + filter;
    }
  }
  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;
  if (justify === "-") {
    for(var i$2 = len ,i_finish$2 = width - 1 | 0; i$2 <= i_finish$2; ++i$2){
      buffer = buffer + " ";
    }
  }
  return buffer;
}

function caml_format_int(fmt, i) {
  if (fmt === "%d") {
    return String(i);
  } else {
    var f = parse_format(fmt);
    var f$1 = f;
    var i$1 = i;
    var i$2 = i$1 < 0 ? (
        f$1[/* signedconv */5] ? (f$1[/* sign */8] = -1, -i$1) : (i$1 >>> 0)
      ) : i$1;
    var s = i$2.toString(int_of_base(f$1[/* base */4]));
    if (f$1[/* prec */9] >= 0) {
      f$1[/* filter */2] = " ";
      var n = f$1[/* prec */9] - s.length | 0;
      if (n > 0) {
        s = Caml_utils.repeat(n, "0") + s;
      }
      
    }
    return finish_formatting(f$1, s);
  }
}

function caml_int64_format(fmt, x) {
  var f = parse_format(fmt);
  var x$1 = f[/* signedconv */5] && Caml_int64.lt(x, /* int64 */[
        /* hi */0,
        /* lo */0
      ]) ? (f[/* sign */8] = -1, Caml_int64.neg(x)) : x;
  var s = "";
  var match = f[/* base */4];
  switch (match) {
    case 0 : 
        var wbase = /* int64 */[
          /* hi */0,
          /* lo */8
        ];
        var cvtbl = "01234567";
        if (Caml_int64.lt(x$1, /* int64 */[
                /* hi */0,
                /* lo */0
              ])) {
          var y = Caml_int64.discard_sign(x$1);
          var match$1 = Caml_int64.div_mod(y, wbase);
          var quotient = Caml_int64.add(/* int64 */[
                /* hi */268435456,
                /* lo */0
              ], match$1[0]);
          var modulus = match$1[1];
          s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;
          while(Caml_int64.neq(quotient, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var match$2 = Caml_int64.div_mod(quotient, wbase);
            quotient = match$2[0];
            modulus = match$2[1];
            s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;
          };
        } else {
          var match$3 = Caml_int64.div_mod(x$1, wbase);
          var quotient$1 = match$3[0];
          var modulus$1 = match$3[1];
          s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;
          while(Caml_int64.neq(quotient$1, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var match$4 = Caml_int64.div_mod(quotient$1, wbase);
            quotient$1 = match$4[0];
            modulus$1 = match$4[1];
            s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;
          };
        }
        break;
    case 1 : 
        s = Caml_int64.to_hex(x$1) + s;
        break;
    case 2 : 
        var wbase$1 = /* int64 */[
          /* hi */0,
          /* lo */10
        ];
        var cvtbl$1 = "0123456789";
        if (Caml_int64.lt(x$1, /* int64 */[
                /* hi */0,
                /* lo */0
              ])) {
          var y$1 = Caml_int64.discard_sign(x$1);
          var match$5 = Caml_int64.div_mod(y$1, wbase$1);
          var match$6 = Caml_int64.div_mod(Caml_int64.add(/* int64 */[
                    /* hi */0,
                    /* lo */8
                  ], match$5[1]), wbase$1);
          var quotient$2 = Caml_int64.add(Caml_int64.add(/* int64 */[
                    /* hi */214748364,
                    /* lo */3435973836
                  ], match$5[0]), match$6[0]);
          var modulus$2 = match$6[1];
          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;
          while(Caml_int64.neq(quotient$2, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var match$7 = Caml_int64.div_mod(quotient$2, wbase$1);
            quotient$2 = match$7[0];
            modulus$2 = match$7[1];
            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;
          };
        } else {
          var match$8 = Caml_int64.div_mod(x$1, wbase$1);
          var quotient$3 = match$8[0];
          var modulus$3 = match$8[1];
          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;
          while(Caml_int64.neq(quotient$3, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var match$9 = Caml_int64.div_mod(quotient$3, wbase$1);
            quotient$3 = match$9[0];
            modulus$3 = match$9[1];
            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;
          };
        }
        break;
    
  }
  if (f[/* prec */9] >= 0) {
    f[/* filter */2] = " ";
    var n = f[/* prec */9] - s.length | 0;
    if (n > 0) {
      s = Caml_utils.repeat(n, "0") + s;
    }
    
  }
  return finish_formatting(f, s);
}

function caml_format_float(fmt, x) {
  var f = parse_format(fmt);
  var prec = f[/* prec */9] < 0 ? 6 : f[/* prec */9];
  var x$1 = x < 0 ? (f[/* sign */8] = -1, -x) : x;
  var s = "";
  if (isNaN(x$1)) {
    s = "nan";
    f[/* filter */2] = " ";
  } else if (isFinite(x$1)) {
    var match = f[/* conv */10];
    switch (match) {
      case "e" : 
          s = x$1.toExponential(prec);
          var i = s.length;
          if (s[i - 3 | 0] === "e") {
            s = s.slice(0, i - 1 | 0) + ("0" + s.slice(i - 1 | 0));
          }
          break;
      case "f" : 
          s = x$1.toFixed(prec);
          break;
      case "g" : 
          var prec$1 = prec !== 0 ? prec : 1;
          s = x$1.toExponential(prec$1 - 1 | 0);
          var j = s.indexOf("e");
          var exp = Number(s.slice(j + 1 | 0)) | 0;
          if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {
            var i$1 = j - 1 | 0;
            while(s[i$1] === "0") {
              i$1 = i$1 - 1 | 0;
            };
            if (s[i$1] === ".") {
              i$1 = i$1 - 1 | 0;
            }
            s = s.slice(0, i$1 + 1 | 0) + s.slice(j);
            var i$2 = s.length;
            if (s[i$2 - 3 | 0] === "e") {
              s = s.slice(0, i$2 - 1 | 0) + ("0" + s.slice(i$2 - 1 | 0));
            }
            
          } else {
            var p = prec$1;
            if (exp < 0) {
              p = p - (exp + 1 | 0) | 0;
              s = x$1.toFixed(p);
            } else {
              while((function () {
                      s = x$1.toFixed(p);
                      return s.length > (prec$1 + 1 | 0);
                    })()) {
                p = p - 1 | 0;
              };
            }
            if (p !== 0) {
              var k = s.length - 1 | 0;
              while(s[k] === "0") {
                k = k - 1 | 0;
              };
              if (s[k] === ".") {
                k = k - 1 | 0;
              }
              s = s.slice(0, k + 1 | 0);
            }
            
          }
          break;
      default:
        
    }
  } else {
    s = "inf";
    f[/* filter */2] = " ";
  }
  return finish_formatting(f, s);
}

var float_of_string = (
  function (s, caml_failwith) {
    var res = +s;
    if ((s.length > 0) && (res === res))
        return res;
    s = s.replace(/_/g, "");
    res = +s;
    if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) {
        return res;
    }
    ;
    if (/^ *0x[0-9a-f_]+p[+-]?[0-9_]+/i.test(s)) {
        var pidx = s.indexOf('p');
        pidx = (pidx == -1) ? s.indexOf('P') : pidx;
        var exp = +s.substring(pidx + 1);
        res = +s.substring(0, pidx);
        return res * Math.pow(2, exp);
    }
    if (/^\+?inf(inity)?$/i.test(s))
        return Infinity;
    if (/^-inf(inity)?$/i.test(s))
        return -Infinity;
    caml_failwith("float_of_string");
}

);

function caml_float_of_string(s) {
  return Curry._2(float_of_string, s, caml_failwith);
}

var caml_nativeint_format = caml_format_int;

var caml_int32_format = caml_format_int;

var caml_int32_of_string = caml_int_of_string;

var caml_nativeint_of_string = caml_int_of_string;

exports.caml_format_float = caml_format_float;
exports.caml_format_int = caml_format_int;
exports.caml_nativeint_format = caml_nativeint_format;
exports.caml_int32_format = caml_int32_format;
exports.caml_float_of_string = caml_float_of_string;
exports.caml_int64_format = caml_int64_format;
exports.caml_int_of_string = caml_int_of_string;
exports.caml_int32_of_string = caml_int32_of_string;
exports.caml_int64_of_string = caml_int64_of_string;
exports.caml_nativeint_of_string = caml_nativeint_of_string;
/* float_of_string Not a pure module */

},{"./caml_builtin_exceptions.js":37,"./caml_int32.js":42,"./caml_int64.js":43,"./caml_utils.js":50,"./curry.js":54}],42:[function(require,module,exports){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function div(x, y) {
  if (y === 0) {
    throw Caml_builtin_exceptions.division_by_zero;
  } else {
    return x / y | 0;
  }
}

function mod_(x, y) {
  if (y === 0) {
    throw Caml_builtin_exceptions.division_by_zero;
  } else {
    return x % y;
  }
}

function caml_bswap16(x) {
  return ((x & 255) << 8) | ((x & 65280) >>> 8);
}

function caml_int32_bswap(x) {
  return ((x & 255) << 24) | ((x & 65280) << 8) | ((x & 16711680) >>> 8) | ((x & 4278190080) >>> 24);
}

var imul = ( Math.imul || function (x,y) {
  y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; 
}
);

var caml_nativeint_bswap = caml_int32_bswap;

exports.div = div;
exports.mod_ = mod_;
exports.caml_bswap16 = caml_bswap16;
exports.caml_int32_bswap = caml_int32_bswap;
exports.caml_nativeint_bswap = caml_nativeint_bswap;
exports.imul = imul;
/* imul Not a pure module */

},{"./caml_builtin_exceptions.js":37}],43:[function(require,module,exports){
'use strict';

var Caml_int32 = require("./caml_int32.js");
var Caml_utils = require("./caml_utils.js");
var Caml_primitive = require("./caml_primitive.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

var min_int = /* record */[
  /* hi */-2147483648,
  /* lo */0
];

var max_int = /* record */[
  /* hi */2147483647,
  /* lo */1
];

var one = /* record */[
  /* hi */0,
  /* lo */1
];

var zero = /* record */[
  /* hi */0,
  /* lo */0
];

var neg_one = /* record */[
  /* hi */-1,
  /* lo */4294967295
];

function neg_signed(x) {
  return (x & 2147483648) !== 0;
}

function add(param, param$1) {
  var other_low_ = param$1[/* lo */1];
  var this_low_ = param[/* lo */1];
  var lo = this_low_ + other_low_ & 4294967295;
  var overflow = neg_signed(this_low_) && (neg_signed(other_low_) || !neg_signed(lo)) || neg_signed(other_low_) && !neg_signed(lo) ? 1 : 0;
  var hi = param[/* hi */0] + param$1[/* hi */0] + overflow & 4294967295;
  return /* record */[
          /* hi */hi,
          /* lo */(lo >>> 0)
        ];
}

function not(param) {
  var hi = param[/* hi */0] ^ -1;
  var lo = param[/* lo */1] ^ -1;
  return /* record */[
          /* hi */hi,
          /* lo */(lo >>> 0)
        ];
}

function eq(x, y) {
  if (x[/* hi */0] === y[/* hi */0]) {
    return x[/* lo */1] === y[/* lo */1];
  } else {
    return false;
  }
}

function equal_null(x, y) {
  if (y !== null) {
    return eq(x, y);
  } else {
    return false;
  }
}

function equal_undefined(x, y) {
  if (y !== undefined) {
    return eq(x, y);
  } else {
    return false;
  }
}

function equal_nullable(x, y) {
  if (y == null) {
    return false;
  } else {
    return eq(x, y);
  }
}

function neg(x) {
  if (eq(x, min_int)) {
    return min_int;
  } else {
    return add(not(x), one);
  }
}

function sub(x, y) {
  return add(x, neg(y));
}

function lsl_(x, numBits) {
  if (numBits === 0) {
    return x;
  } else {
    var lo = x[/* lo */1];
    if (numBits >= 32) {
      return /* record */[
              /* hi */(lo << (numBits - 32 | 0)),
              /* lo */0
            ];
    } else {
      var hi = (lo >>> (32 - numBits | 0)) | (x[/* hi */0] << numBits);
      return /* record */[
              /* hi */hi,
              /* lo */((lo << numBits) >>> 0)
            ];
    }
  }
}

function lsr_(x, numBits) {
  if (numBits === 0) {
    return x;
  } else {
    var hi = x[/* hi */0];
    var offset = numBits - 32 | 0;
    if (offset === 0) {
      return /* record */[
              /* hi */0,
              /* lo */(hi >>> 0)
            ];
    } else if (offset > 0) {
      var lo = (hi >>> offset);
      return /* record */[
              /* hi */0,
              /* lo */(lo >>> 0)
            ];
    } else {
      var hi$1 = (hi >>> numBits);
      var lo$1 = (hi << (-offset | 0)) | (x[/* lo */1] >>> numBits);
      return /* record */[
              /* hi */hi$1,
              /* lo */(lo$1 >>> 0)
            ];
    }
  }
}

function asr_(x, numBits) {
  if (numBits === 0) {
    return x;
  } else {
    var hi = x[/* hi */0];
    if (numBits < 32) {
      var hi$1 = (hi >> numBits);
      var lo = (hi << (32 - numBits | 0)) | (x[/* lo */1] >>> numBits);
      return /* record */[
              /* hi */hi$1,
              /* lo */(lo >>> 0)
            ];
    } else {
      var lo$1 = (hi >> (numBits - 32 | 0));
      return /* record */[
              /* hi */hi >= 0 ? 0 : -1,
              /* lo */(lo$1 >>> 0)
            ];
    }
  }
}

function is_zero(param) {
  if (param[/* hi */0] !== 0 || param[/* lo */1] !== 0) {
    return false;
  } else {
    return true;
  }
}

function mul(_this, _other) {
  while(true) {
    var other = _other;
    var $$this = _this;
    var exit = 0;
    var lo;
    var this_hi = $$this[/* hi */0];
    var exit$1 = 0;
    var exit$2 = 0;
    var exit$3 = 0;
    if (this_hi !== 0 || $$this[/* lo */1] !== 0) {
      exit$3 = 4;
    } else {
      return zero;
    }
    if (exit$3 === 4) {
      if (other[/* hi */0] !== 0 || other[/* lo */1] !== 0) {
        exit$2 = 3;
      } else {
        return zero;
      }
    }
    if (exit$2 === 3) {
      if (this_hi !== -2147483648 || $$this[/* lo */1] !== 0) {
        exit$1 = 2;
      } else {
        lo = other[/* lo */1];
        exit = 1;
      }
    }
    if (exit$1 === 2) {
      var other_hi = other[/* hi */0];
      var lo$1 = $$this[/* lo */1];
      var exit$4 = 0;
      if (other_hi !== -2147483648 || other[/* lo */1] !== 0) {
        exit$4 = 3;
      } else {
        lo = lo$1;
        exit = 1;
      }
      if (exit$4 === 3) {
        var other_lo = other[/* lo */1];
        if (this_hi < 0) {
          if (other_hi < 0) {
            _other = neg(other);
            _this = neg($$this);
            continue ;
          } else {
            return neg(mul(neg($$this), other));
          }
        } else if (other_hi < 0) {
          return neg(mul($$this, neg(other)));
        } else {
          var a48 = (this_hi >>> 16);
          var a32 = this_hi & 65535;
          var a16 = (lo$1 >>> 16);
          var a00 = lo$1 & 65535;
          var b48 = (other_hi >>> 16);
          var b32 = other_hi & 65535;
          var b16 = (other_lo >>> 16);
          var b00 = other_lo & 65535;
          var c48 = 0;
          var c32 = 0;
          var c16 = 0;
          var c00 = a00 * b00;
          c16 = (c00 >>> 16) + a16 * b00;
          c32 = (c16 >>> 16);
          c16 = (c16 & 65535) + a00 * b16;
          c32 = c32 + (c16 >>> 16) + a32 * b00;
          c48 = (c32 >>> 16);
          c32 = (c32 & 65535) + a16 * b16;
          c48 += (c32 >>> 16);
          c32 = (c32 & 65535) + a00 * b32;
          c48 += (c32 >>> 16);
          c32 = c32 & 65535;
          c48 = c48 + (a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48) & 65535;
          var hi = c32 | (c48 << 16);
          var lo$2 = c00 & 65535 | ((c16 & 65535) << 16);
          return /* record */[
                  /* hi */hi,
                  /* lo */(lo$2 >>> 0)
                ];
        }
      }
      
    }
    if (exit === 1) {
      if ((lo & 1) === 0) {
        return zero;
      } else {
        return min_int;
      }
    }
    
  };
}

function swap(param) {
  var hi = Caml_int32.caml_int32_bswap(param[/* lo */1]);
  var lo = Caml_int32.caml_int32_bswap(param[/* hi */0]);
  return /* record */[
          /* hi */hi,
          /* lo */(lo >>> 0)
        ];
}

function xor(param, param$1) {
  return /* record */[
          /* hi */param[/* hi */0] ^ param$1[/* hi */0],
          /* lo */((param[/* lo */1] ^ param$1[/* lo */1]) >>> 0)
        ];
}

function or_(param, param$1) {
  return /* record */[
          /* hi */param[/* hi */0] | param$1[/* hi */0],
          /* lo */((param[/* lo */1] | param$1[/* lo */1]) >>> 0)
        ];
}

function and_(param, param$1) {
  return /* record */[
          /* hi */param[/* hi */0] & param$1[/* hi */0],
          /* lo */((param[/* lo */1] & param$1[/* lo */1]) >>> 0)
        ];
}

function ge(param, param$1) {
  var other_hi = param$1[/* hi */0];
  var hi = param[/* hi */0];
  if (hi > other_hi) {
    return true;
  } else if (hi < other_hi) {
    return false;
  } else {
    return param[/* lo */1] >= param$1[/* lo */1];
  }
}

function neq(x, y) {
  return !eq(x, y);
}

function lt(x, y) {
  return !ge(x, y);
}

function gt(x, y) {
  if (x[/* hi */0] > y[/* hi */0]) {
    return true;
  } else if (x[/* hi */0] < y[/* hi */0]) {
    return false;
  } else {
    return x[/* lo */1] > y[/* lo */1];
  }
}

function le(x, y) {
  return !gt(x, y);
}

function min(x, y) {
  if (ge(x, y)) {
    return y;
  } else {
    return x;
  }
}

function max(x, y) {
  if (gt(x, y)) {
    return x;
  } else {
    return y;
  }
}

function to_float(param) {
  return param[/* hi */0] * (0x100000000) + param[/* lo */1];
}

var two_ptr_32_dbl = Math.pow(2, 32);

var two_ptr_63_dbl = Math.pow(2, 63);

var neg_two_ptr_63 = -Math.pow(2, 63);

function of_float(x) {
  if (isNaN(x) || !isFinite(x)) {
    return zero;
  } else if (x <= neg_two_ptr_63) {
    return min_int;
  } else if (x + 1 >= two_ptr_63_dbl) {
    return max_int;
  } else if (x < 0) {
    return neg(of_float(-x));
  } else {
    var hi = x / two_ptr_32_dbl | 0;
    var lo = x % two_ptr_32_dbl | 0;
    return /* record */[
            /* hi */hi,
            /* lo */(lo >>> 0)
          ];
  }
}

function div(_self, _other) {
  while(true) {
    var other = _other;
    var self = _self;
    var self_hi = self[/* hi */0];
    var exit = 0;
    var exit$1 = 0;
    if (other[/* hi */0] !== 0 || other[/* lo */1] !== 0) {
      exit$1 = 2;
    } else {
      throw Caml_builtin_exceptions.division_by_zero;
    }
    if (exit$1 === 2) {
      if (self_hi !== -2147483648) {
        if (self_hi !== 0 || self[/* lo */1] !== 0) {
          exit = 1;
        } else {
          return zero;
        }
      } else if (self[/* lo */1] !== 0) {
        exit = 1;
      } else if (eq(other, one) || eq(other, neg_one)) {
        return self;
      } else if (eq(other, min_int)) {
        return one;
      } else {
        var other_hi = other[/* hi */0];
        var half_this = asr_(self, 1);
        var approx = lsl_(div(half_this, other), 1);
        var exit$2 = 0;
        if (approx[/* hi */0] !== 0 || approx[/* lo */1] !== 0) {
          exit$2 = 3;
        } else if (other_hi < 0) {
          return one;
        } else {
          return neg(one);
        }
        if (exit$2 === 3) {
          var y = mul(other, approx);
          var rem = add(self, neg(y));
          return add(approx, div(rem, other));
        }
        
      }
    }
    if (exit === 1) {
      var other_hi$1 = other[/* hi */0];
      var exit$3 = 0;
      if (other_hi$1 !== -2147483648 || other[/* lo */1] !== 0) {
        exit$3 = 2;
      } else {
        return zero;
      }
      if (exit$3 === 2) {
        if (self_hi < 0) {
          if (other_hi$1 < 0) {
            _other = neg(other);
            _self = neg(self);
            continue ;
          } else {
            return neg(div(neg(self), other));
          }
        } else if (other_hi$1 < 0) {
          return neg(div(self, neg(other)));
        } else {
          var res = zero;
          var rem$1 = self;
          while(ge(rem$1, other)) {
            var approx$1 = Caml_primitive.caml_float_max(1, Math.floor(to_float(rem$1) / to_float(other)));
            var log2 = Math.ceil(Math.log(approx$1) / Math.LN2);
            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
            var approxRes = of_float(approx$1);
            var approxRem = mul(approxRes, other);
            while(approxRem[/* hi */0] < 0 || gt(approxRem, rem$1)) {
              approx$1 -= delta;
              approxRes = of_float(approx$1);
              approxRem = mul(approxRes, other);
            };
            if (is_zero(approxRes)) {
              approxRes = one;
            }
            res = add(res, approxRes);
            rem$1 = add(rem$1, neg(approxRem));
          };
          return res;
        }
      }
      
    }
    
  };
}

function mod_(self, other) {
  var y = mul(div(self, other), other);
  return add(self, neg(y));
}

function div_mod(self, other) {
  var quotient = div(self, other);
  var y = mul(quotient, other);
  return /* tuple */[
          quotient,
          add(self, neg(y))
        ];
}

function compare(self, other) {
  var v = Caml_primitive.caml_nativeint_compare(self[/* hi */0], other[/* hi */0]);
  if (v === 0) {
    return Caml_primitive.caml_nativeint_compare(self[/* lo */1], other[/* lo */1]);
  } else {
    return v;
  }
}

function of_int32(lo) {
  return /* record */[
          /* hi */lo < 0 ? -1 : 0,
          /* lo */(lo >>> 0)
        ];
}

function to_int32(x) {
  return x[/* lo */1] | 0;
}

function to_hex(x) {
  var aux = function (v) {
    return (v >>> 0).toString(16);
  };
  var match = x[/* hi */0];
  var match$1 = x[/* lo */1];
  var exit = 0;
  if (match !== 0 || match$1 !== 0) {
    exit = 1;
  } else {
    return "0";
  }
  if (exit === 1) {
    if (match$1 !== 0) {
      if (match !== 0) {
        var lo = aux(x[/* lo */1]);
        var pad = 8 - lo.length | 0;
        if (pad <= 0) {
          return aux(x[/* hi */0]) + lo;
        } else {
          return aux(x[/* hi */0]) + (Caml_utils.repeat(pad, "0") + lo);
        }
      } else {
        return aux(x[/* lo */1]);
      }
    } else {
      return aux(x[/* hi */0]) + "00000000";
    }
  }
  
}

function discard_sign(x) {
  return /* record */[
          /* hi */2147483647 & x[/* hi */0],
          /* lo */x[/* lo */1]
        ];
}

function float_of_bits(x) {
  var int32 = new Int32Array(/* array */[
        x[/* lo */1],
        x[/* hi */0]
      ]);
  return new Float64Array(int32.buffer)[0];
}

function bits_of_float(x) {
  var u = new Float64Array(/* array */[x]);
  var int32 = new Int32Array(u.buffer);
  var x$1 = int32[1];
  var hi = x$1;
  var x$2 = int32[0];
  var lo = x$2;
  return /* record */[
          /* hi */hi,
          /* lo */(lo >>> 0)
        ];
}

function get64(s, i) {
  var hi = (s.charCodeAt(i + 4 | 0) << 32) | (s.charCodeAt(i + 5 | 0) << 40) | (s.charCodeAt(i + 6 | 0) << 48) | (s.charCodeAt(i + 7 | 0) << 56);
  var lo = s.charCodeAt(i) | (s.charCodeAt(i + 1 | 0) << 8) | (s.charCodeAt(i + 2 | 0) << 16) | (s.charCodeAt(i + 3 | 0) << 24);
  return /* record */[
          /* hi */hi,
          /* lo */(lo >>> 0)
        ];
}

exports.min_int = min_int;
exports.max_int = max_int;
exports.one = one;
exports.zero = zero;
exports.not = not;
exports.of_int32 = of_int32;
exports.to_int32 = to_int32;
exports.add = add;
exports.neg = neg;
exports.sub = sub;
exports.lsl_ = lsl_;
exports.lsr_ = lsr_;
exports.asr_ = asr_;
exports.is_zero = is_zero;
exports.mul = mul;
exports.xor = xor;
exports.or_ = or_;
exports.and_ = and_;
exports.swap = swap;
exports.ge = ge;
exports.eq = eq;
exports.neq = neq;
exports.lt = lt;
exports.gt = gt;
exports.le = le;
exports.equal_null = equal_null;
exports.equal_undefined = equal_undefined;
exports.equal_nullable = equal_nullable;
exports.min = min;
exports.max = max;
exports.to_float = to_float;
exports.of_float = of_float;
exports.div = div;
exports.mod_ = mod_;
exports.div_mod = div_mod;
exports.compare = compare;
exports.to_hex = to_hex;
exports.discard_sign = discard_sign;
exports.float_of_bits = float_of_bits;
exports.bits_of_float = bits_of_float;
exports.get64 = get64;
/* two_ptr_32_dbl Not a pure module */

},{"./caml_builtin_exceptions.js":37,"./caml_int32.js":42,"./caml_primitive.js":47,"./caml_utils.js":50}],44:[function(require,module,exports){
(function (process){
'use strict';

var Curry = require("./curry.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function $caret(prim, prim$1) {
  return prim + prim$1;
}

var stdout = /* record */[
  /* buffer */"",
  /* output */(function (param, s) {
      var v = s.length - 1 | 0;
      if (( (typeof process !== "undefined") && process.stdout && process.stdout.write)) {
        return ( process.stdout.write )(s);
      } else if (s[v] === "\n") {
        console.log(s.slice(0, v));
        return /* () */0;
      } else {
        console.log(s);
        return /* () */0;
      }
    })
];

var stderr = /* record */[
  /* buffer */"",
  /* output */(function (param, s) {
      var v = s.length - 1 | 0;
      if (s[v] === "\n") {
        console.log(s.slice(0, v));
        return /* () */0;
      } else {
        console.log(s);
        return /* () */0;
      }
    })
];

function caml_ml_open_descriptor_in(i) {
  throw [
        Caml_builtin_exceptions.failure,
        "caml_ml_open_descriptor_in not implemented"
      ];
}

function caml_ml_open_descriptor_out(i) {
  throw [
        Caml_builtin_exceptions.failure,
        "caml_ml_open_descriptor_out not implemented"
      ];
}

function caml_ml_flush(oc) {
  if (oc[/* buffer */0] !== "") {
    Curry._2(oc[/* output */1], oc, oc[/* buffer */0]);
    oc[/* buffer */0] = "";
    return /* () */0;
  } else {
    return 0;
  }
}

var node_std_output = (function (s){
   return (typeof process !== "undefined") && process.stdout && (process.stdout.write(s), true);
   }
);

function caml_ml_output(oc, str, offset, len) {
  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);
  if (( (typeof process !== "undefined") && process.stdout && process.stdout.write ) && oc === stdout) {
    return ( process.stdout.write )(str$1);
  } else {
    var id = str$1.lastIndexOf("\n");
    if (id < 0) {
      oc[/* buffer */0] = oc[/* buffer */0] + str$1;
      return /* () */0;
    } else {
      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(0, id + 1 | 0);
      caml_ml_flush(oc);
      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(id + 1 | 0);
      return /* () */0;
    }
  }
}

function caml_ml_output_char(oc, $$char) {
  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);
}

function caml_ml_input(ic, bytes, offset, len) {
  throw [
        Caml_builtin_exceptions.failure,
        "caml_ml_input ic not implemented"
      ];
}

function caml_ml_input_char(ic) {
  throw [
        Caml_builtin_exceptions.failure,
        "caml_ml_input_char not implemnted"
      ];
}

function caml_ml_out_channels_list(param) {
  return /* :: */[
          stdout,
          /* :: */[
            stderr,
            /* [] */0
          ]
        ];
}

var stdin = undefined;

exports.$caret = $caret;
exports.stdin = stdin;
exports.stdout = stdout;
exports.stderr = stderr;
exports.caml_ml_open_descriptor_in = caml_ml_open_descriptor_in;
exports.caml_ml_open_descriptor_out = caml_ml_open_descriptor_out;
exports.caml_ml_flush = caml_ml_flush;
exports.node_std_output = node_std_output;
exports.caml_ml_output = caml_ml_output;
exports.caml_ml_output_char = caml_ml_output_char;
exports.caml_ml_input = caml_ml_input;
exports.caml_ml_input_char = caml_ml_input_char;
exports.caml_ml_out_channels_list = caml_ml_out_channels_list;
/* node_std_output Not a pure module */

}).call(this,require('_process'))
},{"./caml_builtin_exceptions.js":37,"./curry.js":54,"_process":62}],45:[function(require,module,exports){
'use strict';


function not_implemented(s) {
  var str = s + " not implemented by BuckleScript yet\n";
  throw new Error(str);
}

exports.not_implemented = not_implemented;
/* No side effect */

},{}],46:[function(require,module,exports){
'use strict';

var Block = require("./block.js");
var Caml_primitive = require("./caml_primitive.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function caml_obj_block(tag, size) {
  var v = new Array(size);
  v.tag = tag;
  return v;
}

function caml_obj_dup(x) {
  var len = x.length | 0;
  var v = new Array(len);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    v[i] = x[i];
  }
  v.tag = x.tag | 0;
  return v;
}

function caml_obj_truncate(x, new_size) {
  var len = x.length | 0;
  if (new_size <= 0 || new_size > len) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Obj.truncate"
        ];
  } else if (len !== new_size) {
    for(var i = new_size ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      x[i] = 0;
    }
    x.length = new_size;
    return /* () */0;
  } else {
    return 0;
  }
}

function caml_lazy_make_forward(x) {
  return Block.__(250, [x]);
}

function caml_update_dummy(x, y) {
  var len = y.length | 0;
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    x[i] = y[i];
  }
  var y_tag = y.tag | 0;
  if (y_tag !== 0) {
    x.tag = y_tag;
    return /* () */0;
  } else {
    return 0;
  }
}

var for_in = function (o,foo){
        for (var x in o) { foo(x) }
      };

function caml_compare(_a, _b) {
  while(true) {
    var b = _b;
    var a = _a;
    if (a === b) {
      return 0;
    } else {
      var a_type = typeof a;
      var b_type = typeof b;
      var exit = 0;
      switch (a_type) {
        case "boolean" : 
            if (b_type === "boolean") {
              return Caml_primitive.caml_bool_compare(a, b);
            } else {
              exit = 1;
            }
            break;
        case "function" : 
            if (b_type === "function") {
              throw [
                    Caml_builtin_exceptions.invalid_argument,
                    "compare: functional value"
                  ];
            } else {
              exit = 1;
            }
            break;
        case "number" : 
            if (b_type === "number") {
              return Caml_primitive.caml_int_compare(a, b);
            } else {
              exit = 1;
            }
            break;
        case "string" : 
            if (b_type === "string") {
              return Caml_primitive.caml_string_compare(a, b);
            } else {
              return 1;
            }
        case "undefined" : 
            return -1;
        default:
          exit = 1;
      }
      if (exit === 1) {
        switch (b_type) {
          case "string" : 
              return -1;
          case "undefined" : 
              return 1;
          default:
            if (a_type === "boolean") {
              return 1;
            } else if (b_type === "boolean") {
              return -1;
            } else if (a_type === "function") {
              return 1;
            } else if (b_type === "function") {
              return -1;
            } else if (a_type === "number") {
              if (b === null || b.tag === 256) {
                return 1;
              } else {
                return -1;
              }
            } else if (b_type === "number") {
              if (a === null || a.tag === 256) {
                return -1;
              } else {
                return 1;
              }
            } else if (a === null) {
              if (b.tag === 256) {
                return 1;
              } else {
                return -1;
              }
            } else if (b === null) {
              if (a.tag === 256) {
                return -1;
              } else {
                return 1;
              }
            } else {
              var tag_a = a.tag | 0;
              var tag_b = b.tag | 0;
              if (tag_a === 250) {
                _a = a[0];
                continue ;
              } else if (tag_b === 250) {
                _b = b[0];
                continue ;
              } else if (tag_a === 256) {
                if (tag_b === 256) {
                  return Caml_primitive.caml_int_compare(a[1], b[1]);
                } else {
                  return -1;
                }
              } else if (tag_a === 248) {
                return Caml_primitive.caml_int_compare(a[1], b[1]);
              } else if (tag_a === 251) {
                throw [
                      Caml_builtin_exceptions.invalid_argument,
                      "equal: abstract value"
                    ];
              } else if (tag_a !== tag_b) {
                if (tag_a < tag_b) {
                  return -1;
                } else {
                  return 1;
                }
              } else {
                var len_a = a.length | 0;
                var len_b = b.length | 0;
                if (len_a === len_b) {
                  if (Array.isArray(a)) {
                    var a$1 = a;
                    var b$1 = b;
                    var _i = 0;
                    var same_length = len_a;
                    while(true) {
                      var i = _i;
                      if (i === same_length) {
                        return 0;
                      } else {
                        var res = caml_compare(a$1[i], b$1[i]);
                        if (res !== 0) {
                          return res;
                        } else {
                          _i = i + 1 | 0;
                          continue ;
                        }
                      }
                    };
                  } else {
                    var a$2 = a;
                    var b$2 = b;
                    var min_key_lhs = /* record */[/* contents */undefined];
                    var min_key_rhs = /* record */[/* contents */undefined];
                    var do_key = function (param, key) {
                      var min_key = param[2];
                      var b = param[1];
                      if (!b.hasOwnProperty(key) || caml_compare(param[0][key], b[key]) > 0) {
                        var match = min_key[0];
                        if (match !== undefined && key >= match) {
                          return 0;
                        } else {
                          min_key[0] = key;
                          return /* () */0;
                        }
                      } else {
                        return 0;
                      }
                    };
                    var partial_arg = /* tuple */[
                      a$2,
                      b$2,
                      min_key_rhs
                    ];
                    var do_key_a = (function(partial_arg){
                    return function do_key_a(param) {
                      return do_key(partial_arg, param);
                    }
                    }(partial_arg));
                    var partial_arg$1 = /* tuple */[
                      b$2,
                      a$2,
                      min_key_lhs
                    ];
                    var do_key_b = (function(partial_arg$1){
                    return function do_key_b(param) {
                      return do_key(partial_arg$1, param);
                    }
                    }(partial_arg$1));
                    for_in(a$2, do_key_a);
                    for_in(b$2, do_key_b);
                    var match = min_key_lhs[0];
                    var match$1 = min_key_rhs[0];
                    if (match !== undefined) {
                      if (match$1 !== undefined) {
                        return Caml_primitive.caml_string_compare(match, match$1);
                      } else {
                        return -1;
                      }
                    } else if (match$1 !== undefined) {
                      return 1;
                    } else {
                      return 0;
                    }
                  }
                } else if (len_a < len_b) {
                  var a$3 = a;
                  var b$3 = b;
                  var _i$1 = 0;
                  var short_length = len_a;
                  while(true) {
                    var i$1 = _i$1;
                    if (i$1 === short_length) {
                      return -1;
                    } else {
                      var res$1 = caml_compare(a$3[i$1], b$3[i$1]);
                      if (res$1 !== 0) {
                        return res$1;
                      } else {
                        _i$1 = i$1 + 1 | 0;
                        continue ;
                      }
                    }
                  };
                } else {
                  var a$4 = a;
                  var b$4 = b;
                  var _i$2 = 0;
                  var short_length$1 = len_b;
                  while(true) {
                    var i$2 = _i$2;
                    if (i$2 === short_length$1) {
                      return 1;
                    } else {
                      var res$2 = caml_compare(a$4[i$2], b$4[i$2]);
                      if (res$2 !== 0) {
                        return res$2;
                      } else {
                        _i$2 = i$2 + 1 | 0;
                        continue ;
                      }
                    }
                  };
                }
              }
            }
        }
      }
      
    }
  };
}

function caml_equal(_a, _b) {
  while(true) {
    var b = _b;
    var a = _a;
    if (a === b) {
      return true;
    } else {
      var a_type = typeof a;
      if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a === null) {
        return false;
      } else {
        var b_type = typeof b;
        if (a_type === "function" || b_type === "function") {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "equal: functional value"
              ];
        } else if (b_type === "number" || b_type === "undefined" || b === null) {
          return false;
        } else {
          var tag_a = a.tag | 0;
          var tag_b = b.tag | 0;
          if (tag_a === 250) {
            _a = a[0];
            continue ;
          } else if (tag_b === 250) {
            _b = b[0];
            continue ;
          } else if (tag_a === 248) {
            return a[1] === b[1];
          } else if (tag_a === 251) {
            throw [
                  Caml_builtin_exceptions.invalid_argument,
                  "equal: abstract value"
                ];
          } else if (tag_a !== tag_b) {
            return false;
          } else if (tag_a === 256) {
            return a[1] === b[1];
          } else {
            var len_a = a.length | 0;
            var len_b = b.length | 0;
            if (len_a === len_b) {
              if (Array.isArray(a)) {
                var a$1 = a;
                var b$1 = b;
                var _i = 0;
                var same_length = len_a;
                while(true) {
                  var i = _i;
                  if (i === same_length) {
                    return true;
                  } else if (caml_equal(a$1[i], b$1[i])) {
                    _i = i + 1 | 0;
                    continue ;
                  } else {
                    return false;
                  }
                };
              } else {
                var a$2 = a;
                var b$2 = b;
                var result = /* record */[/* contents */true];
                var do_key_a = (function(b$2,result){
                return function do_key_a(key) {
                  if (b$2.hasOwnProperty(key)) {
                    return 0;
                  } else {
                    result[0] = false;
                    return /* () */0;
                  }
                }
                }(b$2,result));
                var do_key_b = (function(a$2,b$2,result){
                return function do_key_b(key) {
                  if (!a$2.hasOwnProperty(key) || !caml_equal(b$2[key], a$2[key])) {
                    result[0] = false;
                    return /* () */0;
                  } else {
                    return 0;
                  }
                }
                }(a$2,b$2,result));
                for_in(a$2, do_key_a);
                if (result[0]) {
                  for_in(b$2, do_key_b);
                }
                return result[0];
              }
            } else {
              return false;
            }
          }
        }
      }
    }
  };
}

function caml_equal_null(x, y) {
  if (y !== null) {
    return caml_equal(x, y);
  } else {
    return x === y;
  }
}

function caml_equal_undefined(x, y) {
  if (y !== undefined) {
    return caml_equal(x, y);
  } else {
    return x === y;
  }
}

function caml_equal_nullable(x, y) {
  if (y == null) {
    return x === y;
  } else {
    return caml_equal(x, y);
  }
}

function caml_notequal(a, b) {
  return !caml_equal(a, b);
}

function caml_greaterequal(a, b) {
  return caml_compare(a, b) >= 0;
}

function caml_greaterthan(a, b) {
  return caml_compare(a, b) > 0;
}

function caml_lessequal(a, b) {
  return caml_compare(a, b) <= 0;
}

function caml_lessthan(a, b) {
  return caml_compare(a, b) < 0;
}

function caml_min(x, y) {
  if (caml_compare(x, y) <= 0) {
    return x;
  } else {
    return y;
  }
}

function caml_max(x, y) {
  if (caml_compare(x, y) >= 0) {
    return x;
  } else {
    return y;
  }
}

function caml_obj_set_tag(prim, prim$1) {
  prim.tag = prim$1;
  return /* () */0;
}

exports.caml_obj_block = caml_obj_block;
exports.caml_obj_dup = caml_obj_dup;
exports.caml_obj_truncate = caml_obj_truncate;
exports.caml_lazy_make_forward = caml_lazy_make_forward;
exports.caml_update_dummy = caml_update_dummy;
exports.caml_compare = caml_compare;
exports.caml_equal = caml_equal;
exports.caml_equal_null = caml_equal_null;
exports.caml_equal_undefined = caml_equal_undefined;
exports.caml_equal_nullable = caml_equal_nullable;
exports.caml_notequal = caml_notequal;
exports.caml_greaterequal = caml_greaterequal;
exports.caml_greaterthan = caml_greaterthan;
exports.caml_lessthan = caml_lessthan;
exports.caml_lessequal = caml_lessequal;
exports.caml_min = caml_min;
exports.caml_max = caml_max;
exports.caml_obj_set_tag = caml_obj_set_tag;
/* No side effect */

},{"./block.js":33,"./caml_builtin_exceptions.js":37,"./caml_primitive.js":47}],47:[function(require,module,exports){
'use strict';


function caml_int_compare(x, y) {
  if (x < y) {
    return -1;
  } else if (x === y) {
    return 0;
  } else {
    return 1;
  }
}

function caml_bool_compare(x, y) {
  if (x) {
    if (y) {
      return 0;
    } else {
      return 1;
    }
  } else if (y) {
    return -1;
  } else {
    return 0;
  }
}

function caml_float_compare(x, y) {
  if (x === y) {
    return 0;
  } else if (x < y) {
    return -1;
  } else if (x > y || x === x) {
    return 1;
  } else if (y === y) {
    return -1;
  } else {
    return 0;
  }
}

function caml_string_compare(s1, s2) {
  if (s1 === s2) {
    return 0;
  } else if (s1 < s2) {
    return -1;
  } else {
    return 1;
  }
}

function caml_bytes_compare_aux(s1, s2, _off, len, def) {
  while(true) {
    var off = _off;
    if (off < len) {
      var a = s1[off];
      var b = s2[off];
      if (a > b) {
        return 1;
      } else if (a < b) {
        return -1;
      } else {
        _off = off + 1 | 0;
        continue ;
      }
    } else {
      return def;
    }
  };
}

function caml_bytes_compare(s1, s2) {
  var len1 = s1.length;
  var len2 = s2.length;
  if (len1 === len2) {
    return caml_bytes_compare_aux(s1, s2, 0, len1, 0);
  } else if (len1 < len2) {
    return caml_bytes_compare_aux(s1, s2, 0, len1, -1);
  } else {
    return caml_bytes_compare_aux(s1, s2, 0, len2, 1);
  }
}

function caml_bool_min(x, y) {
  if (x) {
    return y;
  } else {
    return x;
  }
}

function caml_int_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_float_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_string_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_nativeint_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_int32_min(x, y) {
  if (x < y) {
    return x;
  } else {
    return y;
  }
}

function caml_bool_max(x, y) {
  if (x) {
    return x;
  } else {
    return y;
  }
}

function caml_int_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_float_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_string_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_nativeint_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

function caml_int32_max(x, y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

var caml_nativeint_compare = caml_int_compare;

var caml_int32_compare = caml_int_compare;

exports.caml_bytes_compare = caml_bytes_compare;
exports.caml_int_compare = caml_int_compare;
exports.caml_bool_compare = caml_bool_compare;
exports.caml_float_compare = caml_float_compare;
exports.caml_nativeint_compare = caml_nativeint_compare;
exports.caml_string_compare = caml_string_compare;
exports.caml_int32_compare = caml_int32_compare;
exports.caml_bool_min = caml_bool_min;
exports.caml_int_min = caml_int_min;
exports.caml_float_min = caml_float_min;
exports.caml_string_min = caml_string_min;
exports.caml_nativeint_min = caml_nativeint_min;
exports.caml_int32_min = caml_int32_min;
exports.caml_bool_max = caml_bool_max;
exports.caml_int_max = caml_int_max;
exports.caml_float_max = caml_float_max;
exports.caml_string_max = caml_string_max;
exports.caml_nativeint_max = caml_nativeint_max;
exports.caml_int32_max = caml_int32_max;
/* No side effect */

},{}],48:[function(require,module,exports){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function string_of_char(prim) {
  return String.fromCharCode(prim);
}

function caml_string_get(s, i) {
  if (i >= s.length || i < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    return s.charCodeAt(i);
  }
}

function caml_create_string(len) {
  if (len < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "String.create"
        ];
  } else {
    var result = new Array(len);
    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      result[i] = /* "\000" */0;
    }
    return result;
  }
}

function caml_fill_string(s, i, l, c) {
  if (l > 0) {
    for(var k = i ,k_finish = (l + i | 0) - 1 | 0; k <= k_finish; ++k){
      s[k] = c;
    }
    return /* () */0;
  } else {
    return 0;
  }
}

function caml_blit_string(s1, i1, s2, i2, len) {
  if (len > 0) {
    var off1 = s1.length - i1 | 0;
    if (len <= off1) {
      for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
        s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);
      }
      return /* () */0;
    } else {
      for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){
        s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);
      }
      for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){
        s2[i2 + i$2 | 0] = /* "\000" */0;
      }
      return /* () */0;
    }
  } else {
    return 0;
  }
}

function caml_blit_bytes(s1, i1, s2, i2, len) {
  if (len > 0) {
    if (s1 === s2) {
      var s1$1 = s1;
      var i1$1 = i1;
      var i2$1 = i2;
      var len$1 = len;
      if (i1$1 < i2$1) {
        var range_a = (s1$1.length - i2$1 | 0) - 1 | 0;
        var range_b = len$1 - 1 | 0;
        var range = range_a > range_b ? range_b : range_a;
        for(var j = range; j >= 0; --j){
          s1$1[i2$1 + j | 0] = s1$1[i1$1 + j | 0];
        }
        return /* () */0;
      } else if (i1$1 > i2$1) {
        var range_a$1 = (s1$1.length - i1$1 | 0) - 1 | 0;
        var range_b$1 = len$1 - 1 | 0;
        var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;
        for(var k = 0; k <= range$1; ++k){
          s1$1[i2$1 + k | 0] = s1$1[i1$1 + k | 0];
        }
        return /* () */0;
      } else {
        return 0;
      }
    } else {
      var off1 = s1.length - i1 | 0;
      if (len <= off1) {
        for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
          s2[i2 + i | 0] = s1[i1 + i | 0];
        }
        return /* () */0;
      } else {
        for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){
          s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];
        }
        for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){
          s2[i2 + i$2 | 0] = /* "\000" */0;
        }
        return /* () */0;
      }
    }
  } else {
    return 0;
  }
}

function bytes_of_string(s) {
  var len = s.length;
  var res = new Array(len);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    res[i] = s.charCodeAt(i);
  }
  return res;
}

function bytes_to_string(a) {
  var bytes = a;
  var i = 0;
  var len = a.length;
  var s = "";
  var s_len = len;
  if (i === 0 && len <= 4096 && len === bytes.length) {
    return String.fromCharCode.apply(null, bytes);
  } else {
    var offset = 0;
    while(s_len > 0) {
      var next = s_len < 1024 ? s_len : 1024;
      var tmp_bytes = new Array(next);
      caml_blit_bytes(bytes, offset, tmp_bytes, 0, next);
      s = s + String.fromCharCode.apply(null, tmp_bytes);
      s_len = s_len - next | 0;
      offset = offset + next | 0;
    };
    return s;
  }
}

function caml_string_of_char_array(chars) {
  var len = chars.length;
  var bytes = new Array(len);
  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
    bytes[i] = chars[i];
  }
  return bytes_to_string(bytes);
}

function caml_is_printable(c) {
  if (c > 31) {
    return c < 127;
  } else {
    return false;
  }
}

function caml_string_get16(s, i) {
  return s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0;
}

function caml_string_get32(s, i) {
  return ((s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0) + (s.charCodeAt(i + 2 | 0) << 16) | 0) + (s.charCodeAt(i + 3 | 0) << 24) | 0;
}

function get(s, i) {
  if (i < 0 || i >= s.length) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "index out of bounds"
        ];
  } else {
    return s.charCodeAt(i);
  }
}

exports.bytes_of_string = bytes_of_string;
exports.bytes_to_string = bytes_to_string;
exports.caml_is_printable = caml_is_printable;
exports.caml_string_of_char_array = caml_string_of_char_array;
exports.caml_string_get = caml_string_get;
exports.caml_create_string = caml_create_string;
exports.caml_fill_string = caml_fill_string;
exports.caml_blit_string = caml_blit_string;
exports.caml_blit_bytes = caml_blit_bytes;
exports.caml_string_get16 = caml_string_get16;
exports.caml_string_get32 = caml_string_get32;
exports.string_of_char = string_of_char;
exports.get = get;
/* No side effect */

},{"./caml_builtin_exceptions.js":37}],49:[function(require,module,exports){
(function (process){
'use strict';

var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function caml_sys_getenv(s) {
  var match = typeof (process) === "undefined" ? undefined : (process);
  if (match !== undefined) {
    var match$1 = match.env[s];
    if (match$1 !== undefined) {
      return match$1;
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function caml_sys_time(param) {
  var match = typeof (process) === "undefined" ? undefined : (process);
  if (match !== undefined) {
    return match.uptime();
  } else {
    return -1;
  }
}

function caml_sys_random_seed(param) {
  return /* array */[((Date.now() | 0) ^ 4294967295) * Math.random() | 0];
}

function caml_sys_system_command(_cmd) {
  return 127;
}

function caml_sys_getcwd(param) {
  var match = typeof (process) === "undefined" ? undefined : (process);
  if (match !== undefined) {
    return match.cwd();
  } else {
    return "/";
  }
}

function caml_sys_get_argv(param) {
  var match = typeof (process) === "undefined" ? undefined : (process);
  if (match !== undefined) {
    if (match.argv == null) {
      return /* tuple */[
              "",
              /* array */[""]
            ];
    } else {
      return /* tuple */[
              match.argv[0],
              match.argv
            ];
    }
  } else {
    return /* tuple */[
            "",
            /* array */[""]
          ];
  }
}

function caml_sys_exit(exit_code) {
  var match = typeof (process) === "undefined" ? undefined : (process);
  if (match !== undefined) {
    return match.exit(exit_code);
  } else {
    return /* () */0;
  }
}

function caml_sys_is_directory(_s) {
  throw [
        Caml_builtin_exceptions.failure,
        "caml_sys_is_directory not implemented"
      ];
}

function caml_sys_file_exists(_s) {
  throw [
        Caml_builtin_exceptions.failure,
        "caml_sys_file_exists not implemented"
      ];
}

exports.caml_sys_getenv = caml_sys_getenv;
exports.caml_sys_time = caml_sys_time;
exports.caml_sys_random_seed = caml_sys_random_seed;
exports.caml_sys_system_command = caml_sys_system_command;
exports.caml_sys_getcwd = caml_sys_getcwd;
exports.caml_sys_get_argv = caml_sys_get_argv;
exports.caml_sys_exit = caml_sys_exit;
exports.caml_sys_is_directory = caml_sys_is_directory;
exports.caml_sys_file_exists = caml_sys_file_exists;
/* No side effect */

}).call(this,require('_process'))
},{"./caml_builtin_exceptions.js":37,"_process":62}],50:[function(require,module,exports){
'use strict';


var repeat = ( (String.prototype.repeat && function (count,self){return self.repeat(count)}) ||
                                                  function(count , self) {
        if (self.length == 0 || count == 0) {
            return '';
        }
        // Ensuring count is a 31-bit integer allows us to heavily optimize the
        // main part. But anyway, most current (August 2014) browsers can't handle
        // strings 1 << 28 chars or longer, so:
        if (self.length * count >= 1 << 28) {
            throw new RangeError('repeat count must not overflow maximum string size');
        }
        var rpt = '';
        for (;;) {
            if ((count & 1) == 1) {
                rpt += self;
            }
            count >>>= 1;
            if (count == 0) {
                break;
            }
            self += self;
        }
        return rpt;
    }
);

exports.repeat = repeat;
/* repeat Not a pure module */

},{}],51:[function(require,module,exports){
'use strict';

var Char = require("./char.js");
var Block = require("./block.js");
var Bytes = require("./bytes.js");
var Curry = require("./curry.js");
var $$Buffer = require("./buffer.js");
var Js_exn = require("./js_exn.js");
var $$String = require("./string.js");
var Caml_io = require("./caml_io.js");
var Caml_obj = require("./caml_obj.js");
var Caml_bytes = require("./caml_bytes.js");
var Caml_float = require("./caml_float.js");
var Caml_int32 = require("./caml_int32.js");
var Pervasives = require("./pervasives.js");
var Caml_format = require("./caml_format.js");
var Caml_string = require("./caml_string.js");
var Caml_primitive = require("./caml_primitive.js");
var Caml_exceptions = require("./caml_exceptions.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");
var CamlinternalFormatBasics = require("./camlinternalFormatBasics.js");

function create_char_set(param) {
  return Bytes.make(32, /* "\000" */0);
}

function add_in_char_set(char_set, c) {
  var str_ind = (c >>> 3);
  var mask = (1 << (c & 7));
  char_set[str_ind] = Pervasives.char_of_int(Caml_bytes.get(char_set, str_ind) | mask);
  return /* () */0;
}

var freeze_char_set = Bytes.to_string;

function rev_char_set(char_set) {
  var char_set$prime = Bytes.make(32, /* "\000" */0);
  for(var i = 0; i <= 31; ++i){
    char_set$prime[i] = Pervasives.char_of_int(Caml_string.get(char_set, i) ^ 255);
  }
  return Caml_string.bytes_to_string(char_set$prime);
}

function is_in_char_set(char_set, c) {
  var str_ind = (c >>> 3);
  var mask = (1 << (c & 7));
  return (Caml_string.get(char_set, str_ind) & mask) !== 0;
}

function pad_of_pad_opt(pad_opt) {
  if (pad_opt !== undefined) {
    return /* Lit_padding */Block.__(0, [
              /* Right */1,
              pad_opt
            ]);
  } else {
    return /* No_padding */0;
  }
}

function prec_of_prec_opt(prec_opt) {
  if (prec_opt !== undefined) {
    return /* Lit_precision */[prec_opt];
  } else {
    return /* No_precision */0;
  }
}

function param_format_of_ignored_format(ign, fmt) {
  if (typeof ign === "number") {
    switch (ign) {
      case 0 : 
          return /* Param_format_EBB */[/* Char */Block.__(0, [fmt])];
      case 1 : 
          return /* Param_format_EBB */[/* Caml_char */Block.__(1, [fmt])];
      case 2 : 
          return /* Param_format_EBB */[/* Bool */Block.__(9, [fmt])];
      case 3 : 
          return /* Param_format_EBB */[/* Reader */Block.__(19, [fmt])];
      case 4 : 
          return /* Param_format_EBB */[/* Scan_next_char */Block.__(22, [fmt])];
      
    }
  } else {
    switch (ign.tag | 0) {
      case 0 : 
          return /* Param_format_EBB */[/* String */Block.__(2, [
                      pad_of_pad_opt(ign[0]),
                      fmt
                    ])];
      case 1 : 
          return /* Param_format_EBB */[/* Caml_string */Block.__(3, [
                      pad_of_pad_opt(ign[0]),
                      fmt
                    ])];
      case 2 : 
          return /* Param_format_EBB */[/* Int */Block.__(4, [
                      ign[0],
                      pad_of_pad_opt(ign[1]),
                      /* No_precision */0,
                      fmt
                    ])];
      case 3 : 
          return /* Param_format_EBB */[/* Int32 */Block.__(5, [
                      ign[0],
                      pad_of_pad_opt(ign[1]),
                      /* No_precision */0,
                      fmt
                    ])];
      case 4 : 
          return /* Param_format_EBB */[/* Nativeint */Block.__(6, [
                      ign[0],
                      pad_of_pad_opt(ign[1]),
                      /* No_precision */0,
                      fmt
                    ])];
      case 5 : 
          return /* Param_format_EBB */[/* Int64 */Block.__(7, [
                      ign[0],
                      pad_of_pad_opt(ign[1]),
                      /* No_precision */0,
                      fmt
                    ])];
      case 6 : 
          return /* Param_format_EBB */[/* Float */Block.__(8, [
                      /* Float_f */0,
                      pad_of_pad_opt(ign[0]),
                      prec_of_prec_opt(ign[1]),
                      fmt
                    ])];
      case 7 : 
          return /* Param_format_EBB */[/* Format_arg */Block.__(13, [
                      ign[0],
                      ign[1],
                      fmt
                    ])];
      case 8 : 
          return /* Param_format_EBB */[/* Format_subst */Block.__(14, [
                      ign[0],
                      ign[1],
                      fmt
                    ])];
      case 9 : 
          return /* Param_format_EBB */[/* Scan_char_set */Block.__(20, [
                      ign[0],
                      ign[1],
                      fmt
                    ])];
      case 10 : 
          return /* Param_format_EBB */[/* Scan_get_counter */Block.__(21, [
                      ign[0],
                      fmt
                    ])];
      
    }
  }
}

function buffer_check_size(buf, overhead) {
  var len = buf[/* bytes */1].length;
  var min_len = buf[/* ind */0] + overhead | 0;
  if (min_len > len) {
    var new_len = Caml_primitive.caml_int_max((len << 1), min_len);
    var new_str = Caml_string.caml_create_string(new_len);
    Bytes.blit(buf[/* bytes */1], 0, new_str, 0, len);
    buf[/* bytes */1] = new_str;
    return /* () */0;
  } else {
    return 0;
  }
}

function buffer_add_char(buf, c) {
  buffer_check_size(buf, 1);
  buf[/* bytes */1][buf[/* ind */0]] = c;
  buf[/* ind */0] = buf[/* ind */0] + 1 | 0;
  return /* () */0;
}

function buffer_add_string(buf, s) {
  var str_len = s.length;
  buffer_check_size(buf, str_len);
  $$String.blit(s, 0, buf[/* bytes */1], buf[/* ind */0], str_len);
  buf[/* ind */0] = buf[/* ind */0] + str_len | 0;
  return /* () */0;
}

function buffer_contents(buf) {
  return Bytes.sub_string(buf[/* bytes */1], 0, buf[/* ind */0]);
}

function char_of_iconv(iconv) {
  switch (iconv) {
    case 0 : 
    case 1 : 
    case 2 : 
        return /* "d" */100;
    case 3 : 
    case 4 : 
    case 5 : 
        return /* "i" */105;
    case 6 : 
    case 7 : 
        return /* "x" */120;
    case 8 : 
    case 9 : 
        return /* "X" */88;
    case 10 : 
    case 11 : 
        return /* "o" */111;
    case 12 : 
        return /* "u" */117;
    
  }
}

function char_of_fconv(fconv) {
  switch (fconv) {
    case 0 : 
    case 1 : 
    case 2 : 
        return /* "f" */102;
    case 3 : 
    case 4 : 
    case 5 : 
        return /* "e" */101;
    case 6 : 
    case 7 : 
    case 8 : 
        return /* "E" */69;
    case 9 : 
    case 10 : 
    case 11 : 
        return /* "g" */103;
    case 12 : 
    case 13 : 
    case 14 : 
        return /* "G" */71;
    case 15 : 
        return /* "F" */70;
    
  }
}

function char_of_counter(counter) {
  switch (counter) {
    case 0 : 
        return /* "l" */108;
    case 1 : 
        return /* "n" */110;
    case 2 : 
        return /* "N" */78;
    
  }
}

function bprint_char_set(buf, char_set) {
  var print_char = function (buf, i) {
    var c = Pervasives.char_of_int(i);
    if (c !== 37) {
      if (c !== 64) {
        return buffer_add_char(buf, c);
      } else {
        buffer_add_char(buf, /* "%" */37);
        return buffer_add_char(buf, /* "@" */64);
      }
    } else {
      buffer_add_char(buf, /* "%" */37);
      return buffer_add_char(buf, /* "%" */37);
    }
  };
  var print_out = function (set, _i) {
    while(true) {
      var i = _i;
      if (i < 256) {
        if (is_in_char_set(set, Pervasives.char_of_int(i))) {
          var set$1 = set;
          var i$1 = i;
          var match = Pervasives.char_of_int(i$1);
          var switcher = match - 45 | 0;
          if (switcher > 48 || switcher < 0) {
            if (switcher >= 210) {
              return print_char(buf, 255);
            } else {
              return print_second(set$1, i$1 + 1 | 0);
            }
          } else if (switcher > 47 || switcher < 1) {
            return print_out(set$1, i$1 + 1 | 0);
          } else {
            return print_second(set$1, i$1 + 1 | 0);
          }
        } else {
          _i = i + 1 | 0;
          continue ;
        }
      } else {
        return 0;
      }
    };
  };
  var print_second = function (set, i) {
    if (is_in_char_set(set, Pervasives.char_of_int(i))) {
      var match = Pervasives.char_of_int(i);
      var exit = 0;
      var switcher = match - 45 | 0;
      if (switcher > 48 || switcher < 0) {
        if (switcher >= 210) {
          print_char(buf, 254);
          return print_char(buf, 255);
        } else {
          exit = 1;
        }
      } else if ((switcher > 47 || switcher < 1) && !is_in_char_set(set, Pervasives.char_of_int(i + 1 | 0))) {
        print_char(buf, i - 1 | 0);
        return print_out(set, i + 1 | 0);
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (is_in_char_set(set, Pervasives.char_of_int(i + 1 | 0))) {
          var set$1 = set;
          var i$1 = i - 1 | 0;
          var _j = i + 2 | 0;
          while(true) {
            var j = _j;
            if (j === 256 || !is_in_char_set(set$1, Pervasives.char_of_int(j))) {
              print_char(buf, i$1);
              print_char(buf, /* "-" */45);
              print_char(buf, j - 1 | 0);
              if (j < 256) {
                return print_out(set$1, j + 1 | 0);
              } else {
                return 0;
              }
            } else {
              _j = j + 1 | 0;
              continue ;
            }
          };
        } else {
          print_char(buf, i - 1 | 0);
          print_char(buf, i);
          return print_out(set, i + 2 | 0);
        }
      }
      
    } else {
      print_char(buf, i - 1 | 0);
      return print_out(set, i + 1 | 0);
    }
  };
  var print_start = function (set) {
    var is_alone = function (c) {
      var before = Char.chr(c - 1 | 0);
      var after = Char.chr(c + 1 | 0);
      if (is_in_char_set(set, c)) {
        return !(is_in_char_set(set, before) && is_in_char_set(set, after));
      } else {
        return false;
      }
    };
    if (is_alone(/* "]" */93)) {
      buffer_add_char(buf, /* "]" */93);
    }
    print_out(set, 1);
    if (is_alone(/* "-" */45)) {
      return buffer_add_char(buf, /* "-" */45);
    } else {
      return 0;
    }
  };
  buffer_add_char(buf, /* "[" */91);
  print_start(is_in_char_set(char_set, /* "\000" */0) ? (buffer_add_char(buf, /* "^" */94), rev_char_set(char_set)) : char_set);
  return buffer_add_char(buf, /* "]" */93);
}

function bprint_padty(buf, padty) {
  switch (padty) {
    case 0 : 
        return buffer_add_char(buf, /* "-" */45);
    case 1 : 
        return /* () */0;
    case 2 : 
        return buffer_add_char(buf, /* "0" */48);
    
  }
}

function bprint_ignored_flag(buf, ign_flag) {
  if (ign_flag) {
    return buffer_add_char(buf, /* "_" */95);
  } else {
    return 0;
  }
}

function bprint_pad_opt(buf, pad_opt) {
  if (pad_opt !== undefined) {
    return buffer_add_string(buf, String(pad_opt));
  } else {
    return /* () */0;
  }
}

function bprint_padding(buf, pad) {
  if (typeof pad === "number") {
    return /* () */0;
  } else {
    bprint_padty(buf, pad[0]);
    if (pad.tag) {
      return buffer_add_char(buf, /* "*" */42);
    } else {
      return buffer_add_string(buf, String(pad[1]));
    }
  }
}

function bprint_precision(buf, prec) {
  if (typeof prec === "number") {
    if (prec !== 0) {
      return buffer_add_string(buf, ".*");
    } else {
      return /* () */0;
    }
  } else {
    buffer_add_char(buf, /* "." */46);
    return buffer_add_string(buf, String(prec[0]));
  }
}

function bprint_iconv_flag(buf, iconv) {
  switch (iconv) {
    case 1 : 
    case 4 : 
        return buffer_add_char(buf, /* "+" */43);
    case 2 : 
    case 5 : 
        return buffer_add_char(buf, /* " " */32);
    case 7 : 
    case 9 : 
    case 11 : 
        return buffer_add_char(buf, /* "#" */35);
    case 0 : 
    case 3 : 
    case 6 : 
    case 8 : 
    case 10 : 
    case 12 : 
        return /* () */0;
    
  }
}

function bprint_int_fmt(buf, ign_flag, iconv, pad, prec) {
  buffer_add_char(buf, /* "%" */37);
  bprint_ignored_flag(buf, ign_flag);
  bprint_iconv_flag(buf, iconv);
  bprint_padding(buf, pad);
  bprint_precision(buf, prec);
  return buffer_add_char(buf, char_of_iconv(iconv));
}

function bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c) {
  buffer_add_char(buf, /* "%" */37);
  bprint_ignored_flag(buf, ign_flag);
  bprint_iconv_flag(buf, iconv);
  bprint_padding(buf, pad);
  bprint_precision(buf, prec);
  buffer_add_char(buf, c);
  return buffer_add_char(buf, char_of_iconv(iconv));
}

function bprint_fconv_flag(buf, fconv) {
  switch (fconv) {
    case 1 : 
    case 4 : 
    case 7 : 
    case 10 : 
    case 13 : 
        return buffer_add_char(buf, /* "+" */43);
    case 2 : 
    case 5 : 
    case 8 : 
    case 11 : 
    case 14 : 
        return buffer_add_char(buf, /* " " */32);
    case 0 : 
    case 3 : 
    case 6 : 
    case 9 : 
    case 12 : 
    case 15 : 
        return /* () */0;
    
  }
}

function bprint_float_fmt(buf, ign_flag, fconv, pad, prec) {
  buffer_add_char(buf, /* "%" */37);
  bprint_ignored_flag(buf, ign_flag);
  bprint_fconv_flag(buf, fconv);
  bprint_padding(buf, pad);
  bprint_precision(buf, prec);
  return buffer_add_char(buf, char_of_fconv(fconv));
}

function string_of_formatting_lit(formatting_lit) {
  if (typeof formatting_lit === "number") {
    switch (formatting_lit) {
      case 0 : 
          return "@]";
      case 1 : 
          return "@}";
      case 2 : 
          return "@?";
      case 3 : 
          return "@\n";
      case 4 : 
          return "@.";
      case 5 : 
          return "@@";
      case 6 : 
          return "@%";
      
    }
  } else {
    switch (formatting_lit.tag | 0) {
      case 0 : 
      case 1 : 
          return formatting_lit[0];
      case 2 : 
          return "@" + Caml_string.bytes_to_string(Bytes.make(1, formatting_lit[0]));
      
    }
  }
}

function string_of_formatting_gen(formatting_gen) {
  return formatting_gen[0][1];
}

function bprint_char_literal(buf, chr) {
  if (chr !== 37) {
    return buffer_add_char(buf, chr);
  } else {
    return buffer_add_string(buf, "%%");
  }
}

function bprint_string_literal(buf, str) {
  for(var i = 0 ,i_finish = str.length - 1 | 0; i <= i_finish; ++i){
    bprint_char_literal(buf, Caml_string.get(str, i));
  }
  return /* () */0;
}

function bprint_fmtty(buf, _fmtty) {
  while(true) {
    var fmtty = _fmtty;
    if (typeof fmtty === "number") {
      return /* () */0;
    } else {
      switch (fmtty.tag | 0) {
        case 0 : 
            buffer_add_string(buf, "%c");
            _fmtty = fmtty[0];
            continue ;
        case 1 : 
            buffer_add_string(buf, "%s");
            _fmtty = fmtty[0];
            continue ;
        case 2 : 
            buffer_add_string(buf, "%i");
            _fmtty = fmtty[0];
            continue ;
        case 3 : 
            buffer_add_string(buf, "%li");
            _fmtty = fmtty[0];
            continue ;
        case 4 : 
            buffer_add_string(buf, "%ni");
            _fmtty = fmtty[0];
            continue ;
        case 5 : 
            buffer_add_string(buf, "%Li");
            _fmtty = fmtty[0];
            continue ;
        case 6 : 
            buffer_add_string(buf, "%f");
            _fmtty = fmtty[0];
            continue ;
        case 7 : 
            buffer_add_string(buf, "%B");
            _fmtty = fmtty[0];
            continue ;
        case 8 : 
            buffer_add_string(buf, "%{");
            bprint_fmtty(buf, fmtty[0]);
            buffer_add_string(buf, "%}");
            _fmtty = fmtty[1];
            continue ;
        case 9 : 
            buffer_add_string(buf, "%(");
            bprint_fmtty(buf, fmtty[0]);
            buffer_add_string(buf, "%)");
            _fmtty = fmtty[2];
            continue ;
        case 10 : 
            buffer_add_string(buf, "%a");
            _fmtty = fmtty[0];
            continue ;
        case 11 : 
            buffer_add_string(buf, "%t");
            _fmtty = fmtty[0];
            continue ;
        case 12 : 
            buffer_add_string(buf, "%?");
            _fmtty = fmtty[0];
            continue ;
        case 13 : 
            buffer_add_string(buf, "%r");
            _fmtty = fmtty[0];
            continue ;
        case 14 : 
            buffer_add_string(buf, "%_r");
            _fmtty = fmtty[0];
            continue ;
        
      }
    }
  };
}

function int_of_custom_arity(param) {
  if (param) {
    return 1 + int_of_custom_arity(param[0]) | 0;
  } else {
    return 0;
  }
}

function bprint_fmt(buf, fmt) {
  var _fmt = fmt;
  var _ign_flag = false;
  while(true) {
    var ign_flag = _ign_flag;
    var fmt$1 = _fmt;
    if (typeof fmt$1 === "number") {
      return /* () */0;
    } else {
      switch (fmt$1.tag | 0) {
        case 0 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "c" */99);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 1 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "C" */67);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 2 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_padding(buf, fmt$1[0]);
            buffer_add_char(buf, /* "s" */115);
            _ign_flag = false;
            _fmt = fmt$1[1];
            continue ;
        case 3 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_padding(buf, fmt$1[0]);
            buffer_add_char(buf, /* "S" */83);
            _ign_flag = false;
            _fmt = fmt$1[1];
            continue ;
        case 4 : 
            bprint_int_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2]);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 5 : 
            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* "l" */108);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 6 : 
            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* "n" */110);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 7 : 
            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* "L" */76);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 8 : 
            bprint_float_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2]);
            _ign_flag = false;
            _fmt = fmt$1[3];
            continue ;
        case 9 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "B" */66);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 10 : 
            buffer_add_string(buf, "%!");
            _fmt = fmt$1[0];
            continue ;
        case 11 : 
            bprint_string_literal(buf, fmt$1[0]);
            _fmt = fmt$1[1];
            continue ;
        case 12 : 
            bprint_char_literal(buf, fmt$1[0]);
            _fmt = fmt$1[1];
            continue ;
        case 13 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_pad_opt(buf, fmt$1[0]);
            buffer_add_char(buf, /* "{" */123);
            bprint_fmtty(buf, fmt$1[1]);
            buffer_add_char(buf, /* "%" */37);
            buffer_add_char(buf, /* "}" */125);
            _ign_flag = false;
            _fmt = fmt$1[2];
            continue ;
        case 14 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_pad_opt(buf, fmt$1[0]);
            buffer_add_char(buf, /* "(" */40);
            bprint_fmtty(buf, fmt$1[1]);
            buffer_add_char(buf, /* "%" */37);
            buffer_add_char(buf, /* ")" */41);
            _ign_flag = false;
            _fmt = fmt$1[2];
            continue ;
        case 15 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "a" */97);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 16 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "t" */116);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 17 : 
            bprint_string_literal(buf, string_of_formatting_lit(fmt$1[0]));
            _fmt = fmt$1[1];
            continue ;
        case 18 : 
            bprint_string_literal(buf, "@{");
            bprint_string_literal(buf, string_of_formatting_gen(fmt$1[0]));
            _fmt = fmt$1[1];
            continue ;
        case 19 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, /* "r" */114);
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 20 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_pad_opt(buf, fmt$1[0]);
            bprint_char_set(buf, fmt$1[1]);
            _ign_flag = false;
            _fmt = fmt$1[2];
            continue ;
        case 21 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            buffer_add_char(buf, char_of_counter(fmt$1[0]));
            _ign_flag = false;
            _fmt = fmt$1[1];
            continue ;
        case 22 : 
            buffer_add_char(buf, /* "%" */37);
            bprint_ignored_flag(buf, ign_flag);
            bprint_string_literal(buf, "0c");
            _ign_flag = false;
            _fmt = fmt$1[0];
            continue ;
        case 23 : 
            var match = param_format_of_ignored_format(fmt$1[0], fmt$1[1]);
            _ign_flag = true;
            _fmt = match[0];
            continue ;
        case 24 : 
            for(var _i = 1 ,_i_finish = int_of_custom_arity(fmt$1[0]); _i <= _i_finish; ++_i){
              buffer_add_char(buf, /* "%" */37);
              bprint_ignored_flag(buf, ign_flag);
              buffer_add_char(buf, /* "?" */63);
            }
            _ign_flag = false;
            _fmt = fmt$1[2];
            continue ;
        
      }
    }
  };
}

function string_of_fmt(fmt) {
  var buf = /* record */[
    /* ind */0,
    /* bytes */Caml_string.caml_create_string(16)
  ];
  bprint_fmt(buf, fmt);
  return buffer_contents(buf);
}

function symm(param) {
  if (typeof param === "number") {
    return /* End_of_fmtty */0;
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return /* Char_ty */Block.__(0, [symm(param[0])]);
      case 1 : 
          return /* String_ty */Block.__(1, [symm(param[0])]);
      case 2 : 
          return /* Int_ty */Block.__(2, [symm(param[0])]);
      case 3 : 
          return /* Int32_ty */Block.__(3, [symm(param[0])]);
      case 4 : 
          return /* Nativeint_ty */Block.__(4, [symm(param[0])]);
      case 5 : 
          return /* Int64_ty */Block.__(5, [symm(param[0])]);
      case 6 : 
          return /* Float_ty */Block.__(6, [symm(param[0])]);
      case 7 : 
          return /* Bool_ty */Block.__(7, [symm(param[0])]);
      case 8 : 
          return /* Format_arg_ty */Block.__(8, [
                    param[0],
                    symm(param[1])
                  ]);
      case 9 : 
          return /* Format_subst_ty */Block.__(9, [
                    param[1],
                    param[0],
                    symm(param[2])
                  ]);
      case 10 : 
          return /* Alpha_ty */Block.__(10, [symm(param[0])]);
      case 11 : 
          return /* Theta_ty */Block.__(11, [symm(param[0])]);
      case 12 : 
          return /* Any_ty */Block.__(12, [symm(param[0])]);
      case 13 : 
          return /* Reader_ty */Block.__(13, [symm(param[0])]);
      case 14 : 
          return /* Ignored_reader_ty */Block.__(14, [symm(param[0])]);
      
    }
  }
}

function fmtty_rel_det(param) {
  if (typeof param === "number") {
    return /* tuple */[
            (function (param) {
                return /* Refl */0;
              }),
            (function (param) {
                return /* Refl */0;
              }),
            (function (param) {
                return /* Refl */0;
              }),
            (function (param) {
                return /* Refl */0;
              })
          ];
  } else {
    switch (param.tag | 0) {
      case 0 : 
          var match = fmtty_rel_det(param[0]);
          var af = match[1];
          var fa = match[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match[2],
                  match[3]
                ];
      case 1 : 
          var match$1 = fmtty_rel_det(param[0]);
          var af$1 = match$1[1];
          var fa$1 = match$1[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$1, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$1, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$1[2],
                  match$1[3]
                ];
      case 2 : 
          var match$2 = fmtty_rel_det(param[0]);
          var af$2 = match$2[1];
          var fa$2 = match$2[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$2, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$2, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$2[2],
                  match$2[3]
                ];
      case 3 : 
          var match$3 = fmtty_rel_det(param[0]);
          var af$3 = match$3[1];
          var fa$3 = match$3[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$3, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$3, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$3[2],
                  match$3[3]
                ];
      case 4 : 
          var match$4 = fmtty_rel_det(param[0]);
          var af$4 = match$4[1];
          var fa$4 = match$4[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$4, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$4, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$4[2],
                  match$4[3]
                ];
      case 5 : 
          var match$5 = fmtty_rel_det(param[0]);
          var af$5 = match$5[1];
          var fa$5 = match$5[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$5, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$5, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$5[2],
                  match$5[3]
                ];
      case 6 : 
          var match$6 = fmtty_rel_det(param[0]);
          var af$6 = match$6[1];
          var fa$6 = match$6[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$6, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$6, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$6[2],
                  match$6[3]
                ];
      case 7 : 
          var match$7 = fmtty_rel_det(param[0]);
          var af$7 = match$7[1];
          var fa$7 = match$7[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$7, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$7, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$7[2],
                  match$7[3]
                ];
      case 8 : 
          var match$8 = fmtty_rel_det(param[1]);
          var af$8 = match$8[1];
          var fa$8 = match$8[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$8, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$8, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$8[2],
                  match$8[3]
                ];
      case 9 : 
          var match$9 = fmtty_rel_det(param[2]);
          var de = match$9[3];
          var ed = match$9[2];
          var af$9 = match$9[1];
          var fa$9 = match$9[0];
          var ty = trans(symm(param[0]), param[1]);
          var match$10 = fmtty_rel_det(ty);
          var jd = match$10[3];
          var dj = match$10[2];
          var ga = match$10[1];
          var ag = match$10[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$9, /* Refl */0);
                      Curry._1(ag, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(ga, /* Refl */0);
                      Curry._1(af$9, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(ed, /* Refl */0);
                      Curry._1(dj, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(jd, /* Refl */0);
                      Curry._1(de, /* Refl */0);
                      return /* Refl */0;
                    })
                ];
      case 10 : 
          var match$11 = fmtty_rel_det(param[0]);
          var af$10 = match$11[1];
          var fa$10 = match$11[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$10, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$10, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$11[2],
                  match$11[3]
                ];
      case 11 : 
          var match$12 = fmtty_rel_det(param[0]);
          var af$11 = match$12[1];
          var fa$11 = match$12[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$11, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$11, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$12[2],
                  match$12[3]
                ];
      case 12 : 
          var match$13 = fmtty_rel_det(param[0]);
          var af$12 = match$13[1];
          var fa$12 = match$13[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$12, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$12, /* Refl */0);
                      return /* Refl */0;
                    }),
                  match$13[2],
                  match$13[3]
                ];
      case 13 : 
          var match$14 = fmtty_rel_det(param[0]);
          var de$1 = match$14[3];
          var ed$1 = match$14[2];
          var af$13 = match$14[1];
          var fa$13 = match$14[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$13, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$13, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(ed$1, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(de$1, /* Refl */0);
                      return /* Refl */0;
                    })
                ];
      case 14 : 
          var match$15 = fmtty_rel_det(param[0]);
          var de$2 = match$15[3];
          var ed$2 = match$15[2];
          var af$14 = match$15[1];
          var fa$14 = match$15[0];
          return /* tuple */[
                  (function (param) {
                      Curry._1(fa$14, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(af$14, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(ed$2, /* Refl */0);
                      return /* Refl */0;
                    }),
                  (function (param) {
                      Curry._1(de$2, /* Refl */0);
                      return /* Refl */0;
                    })
                ];
      
    }
  }
}

function trans(ty1, ty2) {
  var exit = 0;
  if (typeof ty1 === "number") {
    if (typeof ty2 === "number") {
      return /* End_of_fmtty */0;
    } else {
      switch (ty2.tag | 0) {
        case 8 : 
            exit = 6;
            break;
        case 9 : 
            exit = 7;
            break;
        case 10 : 
            exit = 1;
            break;
        case 11 : 
            exit = 2;
            break;
        case 12 : 
            exit = 3;
            break;
        case 13 : 
            exit = 4;
            break;
        case 14 : 
            exit = 5;
            break;
        default:
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  816,
                  23
                ]
              ];
      }
    }
  } else {
    switch (ty1.tag | 0) {
      case 0 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 0 : 
                  return /* Char_ty */Block.__(0, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 1 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 1 : 
                  return /* String_ty */Block.__(1, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 2 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 2 : 
                  return /* Int_ty */Block.__(2, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 3 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 3 : 
                  return /* Int32_ty */Block.__(3, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 4 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 4 : 
                  return /* Nativeint_ty */Block.__(4, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 5 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 5 : 
                  return /* Int64_ty */Block.__(5, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 6 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 6 : 
                  return /* Float_ty */Block.__(6, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 7 : 
          if (typeof ty2 === "number") {
            exit = 8;
          } else {
            switch (ty2.tag | 0) {
              case 7 : 
                  return /* Bool_ty */Block.__(7, [trans(ty1[0], ty2[0])]);
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  exit = 7;
                  break;
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              
            }
          }
          break;
      case 8 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    802,
                    26
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 8 : 
                  return /* Format_arg_ty */Block.__(8, [
                            trans(ty1[0], ty2[0]),
                            trans(ty1[1], ty2[1])
                          ]);
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        802,
                        26
                      ]
                    ];
            }
          }
          break;
      case 9 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    812,
                    28
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 8 : 
                  exit = 6;
                  break;
              case 9 : 
                  var ty = trans(symm(ty1[1]), ty2[0]);
                  var match = fmtty_rel_det(ty);
                  Curry._1(match[1], /* Refl */0);
                  Curry._1(match[3], /* Refl */0);
                  return /* Format_subst_ty */Block.__(9, [
                            ty1[0],
                            ty2[1],
                            trans(ty1[2], ty2[2])
                          ]);
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  exit = 5;
                  break;
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        812,
                        28
                      ]
                    ];
            }
          }
          break;
      case 10 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    780,
                    21
                  ]
                ];
          } else if (ty2.tag === 10) {
            return /* Alpha_ty */Block.__(10, [trans(ty1[0], ty2[0])]);
          } else {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    780,
                    21
                  ]
                ];
          }
      case 11 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    784,
                    21
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  return /* Theta_ty */Block.__(11, [trans(ty1[0], ty2[0])]);
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        784,
                        21
                      ]
                    ];
            }
          }
          break;
      case 12 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    788,
                    19
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  return /* Any_ty */Block.__(12, [trans(ty1[0], ty2[0])]);
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        788,
                        19
                      ]
                    ];
            }
          }
          break;
      case 13 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    792,
                    22
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  return /* Reader_ty */Block.__(13, [trans(ty1[0], ty2[0])]);
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        792,
                        22
                      ]
                    ];
            }
          }
          break;
      case 14 : 
          if (typeof ty2 === "number") {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    797,
                    30
                  ]
                ];
          } else {
            switch (ty2.tag | 0) {
              case 10 : 
                  exit = 1;
                  break;
              case 11 : 
                  exit = 2;
                  break;
              case 12 : 
                  exit = 3;
                  break;
              case 13 : 
                  exit = 4;
                  break;
              case 14 : 
                  return /* Ignored_reader_ty */Block.__(14, [trans(ty1[0], ty2[0])]);
              default:
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        797,
                        30
                      ]
                    ];
            }
          }
          break;
      
    }
  }
  switch (exit) {
    case 1 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                781,
                21
              ]
            ];
    case 2 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                785,
                21
              ]
            ];
    case 3 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                789,
                19
              ]
            ];
    case 4 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                793,
                22
              ]
            ];
    case 5 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                798,
                30
              ]
            ];
    case 6 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                803,
                26
              ]
            ];
    case 7 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                813,
                28
              ]
            ];
    case 8 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                817,
                23
              ]
            ];
    
  }
}

function fmtty_of_formatting_gen(formatting_gen) {
  return fmtty_of_fmt(formatting_gen[0][0]);
}

function fmtty_of_fmt(_fmtty) {
  while(true) {
    var fmtty = _fmtty;
    var exit = 0;
    if (typeof fmtty === "number") {
      return /* End_of_fmtty */0;
    } else {
      switch (fmtty.tag | 0) {
        case 2 : 
        case 3 : 
            exit = 1;
            break;
        case 4 : 
            var ty_rest = fmtty_of_fmt(fmtty[3]);
            var prec_ty = fmtty_of_precision_fmtty(fmtty[2], /* Int_ty */Block.__(2, [ty_rest]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty);
        case 5 : 
            var ty_rest$1 = fmtty_of_fmt(fmtty[3]);
            var prec_ty$1 = fmtty_of_precision_fmtty(fmtty[2], /* Int32_ty */Block.__(3, [ty_rest$1]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$1);
        case 6 : 
            var ty_rest$2 = fmtty_of_fmt(fmtty[3]);
            var prec_ty$2 = fmtty_of_precision_fmtty(fmtty[2], /* Nativeint_ty */Block.__(4, [ty_rest$2]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$2);
        case 7 : 
            var ty_rest$3 = fmtty_of_fmt(fmtty[3]);
            var prec_ty$3 = fmtty_of_precision_fmtty(fmtty[2], /* Int64_ty */Block.__(5, [ty_rest$3]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$3);
        case 8 : 
            var ty_rest$4 = fmtty_of_fmt(fmtty[3]);
            var prec_ty$4 = fmtty_of_precision_fmtty(fmtty[2], /* Float_ty */Block.__(6, [ty_rest$4]));
            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$4);
        case 9 : 
            return /* Bool_ty */Block.__(7, [fmtty_of_fmt(fmtty[0])]);
        case 10 : 
            _fmtty = fmtty[0];
            continue ;
        case 13 : 
            return /* Format_arg_ty */Block.__(8, [
                      fmtty[1],
                      fmtty_of_fmt(fmtty[2])
                    ]);
        case 14 : 
            var ty = fmtty[1];
            return /* Format_subst_ty */Block.__(9, [
                      ty,
                      ty,
                      fmtty_of_fmt(fmtty[2])
                    ]);
        case 15 : 
            return /* Alpha_ty */Block.__(10, [fmtty_of_fmt(fmtty[0])]);
        case 16 : 
            return /* Theta_ty */Block.__(11, [fmtty_of_fmt(fmtty[0])]);
        case 18 : 
            return CamlinternalFormatBasics.concat_fmtty(fmtty_of_formatting_gen(fmtty[0]), fmtty_of_fmt(fmtty[1]));
        case 19 : 
            return /* Reader_ty */Block.__(13, [fmtty_of_fmt(fmtty[0])]);
        case 20 : 
            return /* String_ty */Block.__(1, [fmtty_of_fmt(fmtty[2])]);
        case 21 : 
            return /* Int_ty */Block.__(2, [fmtty_of_fmt(fmtty[1])]);
        case 0 : 
        case 1 : 
        case 22 : 
            return /* Char_ty */Block.__(0, [fmtty_of_fmt(fmtty[0])]);
        case 23 : 
            var ign = fmtty[0];
            var fmt = fmtty[1];
            if (typeof ign === "number") {
              if (ign === 3) {
                return /* Ignored_reader_ty */Block.__(14, [fmtty_of_fmt(fmt)]);
              } else {
                return fmtty_of_fmt(fmt);
              }
            } else if (ign.tag === 8) {
              return CamlinternalFormatBasics.concat_fmtty(ign[1], fmtty_of_fmt(fmt));
            } else {
              return fmtty_of_fmt(fmt);
            }
        case 24 : 
            return fmtty_of_custom(fmtty[0], fmtty_of_fmt(fmtty[2]));
        default:
          _fmtty = fmtty[1];
          continue ;
      }
    }
    if (exit === 1) {
      return fmtty_of_padding_fmtty(fmtty[0], /* String_ty */Block.__(1, [fmtty_of_fmt(fmtty[1])]));
    }
    
  };
}

function fmtty_of_custom(arity, fmtty) {
  if (arity) {
    return /* Any_ty */Block.__(12, [fmtty_of_custom(arity[0], fmtty)]);
  } else {
    return fmtty;
  }
}

function fmtty_of_padding_fmtty(pad, fmtty) {
  if (typeof pad === "number" || !pad.tag) {
    return fmtty;
  } else {
    return /* Int_ty */Block.__(2, [fmtty]);
  }
}

function fmtty_of_precision_fmtty(prec, fmtty) {
  if (typeof prec === "number" && prec !== 0) {
    return /* Int_ty */Block.__(2, [fmtty]);
  } else {
    return fmtty;
  }
}

var Type_mismatch = Caml_exceptions.create("CamlinternalFormat.Type_mismatch");

function type_padding(pad, fmtty) {
  if (typeof pad === "number") {
    return /* Padding_fmtty_EBB */[
            /* No_padding */0,
            fmtty
          ];
  } else if (pad.tag) {
    if (typeof fmtty === "number") {
      throw Type_mismatch;
    } else if (fmtty.tag === 2) {
      return /* Padding_fmtty_EBB */[
              /* Arg_padding */Block.__(1, [pad[0]]),
              fmtty[0]
            ];
    } else {
      throw Type_mismatch;
    }
  } else {
    return /* Padding_fmtty_EBB */[
            /* Lit_padding */Block.__(0, [
                pad[0],
                pad[1]
              ]),
            fmtty
          ];
  }
}

function type_padprec(pad, prec, fmtty) {
  var match = type_padding(pad, fmtty);
  if (typeof prec === "number") {
    if (prec !== 0) {
      var match$1 = match[1];
      if (typeof match$1 === "number") {
        throw Type_mismatch;
      } else if (match$1.tag === 2) {
        return /* Padprec_fmtty_EBB */[
                match[0],
                /* Arg_precision */1,
                match$1[0]
              ];
      } else {
        throw Type_mismatch;
      }
    } else {
      return /* Padprec_fmtty_EBB */[
              match[0],
              /* No_precision */0,
              match[1]
            ];
    }
  } else {
    return /* Padprec_fmtty_EBB */[
            match[0],
            /* Lit_precision */[prec[0]],
            match[1]
          ];
  }
}

function type_ignored_param_one(ign, fmt, fmtty) {
  var match = type_format_gen(fmt, fmtty);
  return /* Fmt_fmtty_EBB */[
          /* Ignored_param */Block.__(23, [
              ign,
              match[0]
            ]),
          match[1]
        ];
}

function type_format_gen(fmt, fmtty) {
  if (typeof fmt === "number") {
    return /* Fmt_fmtty_EBB */[
            /* End_of_format */0,
            fmtty
          ];
  } else {
    switch (fmt.tag | 0) {
      case 0 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag) {
            throw Type_mismatch;
          } else {
            var match = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Char */Block.__(0, [match[0]]),
                    match[1]
                  ];
          }
      case 1 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag) {
            throw Type_mismatch;
          } else {
            var match$1 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Caml_char */Block.__(1, [match$1[0]]),
                    match$1[1]
                  ];
          }
      case 2 : 
          var match$2 = type_padding(fmt[0], fmtty);
          var match$3 = match$2[1];
          if (typeof match$3 === "number") {
            throw Type_mismatch;
          } else if (match$3.tag === 1) {
            var match$4 = type_format_gen(fmt[1], match$3[0]);
            return /* Fmt_fmtty_EBB */[
                    /* String */Block.__(2, [
                        match$2[0],
                        match$4[0]
                      ]),
                    match$4[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 3 : 
          var match$5 = type_padding(fmt[0], fmtty);
          var match$6 = match$5[1];
          if (typeof match$6 === "number") {
            throw Type_mismatch;
          } else if (match$6.tag === 1) {
            var match$7 = type_format_gen(fmt[1], match$6[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Caml_string */Block.__(3, [
                        match$5[0],
                        match$7[0]
                      ]),
                    match$7[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 4 : 
          var match$8 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$9 = match$8[2];
          if (typeof match$9 === "number") {
            throw Type_mismatch;
          } else if (match$9.tag === 2) {
            var match$10 = type_format_gen(fmt[3], match$9[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Int */Block.__(4, [
                        fmt[0],
                        match$8[0],
                        match$8[1],
                        match$10[0]
                      ]),
                    match$10[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 5 : 
          var match$11 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$12 = match$11[2];
          if (typeof match$12 === "number") {
            throw Type_mismatch;
          } else if (match$12.tag === 3) {
            var match$13 = type_format_gen(fmt[3], match$12[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Int32 */Block.__(5, [
                        fmt[0],
                        match$11[0],
                        match$11[1],
                        match$13[0]
                      ]),
                    match$13[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 6 : 
          var match$14 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$15 = match$14[2];
          if (typeof match$15 === "number") {
            throw Type_mismatch;
          } else if (match$15.tag === 4) {
            var match$16 = type_format_gen(fmt[3], match$15[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Nativeint */Block.__(6, [
                        fmt[0],
                        match$14[0],
                        match$14[1],
                        match$16[0]
                      ]),
                    match$16[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 7 : 
          var match$17 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$18 = match$17[2];
          if (typeof match$18 === "number") {
            throw Type_mismatch;
          } else if (match$18.tag === 5) {
            var match$19 = type_format_gen(fmt[3], match$18[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Int64 */Block.__(7, [
                        fmt[0],
                        match$17[0],
                        match$17[1],
                        match$19[0]
                      ]),
                    match$19[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 8 : 
          var match$20 = type_padprec(fmt[1], fmt[2], fmtty);
          var match$21 = match$20[2];
          if (typeof match$21 === "number") {
            throw Type_mismatch;
          } else if (match$21.tag === 6) {
            var match$22 = type_format_gen(fmt[3], match$21[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Float */Block.__(8, [
                        fmt[0],
                        match$20[0],
                        match$20[1],
                        match$22[0]
                      ]),
                    match$22[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 9 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 7) {
            var match$23 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Bool */Block.__(9, [match$23[0]]),
                    match$23[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 10 : 
          var match$24 = type_format_gen(fmt[0], fmtty);
          return /* Fmt_fmtty_EBB */[
                  /* Flush */Block.__(10, [match$24[0]]),
                  match$24[1]
                ];
      case 11 : 
          var match$25 = type_format_gen(fmt[1], fmtty);
          return /* Fmt_fmtty_EBB */[
                  /* String_literal */Block.__(11, [
                      fmt[0],
                      match$25[0]
                    ]),
                  match$25[1]
                ];
      case 12 : 
          var match$26 = type_format_gen(fmt[1], fmtty);
          return /* Fmt_fmtty_EBB */[
                  /* Char_literal */Block.__(12, [
                      fmt[0],
                      match$26[0]
                    ]),
                  match$26[1]
                ];
      case 13 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 8) {
            var sub_fmtty$prime = fmtty[0];
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[fmt[1]], /* Fmtty_EBB */[sub_fmtty$prime])) {
              throw Type_mismatch;
            }
            var match$27 = type_format_gen(fmt[2], fmtty[1]);
            return /* Fmt_fmtty_EBB */[
                    /* Format_arg */Block.__(13, [
                        fmt[0],
                        sub_fmtty$prime,
                        match$27[0]
                      ]),
                    match$27[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 14 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 9) {
            var sub_fmtty1 = fmtty[0];
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(fmt[1])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty1)])) {
              throw Type_mismatch;
            }
            var match$28 = type_format_gen(fmt[2], CamlinternalFormatBasics.erase_rel(fmtty[2]));
            return /* Fmt_fmtty_EBB */[
                    /* Format_subst */Block.__(14, [
                        fmt[0],
                        sub_fmtty1,
                        match$28[0]
                      ]),
                    match$28[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 15 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 10) {
            var match$29 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Alpha */Block.__(15, [match$29[0]]),
                    match$29[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 16 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 11) {
            var match$30 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Theta */Block.__(16, [match$30[0]]),
                    match$30[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 17 : 
          var match$31 = type_format_gen(fmt[1], fmtty);
          return /* Fmt_fmtty_EBB */[
                  /* Formatting_lit */Block.__(17, [
                      fmt[0],
                      match$31[0]
                    ]),
                  match$31[1]
                ];
      case 18 : 
          var formatting_gen = fmt[0];
          var fmt0 = fmt[1];
          var fmtty0 = fmtty;
          if (formatting_gen.tag) {
            var match$32 = formatting_gen[0];
            var match$33 = type_format_gen(match$32[0], fmtty0);
            var match$34 = type_format_gen(fmt0, match$33[1]);
            return /* Fmt_fmtty_EBB */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              match$33[0],
                              match$32[1]
                            ]]),
                        match$34[0]
                      ]),
                    match$34[1]
                  ];
          } else {
            var match$35 = formatting_gen[0];
            var match$36 = type_format_gen(match$35[0], fmtty0);
            var match$37 = type_format_gen(fmt0, match$36[1]);
            return /* Fmt_fmtty_EBB */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_tag */Block.__(0, [/* Format */[
                              match$36[0],
                              match$35[1]
                            ]]),
                        match$37[0]
                      ]),
                    match$37[1]
                  ];
          }
      case 19 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 13) {
            var match$38 = type_format_gen(fmt[0], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Reader */Block.__(19, [match$38[0]]),
                    match$38[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 20 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 1) {
            var match$39 = type_format_gen(fmt[2], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Scan_char_set */Block.__(20, [
                        fmt[0],
                        fmt[1],
                        match$39[0]
                      ]),
                    match$39[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 21 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 2) {
            var match$40 = type_format_gen(fmt[1], fmtty[0]);
            return /* Fmt_fmtty_EBB */[
                    /* Scan_get_counter */Block.__(21, [
                        fmt[0],
                        match$40[0]
                      ]),
                    match$40[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 23 : 
          var ign = fmt[0];
          var fmt$1 = fmt[1];
          var fmtty$1 = fmtty;
          if (typeof ign === "number") {
            if (ign === 3) {
              if (typeof fmtty$1 === "number") {
                throw Type_mismatch;
              } else if (fmtty$1.tag === 14) {
                var match$41 = type_format_gen(fmt$1, fmtty$1[0]);
                return /* Fmt_fmtty_EBB */[
                        /* Ignored_param */Block.__(23, [
                            /* Ignored_reader */3,
                            match$41[0]
                          ]),
                        match$41[1]
                      ];
              } else {
                throw Type_mismatch;
              }
            } else {
              return type_ignored_param_one(ign, fmt$1, fmtty$1);
            }
          } else {
            switch (ign.tag | 0) {
              case 7 : 
                  return type_ignored_param_one(/* Ignored_format_arg */Block.__(7, [
                                ign[0],
                                ign[1]
                              ]), fmt$1, fmtty$1);
              case 8 : 
                  var match$42 = type_ignored_format_substitution(ign[1], fmt$1, fmtty$1);
                  var match$43 = match$42[1];
                  return /* Fmt_fmtty_EBB */[
                          /* Ignored_param */Block.__(23, [
                              /* Ignored_format_subst */Block.__(8, [
                                  ign[0],
                                  match$42[0]
                                ]),
                              match$43[0]
                            ]),
                          match$43[1]
                        ];
              default:
                return type_ignored_param_one(ign, fmt$1, fmtty$1);
            }
          }
      case 22 : 
      case 24 : 
          throw Type_mismatch;
      
    }
  }
}

function type_ignored_format_substitution(sub_fmtty, fmt, fmtty) {
  if (typeof sub_fmtty === "number") {
    return /* Fmtty_fmt_EBB */[
            /* End_of_fmtty */0,
            type_format_gen(fmt, fmtty)
          ];
  } else {
    switch (sub_fmtty.tag | 0) {
      case 0 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag) {
            throw Type_mismatch;
          } else {
            var match = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Char_ty */Block.__(0, [match[0]]),
                    match[1]
                  ];
          }
      case 1 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 1) {
            var match$1 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* String_ty */Block.__(1, [match$1[0]]),
                    match$1[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 2 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 2) {
            var match$2 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Int_ty */Block.__(2, [match$2[0]]),
                    match$2[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 3 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 3) {
            var match$3 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Int32_ty */Block.__(3, [match$3[0]]),
                    match$3[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 4 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 4) {
            var match$4 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Nativeint_ty */Block.__(4, [match$4[0]]),
                    match$4[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 5 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 5) {
            var match$5 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Int64_ty */Block.__(5, [match$5[0]]),
                    match$5[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 6 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 6) {
            var match$6 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Float_ty */Block.__(6, [match$6[0]]),
                    match$6[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 7 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 7) {
            var match$7 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Bool_ty */Block.__(7, [match$7[0]]),
                    match$7[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 8 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 8) {
            var sub2_fmtty$prime = fmtty[0];
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[sub_fmtty[0]], /* Fmtty_EBB */[sub2_fmtty$prime])) {
              throw Type_mismatch;
            }
            var match$8 = type_ignored_format_substitution(sub_fmtty[1], fmt, fmtty[1]);
            return /* Fmtty_fmt_EBB */[
                    /* Format_arg_ty */Block.__(8, [
                        sub2_fmtty$prime,
                        match$8[0]
                      ]),
                    match$8[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 9 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 9) {
            var sub2_fmtty$prime$1 = fmtty[1];
            var sub1_fmtty$prime = fmtty[0];
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty[0])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub1_fmtty$prime)])) {
              throw Type_mismatch;
            }
            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty[1])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub2_fmtty$prime$1)])) {
              throw Type_mismatch;
            }
            var sub_fmtty$prime = trans(symm(sub1_fmtty$prime), sub2_fmtty$prime$1);
            var match$9 = fmtty_rel_det(sub_fmtty$prime);
            Curry._1(match$9[1], /* Refl */0);
            Curry._1(match$9[3], /* Refl */0);
            var match$10 = type_ignored_format_substitution(CamlinternalFormatBasics.erase_rel(sub_fmtty[2]), fmt, fmtty[2]);
            return /* Fmtty_fmt_EBB */[
                    /* Format_subst_ty */Block.__(9, [
                        sub1_fmtty$prime,
                        sub2_fmtty$prime$1,
                        symm(match$10[0])
                      ]),
                    match$10[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 10 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 10) {
            var match$11 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Alpha_ty */Block.__(10, [match$11[0]]),
                    match$11[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 11 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 11) {
            var match$12 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Theta_ty */Block.__(11, [match$12[0]]),
                    match$12[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 12 : 
          throw Type_mismatch;
      case 13 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 13) {
            var match$13 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Reader_ty */Block.__(13, [match$13[0]]),
                    match$13[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      case 14 : 
          if (typeof fmtty === "number") {
            throw Type_mismatch;
          } else if (fmtty.tag === 14) {
            var match$14 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
            return /* Fmtty_fmt_EBB */[
                    /* Ignored_reader_ty */Block.__(14, [match$14[0]]),
                    match$14[1]
                  ];
          } else {
            throw Type_mismatch;
          }
      
    }
  }
}

function type_format(fmt, fmtty) {
  var match = type_format_gen(fmt, fmtty);
  if (typeof match[1] === "number") {
    return match[0];
  } else {
    throw Type_mismatch;
  }
}

function recast(fmt, fmtty) {
  return type_format(fmt, CamlinternalFormatBasics.erase_rel(symm(fmtty)));
}

function fix_padding(padty, width, str) {
  var len = str.length;
  var width$1 = Pervasives.abs(width);
  var padty$1 = width < 0 ? /* Left */0 : padty;
  if (width$1 <= len) {
    return str;
  } else {
    var res = Bytes.make(width$1, padty$1 === /* Zeros */2 ? /* "0" */48 : /* " " */32);
    switch (padty$1) {
      case 0 : 
          $$String.blit(str, 0, res, 0, len);
          break;
      case 1 : 
          $$String.blit(str, 0, res, width$1 - len | 0, len);
          break;
      case 2 : 
          if (len > 0 && (Caml_string.get(str, 0) === /* "+" */43 || Caml_string.get(str, 0) === /* "-" */45 || Caml_string.get(str, 0) === /* " " */32)) {
            res[0] = Caml_string.get(str, 0);
            $$String.blit(str, 1, res, (width$1 - len | 0) + 1 | 0, len - 1 | 0);
          } else if (len > 1 && Caml_string.get(str, 0) === /* "0" */48 && (Caml_string.get(str, 1) === /* "x" */120 || Caml_string.get(str, 1) === /* "X" */88)) {
            res[1] = Caml_string.get(str, 1);
            $$String.blit(str, 2, res, (width$1 - len | 0) + 2 | 0, len - 2 | 0);
          } else {
            $$String.blit(str, 0, res, width$1 - len | 0, len);
          }
          break;
      
    }
    return Caml_string.bytes_to_string(res);
  }
}

function fix_int_precision(prec, str) {
  var prec$1 = Pervasives.abs(prec);
  var len = str.length;
  var c = Caml_string.get(str, 0);
  var exit = 0;
  if (c >= 58) {
    if (c >= 71) {
      if (c > 102 || c < 97) {
        return str;
      } else {
        exit = 2;
      }
    } else if (c >= 65) {
      exit = 2;
    } else {
      return str;
    }
  } else if (c !== 32) {
    if (c >= 43) {
      switch (c - 43 | 0) {
        case 0 : 
        case 2 : 
            exit = 1;
            break;
        case 1 : 
        case 3 : 
        case 4 : 
            return str;
        case 5 : 
            if ((prec$1 + 2 | 0) > len && len > 1 && (Caml_string.get(str, 1) === /* "x" */120 || Caml_string.get(str, 1) === /* "X" */88)) {
              var res = Bytes.make(prec$1 + 2 | 0, /* "0" */48);
              res[1] = Caml_string.get(str, 1);
              $$String.blit(str, 2, res, (prec$1 - len | 0) + 4 | 0, len - 2 | 0);
              return Caml_string.bytes_to_string(res);
            } else {
              exit = 2;
            }
            break;
        case 6 : 
        case 7 : 
        case 8 : 
        case 9 : 
        case 10 : 
        case 11 : 
        case 12 : 
        case 13 : 
        case 14 : 
            exit = 2;
            break;
        
      }
    } else {
      return str;
    }
  } else {
    exit = 1;
  }
  switch (exit) {
    case 1 : 
        if ((prec$1 + 1 | 0) > len) {
          var res$1 = Bytes.make(prec$1 + 1 | 0, /* "0" */48);
          res$1[0] = c;
          $$String.blit(str, 1, res$1, (prec$1 - len | 0) + 2 | 0, len - 1 | 0);
          return Caml_string.bytes_to_string(res$1);
        } else {
          return str;
        }
    case 2 : 
        if (prec$1 > len) {
          var res$2 = Bytes.make(prec$1, /* "0" */48);
          $$String.blit(str, 0, res$2, prec$1 - len | 0, len);
          return Caml_string.bytes_to_string(res$2);
        } else {
          return str;
        }
    
  }
}

function string_to_caml_string(str) {
  return $$String.concat($$String.escaped(str), /* :: */[
              "\"",
              /* :: */[
                "\"",
                /* [] */0
              ]
            ]);
}

function format_of_iconv(iconv) {
  switch (iconv) {
    case 0 : 
        return "%d";
    case 1 : 
        return "%+d";
    case 2 : 
        return "% d";
    case 3 : 
        return "%i";
    case 4 : 
        return "%+i";
    case 5 : 
        return "% i";
    case 6 : 
        return "%x";
    case 7 : 
        return "%#x";
    case 8 : 
        return "%X";
    case 9 : 
        return "%#X";
    case 10 : 
        return "%o";
    case 11 : 
        return "%#o";
    case 12 : 
        return "%u";
    
  }
}

function format_of_aconv(iconv, c) {
  var seps;
  switch (iconv) {
    case 0 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "d",
            /* [] */0
          ]
        ];
        break;
    case 1 : 
        seps = /* :: */[
          "%+",
          /* :: */[
            "d",
            /* [] */0
          ]
        ];
        break;
    case 2 : 
        seps = /* :: */[
          "% ",
          /* :: */[
            "d",
            /* [] */0
          ]
        ];
        break;
    case 3 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "i",
            /* [] */0
          ]
        ];
        break;
    case 4 : 
        seps = /* :: */[
          "%+",
          /* :: */[
            "i",
            /* [] */0
          ]
        ];
        break;
    case 5 : 
        seps = /* :: */[
          "% ",
          /* :: */[
            "i",
            /* [] */0
          ]
        ];
        break;
    case 6 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "x",
            /* [] */0
          ]
        ];
        break;
    case 7 : 
        seps = /* :: */[
          "%#",
          /* :: */[
            "x",
            /* [] */0
          ]
        ];
        break;
    case 8 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "X",
            /* [] */0
          ]
        ];
        break;
    case 9 : 
        seps = /* :: */[
          "%#",
          /* :: */[
            "X",
            /* [] */0
          ]
        ];
        break;
    case 10 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "o",
            /* [] */0
          ]
        ];
        break;
    case 11 : 
        seps = /* :: */[
          "%#",
          /* :: */[
            "o",
            /* [] */0
          ]
        ];
        break;
    case 12 : 
        seps = /* :: */[
          "%",
          /* :: */[
            "u",
            /* [] */0
          ]
        ];
        break;
    
  }
  return $$String.concat(Caml_string.bytes_to_string(Bytes.make(1, c)), seps);
}

function format_of_fconv(fconv, prec) {
  if (fconv === /* Float_F */15) {
    return "%.12g";
  } else {
    var prec$1 = Pervasives.abs(prec);
    var symb = char_of_fconv(fconv);
    var buf = /* record */[
      /* ind */0,
      /* bytes */Caml_string.caml_create_string(16)
    ];
    buffer_add_char(buf, /* "%" */37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, /* "." */46);
    buffer_add_string(buf, String(prec$1));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
  }
}

function convert_int(iconv, n) {
  return Caml_format.caml_format_int(format_of_iconv(iconv), n);
}

function convert_int32(iconv, n) {
  return Caml_format.caml_int32_format(format_of_aconv(iconv, /* "l" */108), n);
}

function convert_nativeint(iconv, n) {
  return Caml_format.caml_nativeint_format(format_of_aconv(iconv, /* "n" */110), n);
}

function convert_int64(iconv, n) {
  return Caml_format.caml_int64_format(format_of_aconv(iconv, /* "L" */76), n);
}

function convert_float(fconv, prec, x) {
  var prec$1 = Pervasives.abs(prec);
  var str = Caml_format.caml_format_float(format_of_fconv(fconv, prec$1), x);
  if (fconv !== /* Float_F */15) {
    return str;
  } else {
    var len = str.length;
    var is_valid = function (_i) {
      while(true) {
        var i = _i;
        if (i === len) {
          return false;
        } else {
          var match = Caml_string.get(str, i);
          var switcher = match - 46 | 0;
          if (switcher > 23 || switcher < 0) {
            if (switcher !== 55) {
              _i = i + 1 | 0;
              continue ;
            } else {
              return true;
            }
          } else if (switcher > 22 || switcher < 1) {
            return true;
          } else {
            _i = i + 1 | 0;
            continue ;
          }
        }
      };
    };
    var match = Caml_float.caml_classify_float(x);
    if (match !== 3) {
      if (match >= 4) {
        return "nan";
      } else if (is_valid(0)) {
        return str;
      } else {
        return str + ".";
      }
    } else if (x < 0.0) {
      return "neg_infinity";
    } else {
      return "infinity";
    }
  }
}

function format_caml_char(c) {
  return $$String.concat(Char.escaped(c), /* :: */[
              "'",
              /* :: */[
                "'",
                /* [] */0
              ]
            ]);
}

function string_of_fmtty(fmtty) {
  var buf = /* record */[
    /* ind */0,
    /* bytes */Caml_string.caml_create_string(16)
  ];
  bprint_fmtty(buf, fmtty);
  return buffer_contents(buf);
}

function make_printf(_k, o, _acc, _fmt) {
  while(true) {
    var fmt = _fmt;
    var acc = _acc;
    var k = _k;
    if (typeof fmt === "number") {
      return Curry._2(k, o, acc);
    } else {
      switch (fmt.tag | 0) {
        case 0 : 
            var rest = fmt[0];
            return (function(k,acc,rest){
            return function (c) {
              var new_acc = /* Acc_data_char */Block.__(5, [
                  acc,
                  c
                ]);
              return make_printf(k, o, new_acc, rest);
            }
            }(k,acc,rest));
        case 1 : 
            var rest$1 = fmt[0];
            return (function(k,acc,rest$1){
            return function (c) {
              var new_acc_001 = format_caml_char(c);
              var new_acc = /* Acc_data_string */Block.__(4, [
                  acc,
                  new_acc_001
                ]);
              return make_printf(k, o, new_acc, rest$1);
            }
            }(k,acc,rest$1));
        case 2 : 
            return make_string_padding(k, o, acc, fmt[1], fmt[0], (function (str) {
                          return str;
                        }));
        case 3 : 
            return make_string_padding(k, o, acc, fmt[1], fmt[0], string_to_caml_string);
        case 4 : 
            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int, fmt[0]);
        case 5 : 
            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int32, fmt[0]);
        case 6 : 
            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_nativeint, fmt[0]);
        case 7 : 
            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int64, fmt[0]);
        case 8 : 
            var k$1 = k;
            var o$1 = o;
            var acc$1 = acc;
            var fmt$1 = fmt[3];
            var pad = fmt[1];
            var prec = fmt[2];
            var fconv = fmt[0];
            if (typeof pad === "number") {
              if (typeof prec === "number") {
                if (prec !== 0) {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv){
                  return function (p, x) {
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv));
                } else {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv){
                  return function (x) {
                    var str = convert_float(fconv, 6, x);
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv));
                }
              } else {
                var p = prec[0];
                return (function(k$1,o$1,acc$1,fmt$1,fconv,p){
                return function (x) {
                  var str = convert_float(fconv, p, x);
                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                acc$1,
                                str
                              ]), fmt$1);
                }
                }(k$1,o$1,acc$1,fmt$1,fconv,p));
              }
            } else if (pad.tag) {
              var padty = pad[0];
              if (typeof prec === "number") {
                if (prec !== 0) {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){
                  return function (w, p, x) {
                    var str = fix_padding(padty, w, convert_float(fconv, p, x));
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty));
                } else {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){
                  return function (w, x) {
                    var str = convert_float(fconv, 6, x);
                    var str$prime = fix_padding(padty, w, str);
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str$prime
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty));
                }
              } else {
                var p$1 = prec[0];
                return (function(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1){
                return function (w, x) {
                  var str = fix_padding(padty, w, convert_float(fconv, p$1, x));
                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                acc$1,
                                str
                              ]), fmt$1);
                }
                }(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1));
              }
            } else {
              var w = pad[1];
              var padty$1 = pad[0];
              if (typeof prec === "number") {
                if (prec !== 0) {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){
                  return function (p, x) {
                    var str = fix_padding(padty$1, w, convert_float(fconv, p, x));
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));
                } else {
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){
                  return function (x) {
                    var str = convert_float(fconv, 6, x);
                    var str$prime = fix_padding(padty$1, w, str);
                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                  acc$1,
                                  str$prime
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));
                }
              } else {
                var p$2 = prec[0];
                return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2){
                return function (x) {
                  var str = fix_padding(padty$1, w, convert_float(fconv, p$2, x));
                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [
                                acc$1,
                                str
                              ]), fmt$1);
                }
                }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2));
              }
            }
        case 9 : 
            var rest$2 = fmt[0];
            return (function(k,acc,rest$2){
            return function (b) {
              return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                            acc,
                            b ? "true" : "false"
                          ]), rest$2);
            }
            }(k,acc,rest$2));
        case 10 : 
            _fmt = fmt[0];
            _acc = /* Acc_flush */Block.__(7, [acc]);
            continue ;
        case 11 : 
            _fmt = fmt[1];
            _acc = /* Acc_string_literal */Block.__(2, [
                acc,
                fmt[0]
              ]);
            continue ;
        case 12 : 
            _fmt = fmt[1];
            _acc = /* Acc_char_literal */Block.__(3, [
                acc,
                fmt[0]
              ]);
            continue ;
        case 13 : 
            var rest$3 = fmt[2];
            var ty = string_of_fmtty(fmt[1]);
            return (function(k,acc,rest$3,ty){
            return function (str) {
              return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                            acc,
                            ty
                          ]), rest$3);
            }
            }(k,acc,rest$3,ty));
        case 14 : 
            var rest$4 = fmt[2];
            var fmtty = fmt[1];
            return (function(k,acc,fmtty,rest$4){
            return function (param) {
              return make_printf(k, o, acc, CamlinternalFormatBasics.concat_fmt(recast(param[0], fmtty), rest$4));
            }
            }(k,acc,fmtty,rest$4));
        case 15 : 
            var rest$5 = fmt[0];
            return (function(k,acc,rest$5){
            return function (f, x) {
              return make_printf(k, o, /* Acc_delay */Block.__(6, [
                            acc,
                            (function (o) {
                                return Curry._2(f, o, x);
                              })
                          ]), rest$5);
            }
            }(k,acc,rest$5));
        case 16 : 
            var rest$6 = fmt[0];
            return (function(k,acc,rest$6){
            return function (f) {
              return make_printf(k, o, /* Acc_delay */Block.__(6, [
                            acc,
                            f
                          ]), rest$6);
            }
            }(k,acc,rest$6));
        case 17 : 
            _fmt = fmt[1];
            _acc = /* Acc_formatting_lit */Block.__(0, [
                acc,
                fmt[0]
              ]);
            continue ;
        case 18 : 
            var match = fmt[0];
            if (match.tag) {
              var rest$7 = fmt[1];
              var k$prime = (function(k,acc,rest$7){
              return function k$prime(koc, kacc) {
                return make_printf(k, koc, /* Acc_formatting_gen */Block.__(1, [
                              acc,
                              /* Acc_open_box */Block.__(1, [kacc])
                            ]), rest$7);
              }
              }(k,acc,rest$7));
              _fmt = match[0][0];
              _acc = /* End_of_acc */0;
              _k = k$prime;
              continue ;
            } else {
              var rest$8 = fmt[1];
              var k$prime$1 = (function(k,acc,rest$8){
              return function k$prime$1(koc, kacc) {
                return make_printf(k, koc, /* Acc_formatting_gen */Block.__(1, [
                              acc,
                              /* Acc_open_tag */Block.__(0, [kacc])
                            ]), rest$8);
              }
              }(k,acc,rest$8));
              _fmt = match[0][0];
              _acc = /* End_of_acc */0;
              _k = k$prime$1;
              continue ;
            }
        case 19 : 
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    1449,
                    4
                  ]
                ];
        case 20 : 
            var rest$9 = fmt[2];
            var new_acc = /* Acc_invalid_arg */Block.__(8, [
                acc,
                "Printf: bad conversion %["
              ]);
            return (function(k,rest$9,new_acc){
            return function (param) {
              return make_printf(k, o, new_acc, rest$9);
            }
            }(k,rest$9,new_acc));
        case 21 : 
            var rest$10 = fmt[1];
            return (function(k,acc,rest$10){
            return function (n) {
              var new_acc_001 = Caml_format.caml_format_int("%u", n);
              var new_acc = /* Acc_data_string */Block.__(4, [
                  acc,
                  new_acc_001
                ]);
              return make_printf(k, o, new_acc, rest$10);
            }
            }(k,acc,rest$10));
        case 22 : 
            var rest$11 = fmt[0];
            return (function(k,acc,rest$11){
            return function (c) {
              var new_acc = /* Acc_data_char */Block.__(5, [
                  acc,
                  c
                ]);
              return make_printf(k, o, new_acc, rest$11);
            }
            }(k,acc,rest$11));
        case 23 : 
            var k$2 = k;
            var o$2 = o;
            var acc$2 = acc;
            var ign = fmt[0];
            var fmt$2 = fmt[1];
            if (typeof ign === "number") {
              if (ign === 3) {
                throw [
                      Caml_builtin_exceptions.assert_failure,
                      /* tuple */[
                        "camlinternalFormat.ml",
                        1517,
                        39
                      ]
                    ];
              } else {
                return make_invalid_arg(k$2, o$2, acc$2, fmt$2);
              }
            } else if (ign.tag === 8) {
              return make_from_fmtty(k$2, o$2, acc$2, ign[1], fmt$2);
            } else {
              return make_invalid_arg(k$2, o$2, acc$2, fmt$2);
            }
        case 24 : 
            return make_custom(k, o, acc, fmt[2], fmt[0], Curry._1(fmt[1], /* () */0));
        
      }
    }
  };
}

function make_from_fmtty(k, o, acc, fmtty, fmt) {
  if (typeof fmtty === "number") {
    return make_invalid_arg(k, o, acc, fmt);
  } else {
    switch (fmtty.tag | 0) {
      case 0 : 
          var rest = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest, fmt);
            });
      case 1 : 
          var rest$1 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$1, fmt);
            });
      case 2 : 
          var rest$2 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$2, fmt);
            });
      case 3 : 
          var rest$3 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$3, fmt);
            });
      case 4 : 
          var rest$4 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$4, fmt);
            });
      case 5 : 
          var rest$5 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$5, fmt);
            });
      case 6 : 
          var rest$6 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$6, fmt);
            });
      case 7 : 
          var rest$7 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$7, fmt);
            });
      case 8 : 
          var rest$8 = fmtty[1];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$8, fmt);
            });
      case 9 : 
          var rest$9 = fmtty[2];
          var ty = trans(symm(fmtty[0]), fmtty[1]);
          return (function (param) {
              return make_from_fmtty(k, o, acc, CamlinternalFormatBasics.concat_fmtty(ty, rest$9), fmt);
            });
      case 10 : 
          var rest$10 = fmtty[0];
          return (function (param, param$1) {
              return make_from_fmtty(k, o, acc, rest$10, fmt);
            });
      case 11 : 
          var rest$11 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$11, fmt);
            });
      case 12 : 
          var rest$12 = fmtty[0];
          return (function (param) {
              return make_from_fmtty(k, o, acc, rest$12, fmt);
            });
      case 13 : 
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  1540,
                  31
                ]
              ];
      case 14 : 
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  1541,
                  31
                ]
              ];
      
    }
  }
}

function make_invalid_arg(k, o, acc, fmt) {
  return make_printf(k, o, /* Acc_invalid_arg */Block.__(8, [
                acc,
                "Printf: bad conversion %_"
              ]), fmt);
}

function make_string_padding(k, o, acc, fmt, pad, trans) {
  if (typeof pad === "number") {
    return (function (x) {
        var new_acc_001 = Curry._1(trans, x);
        var new_acc = /* Acc_data_string */Block.__(4, [
            acc,
            new_acc_001
          ]);
        return make_printf(k, o, new_acc, fmt);
      });
  } else if (pad.tag) {
    var padty = pad[0];
    return (function (w, x) {
        var new_acc_001 = fix_padding(padty, w, Curry._1(trans, x));
        var new_acc = /* Acc_data_string */Block.__(4, [
            acc,
            new_acc_001
          ]);
        return make_printf(k, o, new_acc, fmt);
      });
  } else {
    var width = pad[1];
    var padty$1 = pad[0];
    return (function (x) {
        var new_acc_001 = fix_padding(padty$1, width, Curry._1(trans, x));
        var new_acc = /* Acc_data_string */Block.__(4, [
            acc,
            new_acc_001
          ]);
        return make_printf(k, o, new_acc, fmt);
      });
  }
}

function make_int_padding_precision(k, o, acc, fmt, pad, prec, trans, iconv) {
  if (typeof pad === "number") {
    if (typeof prec === "number") {
      if (prec !== 0) {
        return (function (p, x) {
            var str = fix_int_precision(p, Curry._2(trans, iconv, x));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      } else {
        return (function (x) {
            var str = Curry._2(trans, iconv, x);
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      }
    } else {
      var p = prec[0];
      return (function (x) {
          var str = fix_int_precision(p, Curry._2(trans, iconv, x));
          return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                        acc,
                        str
                      ]), fmt);
        });
    }
  } else if (pad.tag) {
    var padty = pad[0];
    if (typeof prec === "number") {
      if (prec !== 0) {
        return (function (w, p, x) {
            var str = fix_padding(padty, w, fix_int_precision(p, Curry._2(trans, iconv, x)));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      } else {
        return (function (w, x) {
            var str = fix_padding(padty, w, Curry._2(trans, iconv, x));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      }
    } else {
      var p$1 = prec[0];
      return (function (w, x) {
          var str = fix_padding(padty, w, fix_int_precision(p$1, Curry._2(trans, iconv, x)));
          return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                        acc,
                        str
                      ]), fmt);
        });
    }
  } else {
    var w = pad[1];
    var padty$1 = pad[0];
    if (typeof prec === "number") {
      if (prec !== 0) {
        return (function (p, x) {
            var str = fix_padding(padty$1, w, fix_int_precision(p, Curry._2(trans, iconv, x)));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      } else {
        return (function (x) {
            var str = fix_padding(padty$1, w, Curry._2(trans, iconv, x));
            return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      }
    } else {
      var p$2 = prec[0];
      return (function (x) {
          var str = fix_padding(padty$1, w, fix_int_precision(p$2, Curry._2(trans, iconv, x)));
          return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                        acc,
                        str
                      ]), fmt);
        });
    }
  }
}

function make_custom(k, o, acc, rest, arity, f) {
  if (arity) {
    var arity$1 = arity[0];
    return (function (x) {
        return make_custom(k, o, acc, rest, arity$1, Curry._1(f, x));
      });
  } else {
    return make_printf(k, o, /* Acc_data_string */Block.__(4, [
                  acc,
                  f
                ]), rest);
  }
}

function output_acc(o, _acc) {
  while(true) {
    var acc = _acc;
    var exit = 0;
    if (typeof acc === "number") {
      return /* () */0;
    } else {
      switch (acc.tag | 0) {
        case 0 : 
            var s = string_of_formatting_lit(acc[1]);
            output_acc(o, acc[0]);
            return Pervasives.output_string(o, s);
        case 1 : 
            var match = acc[1];
            var p = acc[0];
            output_acc(o, p);
            if (match.tag) {
              Pervasives.output_string(o, "@[");
              _acc = match[0];
              continue ;
            } else {
              Pervasives.output_string(o, "@{");
              _acc = match[0];
              continue ;
            }
        case 2 : 
        case 4 : 
            exit = 1;
            break;
        case 3 : 
        case 5 : 
            exit = 2;
            break;
        case 6 : 
            output_acc(o, acc[0]);
            return Curry._1(acc[1], o);
        case 7 : 
            output_acc(o, acc[0]);
            return Caml_io.caml_ml_flush(o);
        case 8 : 
            output_acc(o, acc[0]);
            throw [
                  Caml_builtin_exceptions.invalid_argument,
                  acc[1]
                ];
        
      }
    }
    switch (exit) {
      case 1 : 
          output_acc(o, acc[0]);
          return Pervasives.output_string(o, acc[1]);
      case 2 : 
          output_acc(o, acc[0]);
          return Caml_io.caml_ml_output_char(o, acc[1]);
      
    }
  };
}

function bufput_acc(b, _acc) {
  while(true) {
    var acc = _acc;
    var exit = 0;
    if (typeof acc === "number") {
      return /* () */0;
    } else {
      switch (acc.tag | 0) {
        case 0 : 
            var s = string_of_formatting_lit(acc[1]);
            bufput_acc(b, acc[0]);
            return $$Buffer.add_string(b, s);
        case 1 : 
            var match = acc[1];
            var p = acc[0];
            bufput_acc(b, p);
            if (match.tag) {
              $$Buffer.add_string(b, "@[");
              _acc = match[0];
              continue ;
            } else {
              $$Buffer.add_string(b, "@{");
              _acc = match[0];
              continue ;
            }
        case 2 : 
        case 4 : 
            exit = 1;
            break;
        case 3 : 
        case 5 : 
            exit = 2;
            break;
        case 6 : 
            bufput_acc(b, acc[0]);
            return Curry._1(acc[1], b);
        case 7 : 
            _acc = acc[0];
            continue ;
        case 8 : 
            bufput_acc(b, acc[0]);
            throw [
                  Caml_builtin_exceptions.invalid_argument,
                  acc[1]
                ];
        
      }
    }
    switch (exit) {
      case 1 : 
          bufput_acc(b, acc[0]);
          return $$Buffer.add_string(b, acc[1]);
      case 2 : 
          bufput_acc(b, acc[0]);
          return $$Buffer.add_char(b, acc[1]);
      
    }
  };
}

function strput_acc(b, _acc) {
  while(true) {
    var acc = _acc;
    var exit = 0;
    if (typeof acc === "number") {
      return /* () */0;
    } else {
      switch (acc.tag | 0) {
        case 0 : 
            var s = string_of_formatting_lit(acc[1]);
            strput_acc(b, acc[0]);
            return $$Buffer.add_string(b, s);
        case 1 : 
            var match = acc[1];
            var p = acc[0];
            strput_acc(b, p);
            if (match.tag) {
              $$Buffer.add_string(b, "@[");
              _acc = match[0];
              continue ;
            } else {
              $$Buffer.add_string(b, "@{");
              _acc = match[0];
              continue ;
            }
        case 2 : 
        case 4 : 
            exit = 1;
            break;
        case 3 : 
        case 5 : 
            exit = 2;
            break;
        case 6 : 
            strput_acc(b, acc[0]);
            return $$Buffer.add_string(b, Curry._1(acc[1], /* () */0));
        case 7 : 
            _acc = acc[0];
            continue ;
        case 8 : 
            strput_acc(b, acc[0]);
            throw [
                  Caml_builtin_exceptions.invalid_argument,
                  acc[1]
                ];
        
      }
    }
    switch (exit) {
      case 1 : 
          strput_acc(b, acc[0]);
          return $$Buffer.add_string(b, acc[1]);
      case 2 : 
          strput_acc(b, acc[0]);
          return $$Buffer.add_char(b, acc[1]);
      
    }
  };
}

function failwith_message(param) {
  var buf = $$Buffer.create(256);
  var k = function (param, acc) {
    strput_acc(buf, acc);
    var s = $$Buffer.contents(buf);
    throw [
          Caml_builtin_exceptions.failure,
          s
        ];
  };
  return make_printf(k, /* () */0, /* End_of_acc */0, param[0]);
}

function open_box_of_string(str) {
  if (str === "") {
    return /* tuple */[
            0,
            /* Pp_box */4
          ];
  } else {
    var len = str.length;
    var invalid_box = function (param) {
      return Curry._1(failwith_message(/* Format */[
                      /* String_literal */Block.__(11, [
                          "invalid box description ",
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "invalid box description %S"
                    ]), str);
    };
    var parse_spaces = function (_i) {
      while(true) {
        var i = _i;
        if (i === len) {
          return i;
        } else {
          var match = Caml_string.get(str, i);
          if (match !== 9) {
            if (match !== 32) {
              return i;
            } else {
              _i = i + 1 | 0;
              continue ;
            }
          } else {
            _i = i + 1 | 0;
            continue ;
          }
        }
      };
    };
    var parse_lword = function (i, _j) {
      while(true) {
        var j = _j;
        if (j === len) {
          return j;
        } else {
          var match = Caml_string.get(str, j);
          if (match > 122 || match < 97) {
            return j;
          } else {
            _j = j + 1 | 0;
            continue ;
          }
        }
      };
    };
    var parse_int = function (i, _j) {
      while(true) {
        var j = _j;
        if (j === len) {
          return j;
        } else {
          var match = Caml_string.get(str, j);
          if (match >= 48) {
            if (match >= 58) {
              return j;
            } else {
              _j = j + 1 | 0;
              continue ;
            }
          } else if (match !== 45) {
            return j;
          } else {
            _j = j + 1 | 0;
            continue ;
          }
        }
      };
    };
    var wstart = parse_spaces(0);
    var wend = parse_lword(wstart, wstart);
    var box_name = $$String.sub(str, wstart, wend - wstart | 0);
    var nstart = parse_spaces(wend);
    var nend = parse_int(nstart, nstart);
    var indent;
    if (nstart === nend) {
      indent = 0;
    } else {
      try {
        indent = Caml_format.caml_int_of_string($$String.sub(str, nstart, nend - nstart | 0));
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        if (exn[0] === Caml_builtin_exceptions.failure) {
          indent = invalid_box(/* () */0);
        } else {
          throw exn;
        }
      }
    }
    var exp_end = parse_spaces(nend);
    if (exp_end !== len) {
      invalid_box(/* () */0);
    }
    var box_type;
    switch (box_name) {
      case "" : 
      case "b" : 
          box_type = /* Pp_box */4;
          break;
      case "h" : 
          box_type = /* Pp_hbox */0;
          break;
      case "hov" : 
          box_type = /* Pp_hovbox */3;
          break;
      case "hv" : 
          box_type = /* Pp_hvbox */2;
          break;
      case "v" : 
          box_type = /* Pp_vbox */1;
          break;
      default:
        box_type = invalid_box(/* () */0);
    }
    return /* tuple */[
            indent,
            box_type
          ];
  }
}

function make_padding_fmt_ebb(pad, fmt) {
  if (typeof pad === "number") {
    return /* Padding_fmt_EBB */[
            /* No_padding */0,
            fmt
          ];
  } else if (pad.tag) {
    return /* Padding_fmt_EBB */[
            /* Arg_padding */Block.__(1, [pad[0]]),
            fmt
          ];
  } else {
    return /* Padding_fmt_EBB */[
            /* Lit_padding */Block.__(0, [
                pad[0],
                pad[1]
              ]),
            fmt
          ];
  }
}

function make_precision_fmt_ebb(prec, fmt) {
  if (typeof prec === "number") {
    if (prec !== 0) {
      return /* Precision_fmt_EBB */[
              /* Arg_precision */1,
              fmt
            ];
    } else {
      return /* Precision_fmt_EBB */[
              /* No_precision */0,
              fmt
            ];
    }
  } else {
    return /* Precision_fmt_EBB */[
            /* Lit_precision */[prec[0]],
            fmt
          ];
  }
}

function make_padprec_fmt_ebb(pad, prec, fmt) {
  var match = make_precision_fmt_ebb(prec, fmt);
  var fmt$prime = match[1];
  var prec$1 = match[0];
  if (typeof pad === "number") {
    return /* Padprec_fmt_EBB */[
            /* No_padding */0,
            prec$1,
            fmt$prime
          ];
  } else if (pad.tag) {
    return /* Padprec_fmt_EBB */[
            /* Arg_padding */Block.__(1, [pad[0]]),
            prec$1,
            fmt$prime
          ];
  } else {
    return /* Padprec_fmt_EBB */[
            /* Lit_padding */Block.__(0, [
                pad[0],
                pad[1]
              ]),
            prec$1,
            fmt$prime
          ];
  }
}

function fmt_ebb_of_string(legacy_behavior, str) {
  var legacy_behavior$1 = legacy_behavior !== undefined ? legacy_behavior : true;
  var invalid_format_message = function (str_ind, msg) {
    return Curry._3(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, %s"
                  ]), str, str_ind, msg);
  };
  var invalid_format_without = function (str_ind, c, s) {
    return Curry._4(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", '",
                                        /* Char */Block.__(0, [/* String_literal */Block.__(11, [
                                                "' without ",
                                                /* String */Block.__(2, [
                                                    /* No_padding */0,
                                                    /* End_of_format */0
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, '%c' without %s"
                  ]), str, str_ind, c, s);
  };
  var expected_character = function (str_ind, expected, read) {
    return Curry._4(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                " expected, read ",
                                                /* Caml_char */Block.__(1, [/* End_of_format */0])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, %s expected, read %C"
                  ]), str, str_ind, expected, read);
  };
  var compute_int_conv = function (pct_ind, str_ind, _plus, _sharp, _space, symb) {
    while(true) {
      var space = _space;
      var sharp = _sharp;
      var plus = _plus;
      var exit = 0;
      var exit$1 = 0;
      if (plus) {
        if (sharp) {
          exit$1 = 2;
        } else if (space) {
          exit = 1;
        } else if (symb !== 100) {
          if (symb !== 105) {
            exit = 1;
          } else {
            return /* Int_pi */4;
          }
        } else {
          return /* Int_pd */1;
        }
      } else if (sharp) {
        if (space) {
          exit$1 = 2;
        } else if (symb !== 88) {
          if (symb !== 111) {
            if (symb !== 120) {
              exit$1 = 2;
            } else {
              return /* Int_Cx */7;
            }
          } else {
            return /* Int_Co */11;
          }
        } else {
          return /* Int_CX */9;
        }
      } else if (space) {
        if (symb !== 100) {
          if (symb !== 105) {
            exit = 1;
          } else {
            return /* Int_si */5;
          }
        } else {
          return /* Int_sd */2;
        }
      } else {
        switch (symb) {
          case 88 : 
              return /* Int_X */8;
          case 100 : 
              return /* Int_d */0;
          case 105 : 
              return /* Int_i */3;
          case 111 : 
              return /* Int_o */10;
          case 117 : 
              return /* Int_u */12;
          case 89 : 
          case 90 : 
          case 91 : 
          case 92 : 
          case 93 : 
          case 94 : 
          case 95 : 
          case 96 : 
          case 97 : 
          case 98 : 
          case 99 : 
          case 101 : 
          case 102 : 
          case 103 : 
          case 104 : 
          case 106 : 
          case 107 : 
          case 108 : 
          case 109 : 
          case 110 : 
          case 112 : 
          case 113 : 
          case 114 : 
          case 115 : 
          case 116 : 
          case 118 : 
          case 119 : 
              exit = 1;
              break;
          case 120 : 
              return /* Int_x */6;
          default:
            exit = 1;
        }
      }
      if (exit$1 === 2) {
        var exit$2 = 0;
        switch (symb) {
          case 88 : 
              if (legacy_behavior$1) {
                return /* Int_CX */9;
              } else {
                exit = 1;
              }
              break;
          case 111 : 
              if (legacy_behavior$1) {
                return /* Int_Co */11;
              } else {
                exit = 1;
              }
              break;
          case 100 : 
          case 105 : 
          case 117 : 
              exit$2 = 3;
              break;
          case 89 : 
          case 90 : 
          case 91 : 
          case 92 : 
          case 93 : 
          case 94 : 
          case 95 : 
          case 96 : 
          case 97 : 
          case 98 : 
          case 99 : 
          case 101 : 
          case 102 : 
          case 103 : 
          case 104 : 
          case 106 : 
          case 107 : 
          case 108 : 
          case 109 : 
          case 110 : 
          case 112 : 
          case 113 : 
          case 114 : 
          case 115 : 
          case 116 : 
          case 118 : 
          case 119 : 
              exit = 1;
              break;
          case 120 : 
              if (legacy_behavior$1) {
                return /* Int_Cx */7;
              } else {
                exit = 1;
              }
              break;
          default:
            exit = 1;
        }
        if (exit$2 === 3) {
          if (legacy_behavior$1) {
            _sharp = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "'#'");
          }
        }
        
      }
      if (exit === 1) {
        if (plus) {
          if (space) {
            if (legacy_behavior$1) {
              _space = false;
              continue ;
            } else {
              return incompatible_flag(pct_ind, str_ind, /* " " */32, "'+'");
            }
          } else if (legacy_behavior$1) {
            _plus = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "'+'");
          }
        } else if (space) {
          if (legacy_behavior$1) {
            _space = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "' '");
          }
        } else {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  2719,
                  28
                ]
              ];
        }
      }
      
    };
  };
  var incompatible_flag = function (pct_ind, str_ind, symb, option) {
    var subfmt = $$String.sub(str, pct_ind, str_ind - pct_ind | 0);
    return Curry._5(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                " is incompatible with '",
                                                /* Char */Block.__(0, [/* String_literal */Block.__(11, [
                                                        "' in sub-format ",
                                                        /* Caml_string */Block.__(3, [
                                                            /* No_padding */0,
                                                            /* End_of_format */0
                                                          ])
                                                      ])])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"
                  ]), str, pct_ind, option, symb, subfmt);
  };
  var parse_positive = function (_str_ind, end_ind, _acc) {
    while(true) {
      var acc = _acc;
      var str_ind = _str_ind;
      if (str_ind === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      var c = Caml_string.get(str, str_ind);
      if (c > 57 || c < 48) {
        return /* tuple */[
                str_ind,
                acc
              ];
      } else {
        var new_acc = Caml_int32.imul(acc, 10) + (c - /* "0" */48 | 0) | 0;
        _acc = new_acc;
        _str_ind = str_ind + 1 | 0;
        continue ;
      }
    };
  };
  var parse_after_precision = function (pct_ind, str_ind, end_ind, minus, plus, sharp, space, ign, pad, prec) {
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var parse_conv = function (padprec) {
      return parse_conversion(pct_ind, str_ind + 1 | 0, end_ind, plus, sharp, space, ign, pad, prec, padprec, Caml_string.get(str, str_ind));
    };
    if (typeof pad === "number") {
      var exit = 0;
      if (typeof prec === "number" && prec === 0) {
        return parse_conv(/* No_padding */0);
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (minus) {
          if (typeof prec === "number") {
            return parse_conv(/* Arg_padding */Block.__(1, [/* Left */0]));
          } else {
            return parse_conv(/* Lit_padding */Block.__(0, [
                          /* Left */0,
                          prec[0]
                        ]));
          }
        } else if (typeof prec === "number") {
          return parse_conv(/* Arg_padding */Block.__(1, [/* Right */1]));
        } else {
          return parse_conv(/* Lit_padding */Block.__(0, [
                        /* Right */1,
                        prec[0]
                      ]));
        }
      }
      
    } else {
      return parse_conv(pad);
    }
  };
  var parse_after_padding = function (pct_ind, str_ind, end_ind, minus, plus, sharp, space, ign, pad) {
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var symb = Caml_string.get(str, str_ind);
    if (symb !== 46) {
      return parse_conversion(pct_ind, str_ind + 1 | 0, end_ind, plus, sharp, space, ign, pad, /* No_precision */0, pad, symb);
    } else {
      var pct_ind$1 = pct_ind;
      var str_ind$1 = str_ind + 1 | 0;
      var end_ind$1 = end_ind;
      var minus$1 = minus;
      var plus$1 = plus;
      var sharp$1 = sharp;
      var space$1 = space;
      var ign$1 = ign;
      var pad$1 = pad;
      if (str_ind$1 === end_ind$1) {
        invalid_format_message(end_ind$1, "unexpected end of format");
      }
      var parse_literal = function (minus, str_ind) {
        var match = parse_positive(str_ind, end_ind$1, 0);
        return parse_after_precision(pct_ind$1, match[0], end_ind$1, minus, plus$1, sharp$1, space$1, ign$1, pad$1, /* Lit_precision */[match[1]]);
      };
      var symb$1 = Caml_string.get(str, str_ind$1);
      var exit = 0;
      var exit$1 = 0;
      if (symb$1 >= 48) {
        if (symb$1 >= 58) {
          exit = 1;
        } else {
          return parse_literal(minus$1, str_ind$1);
        }
      } else if (symb$1 >= 42) {
        switch (symb$1 - 42 | 0) {
          case 0 : 
              return parse_after_precision(pct_ind$1, str_ind$1 + 1 | 0, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, pad$1, /* Arg_precision */1);
          case 1 : 
          case 3 : 
              exit$1 = 2;
              break;
          case 2 : 
          case 4 : 
          case 5 : 
              exit = 1;
              break;
          
        }
      } else {
        exit = 1;
      }
      if (exit$1 === 2) {
        if (legacy_behavior$1) {
          return parse_literal(minus$1 || symb$1 === /* "-" */45, str_ind$1 + 1 | 0);
        } else {
          exit = 1;
        }
      }
      if (exit === 1) {
        if (legacy_behavior$1) {
          return parse_after_precision(pct_ind$1, str_ind$1, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, pad$1, /* Lit_precision */[0]);
        } else {
          return invalid_format_without(str_ind$1 - 1 | 0, /* "." */46, "precision");
        }
      }
      
    }
  };
  var parse_literal = function (lit_start, _str_ind, end_ind) {
    while(true) {
      var str_ind = _str_ind;
      if (str_ind === end_ind) {
        return add_literal(lit_start, str_ind, /* End_of_format */0);
      } else {
        var match = Caml_string.get(str, str_ind);
        if (match !== 37) {
          if (match !== 64) {
            _str_ind = str_ind + 1 | 0;
            continue ;
          } else {
            var match$1 = parse_after_at(str_ind + 1 | 0, end_ind);
            return add_literal(lit_start, str_ind, match$1[0]);
          }
        } else {
          var match$2 = parse_format(str_ind, end_ind);
          return add_literal(lit_start, str_ind, match$2[0]);
        }
      }
    };
  };
  var parse_format = function (pct_ind, end_ind) {
    var pct_ind$1 = pct_ind;
    var str_ind = pct_ind + 1 | 0;
    var end_ind$1 = end_ind;
    if (str_ind === end_ind$1) {
      invalid_format_message(end_ind$1, "unexpected end of format");
    }
    var match = Caml_string.get(str, str_ind);
    if (match !== 95) {
      return parse_flags(pct_ind$1, str_ind, end_ind$1, false);
    } else {
      return parse_flags(pct_ind$1, str_ind + 1 | 0, end_ind$1, true);
    }
  };
  var parse_after_at = function (str_ind, end_ind) {
    if (str_ind === end_ind) {
      return /* Fmt_EBB */[/* Char_literal */Block.__(12, [
                  /* "@" */64,
                  /* End_of_format */0
                ])];
    } else {
      var c = Caml_string.get(str, str_ind);
      var exit = 0;
      if (c >= 65) {
        if (c >= 94) {
          switch (c) {
            case 123 : 
                return parse_tag(true, str_ind + 1 | 0, end_ind);
            case 124 : 
                exit = 1;
                break;
            case 125 : 
                var beg_ind = str_ind + 1 | 0;
                var match = parse_literal(beg_ind, beg_ind, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Close_tag */1,
                            match[0]
                          ])];
            default:
              exit = 1;
          }
        } else if (c >= 91) {
          switch (c - 91 | 0) {
            case 0 : 
                return parse_tag(false, str_ind + 1 | 0, end_ind);
            case 1 : 
                exit = 1;
                break;
            case 2 : 
                var beg_ind$1 = str_ind + 1 | 0;
                var match$1 = parse_literal(beg_ind$1, beg_ind$1, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Close_box */0,
                            match$1[0]
                          ])];
            
          }
        } else {
          exit = 1;
        }
      } else if (c !== 10) {
        if (c >= 32) {
          switch (c - 32 | 0) {
            case 0 : 
                var beg_ind$2 = str_ind + 1 | 0;
                var match$2 = parse_literal(beg_ind$2, beg_ind$2, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@ ",
                                1,
                                0
                              ]),
                            match$2[0]
                          ])];
            case 5 : 
                if ((str_ind + 1 | 0) < end_ind && Caml_string.get(str, str_ind + 1 | 0) === /* "%" */37) {
                  var beg_ind$3 = str_ind + 2 | 0;
                  var match$3 = parse_literal(beg_ind$3, beg_ind$3, end_ind);
                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                              /* Escaped_percent */6,
                              match$3[0]
                            ])];
                } else {
                  var match$4 = parse_literal(str_ind, str_ind, end_ind);
                  return /* Fmt_EBB */[/* Char_literal */Block.__(12, [
                              /* "@" */64,
                              match$4[0]
                            ])];
                }
            case 12 : 
                var beg_ind$4 = str_ind + 1 | 0;
                var match$5 = parse_literal(beg_ind$4, beg_ind$4, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@,",
                                0,
                                0
                              ]),
                            match$5[0]
                          ])];
            case 14 : 
                var beg_ind$5 = str_ind + 1 | 0;
                var match$6 = parse_literal(beg_ind$5, beg_ind$5, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Flush_newline */4,
                            match$6[0]
                          ])];
            case 27 : 
                var str_ind$1 = str_ind + 1 | 0;
                var end_ind$1 = end_ind;
                var match$7;
                try {
                  if (str_ind$1 === end_ind$1 || Caml_string.get(str, str_ind$1) !== /* "<" */60) {
                    throw Caml_builtin_exceptions.not_found;
                  }
                  var str_ind_1 = parse_spaces(str_ind$1 + 1 | 0, end_ind$1);
                  var match$8 = Caml_string.get(str, str_ind_1);
                  var exit$1 = 0;
                  if (match$8 >= 48) {
                    if (match$8 >= 58) {
                      throw Caml_builtin_exceptions.not_found;
                    } else {
                      exit$1 = 1;
                    }
                  } else if (match$8 !== 45) {
                    throw Caml_builtin_exceptions.not_found;
                  } else {
                    exit$1 = 1;
                  }
                  if (exit$1 === 1) {
                    var match$9 = parse_integer(str_ind_1, end_ind$1);
                    var width = match$9[1];
                    var str_ind_3 = parse_spaces(match$9[0], end_ind$1);
                    var match$10 = Caml_string.get(str, str_ind_3);
                    var switcher = match$10 - 45 | 0;
                    if (switcher > 12 || switcher < 0) {
                      if (switcher !== 17) {
                        throw Caml_builtin_exceptions.not_found;
                      } else {
                        var s = $$String.sub(str, str_ind$1 - 2 | 0, (str_ind_3 - str_ind$1 | 0) + 3 | 0);
                        match$7 = /* tuple */[
                          str_ind_3 + 1 | 0,
                          /* Break */Block.__(0, [
                              s,
                              width,
                              0
                            ])
                        ];
                      }
                    } else if (switcher === 2 || switcher === 1) {
                      throw Caml_builtin_exceptions.not_found;
                    } else {
                      var match$11 = parse_integer(str_ind_3, end_ind$1);
                      var str_ind_5 = parse_spaces(match$11[0], end_ind$1);
                      if (Caml_string.get(str, str_ind_5) !== /* ">" */62) {
                        throw Caml_builtin_exceptions.not_found;
                      }
                      var s$1 = $$String.sub(str, str_ind$1 - 2 | 0, (str_ind_5 - str_ind$1 | 0) + 3 | 0);
                      match$7 = /* tuple */[
                        str_ind_5 + 1 | 0,
                        /* Break */Block.__(0, [
                            s$1,
                            width,
                            match$11[1]
                          ])
                      ];
                    }
                  }
                  
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn === Caml_builtin_exceptions.not_found || exn[0] === Caml_builtin_exceptions.failure) {
                    match$7 = /* tuple */[
                      str_ind$1,
                      /* Break */Block.__(0, [
                          "@;",
                          1,
                          0
                        ])
                    ];
                  } else {
                    throw exn;
                  }
                }
                var next_ind = match$7[0];
                var match$12 = parse_literal(next_ind, next_ind, end_ind$1);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            match$7[1],
                            match$12[0]
                          ])];
            case 28 : 
                var str_ind$2 = str_ind + 1 | 0;
                var end_ind$2 = end_ind;
                var match$13;
                try {
                  var str_ind_1$1 = parse_spaces(str_ind$2, end_ind$2);
                  var match$14 = Caml_string.get(str, str_ind_1$1);
                  var exit$2 = 0;
                  if (match$14 >= 48) {
                    if (match$14 >= 58) {
                      match$13 = undefined;
                    } else {
                      exit$2 = 1;
                    }
                  } else if (match$14 !== 45) {
                    match$13 = undefined;
                  } else {
                    exit$2 = 1;
                  }
                  if (exit$2 === 1) {
                    var match$15 = parse_integer(str_ind_1$1, end_ind$2);
                    var str_ind_3$1 = parse_spaces(match$15[0], end_ind$2);
                    if (Caml_string.get(str, str_ind_3$1) !== /* ">" */62) {
                      throw Caml_builtin_exceptions.not_found;
                    }
                    var s$2 = $$String.sub(str, str_ind$2 - 2 | 0, (str_ind_3$1 - str_ind$2 | 0) + 3 | 0);
                    match$13 = /* tuple */[
                      str_ind_3$1 + 1 | 0,
                      /* Magic_size */Block.__(1, [
                          s$2,
                          match$15[1]
                        ])
                    ];
                  }
                  
                }
                catch (raw_exn$1){
                  var exn$1 = Js_exn.internalToOCamlException(raw_exn$1);
                  if (exn$1 === Caml_builtin_exceptions.not_found || exn$1[0] === Caml_builtin_exceptions.failure) {
                    match$13 = undefined;
                  } else {
                    throw exn$1;
                  }
                }
                if (match$13 !== undefined) {
                  var match$16 = match$13;
                  var next_ind$1 = match$16[0];
                  var match$17 = parse_literal(next_ind$1, next_ind$1, end_ind$2);
                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                              match$16[1],
                              match$17[0]
                            ])];
                } else {
                  var match$18 = parse_literal(str_ind$2, str_ind$2, end_ind$2);
                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                              /* Scan_indic */Block.__(2, [/* "<" */60]),
                              match$18[0]
                            ])];
                }
            case 1 : 
            case 2 : 
            case 3 : 
            case 4 : 
            case 6 : 
            case 7 : 
            case 8 : 
            case 9 : 
            case 10 : 
            case 11 : 
            case 13 : 
            case 15 : 
            case 16 : 
            case 17 : 
            case 18 : 
            case 19 : 
            case 20 : 
            case 21 : 
            case 22 : 
            case 23 : 
            case 24 : 
            case 25 : 
            case 26 : 
            case 29 : 
            case 30 : 
                exit = 1;
                break;
            case 31 : 
                var beg_ind$6 = str_ind + 1 | 0;
                var match$19 = parse_literal(beg_ind$6, beg_ind$6, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* FFlush */2,
                            match$19[0]
                          ])];
            case 32 : 
                var beg_ind$7 = str_ind + 1 | 0;
                var match$20 = parse_literal(beg_ind$7, beg_ind$7, end_ind);
                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                            /* Escaped_at */5,
                            match$20[0]
                          ])];
            
          }
        } else {
          exit = 1;
        }
      } else {
        var beg_ind$8 = str_ind + 1 | 0;
        var match$21 = parse_literal(beg_ind$8, beg_ind$8, end_ind);
        return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                    /* Force_newline */3,
                    match$21[0]
                  ])];
      }
      if (exit === 1) {
        var beg_ind$9 = str_ind + 1 | 0;
        var match$22 = parse_literal(beg_ind$9, beg_ind$9, end_ind);
        return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [
                    /* Scan_indic */Block.__(2, [c]),
                    match$22[0]
                  ])];
      }
      
    }
  };
  var add_literal = function (lit_start, str_ind, fmt) {
    var size = str_ind - lit_start | 0;
    if (size !== 0) {
      if (size !== 1) {
        return /* Fmt_EBB */[/* String_literal */Block.__(11, [
                    $$String.sub(str, lit_start, size),
                    fmt
                  ])];
      } else {
        return /* Fmt_EBB */[/* Char_literal */Block.__(12, [
                    Caml_string.get(str, lit_start),
                    fmt
                  ])];
      }
    } else {
      return /* Fmt_EBB */[fmt];
    }
  };
  var parse_spaces = function (_str_ind, end_ind) {
    while(true) {
      var str_ind = _str_ind;
      if (str_ind === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      if (Caml_string.get(str, str_ind) === /* " " */32) {
        _str_ind = str_ind + 1 | 0;
        continue ;
      } else {
        return str_ind;
      }
    };
  };
  var parse_integer = function (str_ind, end_ind) {
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var match = Caml_string.get(str, str_ind);
    if (match >= 48) {
      if (match >= 58) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                2624,
                11
              ]
            ];
      } else {
        return parse_positive(str_ind, end_ind, 0);
      }
    } else if (match !== 45) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "camlinternalFormat.ml",
              2624,
              11
            ]
          ];
    } else {
      if ((str_ind + 1 | 0) === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      var c = Caml_string.get(str, str_ind + 1 | 0);
      if (c > 57 || c < 48) {
        return expected_character(str_ind + 1 | 0, "digit", c);
      } else {
        var match$1 = parse_positive(str_ind + 1 | 0, end_ind, 0);
        return /* tuple */[
                match$1[0],
                -match$1[1] | 0
              ];
      }
    }
  };
  var compute_float_conv = function (pct_ind, str_ind, _plus, _space, symb) {
    while(true) {
      var space = _space;
      var plus = _plus;
      if (plus) {
        if (space) {
          if (legacy_behavior$1) {
            _space = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, /* " " */32, "'+'");
          }
        } else {
          var exit = 0;
          if (symb >= 72) {
            switch (symb) {
              case 101 : 
                  return /* Float_pe */4;
              case 102 : 
                  return /* Float_pf */1;
              case 103 : 
                  return /* Float_pg */10;
              default:
                exit = 1;
            }
          } else if (symb >= 69) {
            switch (symb - 69 | 0) {
              case 0 : 
                  return /* Float_pE */7;
              case 1 : 
                  exit = 1;
                  break;
              case 2 : 
                  return /* Float_pG */13;
              
            }
          } else {
            exit = 1;
          }
          if (exit === 1) {
            if (legacy_behavior$1) {
              _plus = false;
              continue ;
            } else {
              return incompatible_flag(pct_ind, str_ind, symb, "'+'");
            }
          }
          
        }
      } else if (space) {
        var exit$1 = 0;
        if (symb >= 72) {
          switch (symb) {
            case 101 : 
                return /* Float_se */5;
            case 102 : 
                return /* Float_sf */2;
            case 103 : 
                return /* Float_sg */11;
            default:
              exit$1 = 1;
          }
        } else if (symb >= 69) {
          switch (symb - 69 | 0) {
            case 0 : 
                return /* Float_sE */8;
            case 1 : 
                exit$1 = 1;
                break;
            case 2 : 
                return /* Float_sG */14;
            
          }
        } else {
          exit$1 = 1;
        }
        if (exit$1 === 1) {
          if (legacy_behavior$1) {
            _space = false;
            continue ;
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "' '");
          }
        }
        
      } else if (symb >= 72) {
        switch (symb) {
          case 101 : 
              return /* Float_e */3;
          case 102 : 
              return /* Float_f */0;
          case 103 : 
              return /* Float_g */9;
          default:
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    2747,
                    25
                  ]
                ];
        }
      } else if (symb >= 69) {
        switch (symb - 69 | 0) {
          case 0 : 
              return /* Float_E */6;
          case 1 : 
              return /* Float_F */15;
          case 2 : 
              return /* Float_G */12;
          
        }
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "camlinternalFormat.ml",
                2747,
                25
              ]
            ];
      }
    };
  };
  var search_subformat_end = function (_str_ind, end_ind, c) {
    while(true) {
      var str_ind = _str_ind;
      if (str_ind === end_ind) {
        Curry._3(failwith_message(/* Format */[
                  /* String_literal */Block.__(11, [
                      "invalid format ",
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              ": unclosed sub-format, expected \"",
                              /* Char_literal */Block.__(12, [
                                  /* "%" */37,
                                  /* Char */Block.__(0, [/* String_literal */Block.__(11, [
                                          "\" at character number ",
                                          /* Int */Block.__(4, [
                                              /* Int_d */0,
                                              /* No_padding */0,
                                              /* No_precision */0,
                                              /* End_of_format */0
                                            ])
                                        ])])
                                ])
                            ])
                        ])
                    ]),
                  "invalid format %S: unclosed sub-format, expected \"%%%c\" at character number %d"
                ]), str, c, end_ind);
      }
      var match = Caml_string.get(str, str_ind);
      if (match !== 37) {
        _str_ind = str_ind + 1 | 0;
        continue ;
      } else {
        if ((str_ind + 1 | 0) === end_ind) {
          invalid_format_message(end_ind, "unexpected end of format");
        }
        if (Caml_string.get(str, str_ind + 1 | 0) === c) {
          return str_ind;
        } else {
          var match$1 = Caml_string.get(str, str_ind + 1 | 0);
          var exit = 0;
          if (match$1 >= 95) {
            if (match$1 >= 123) {
              if (match$1 >= 126) {
                exit = 1;
              } else {
                switch (match$1 - 123 | 0) {
                  case 0 : 
                      var sub_end = search_subformat_end(str_ind + 2 | 0, end_ind, /* "}" */125);
                      _str_ind = sub_end + 2 | 0;
                      continue ;
                  case 1 : 
                      exit = 1;
                      break;
                  case 2 : 
                      return expected_character(str_ind + 1 | 0, "character ')'", /* "}" */125);
                  
                }
              }
            } else if (match$1 >= 96) {
              exit = 1;
            } else {
              if ((str_ind + 2 | 0) === end_ind) {
                invalid_format_message(end_ind, "unexpected end of format");
              }
              var match$2 = Caml_string.get(str, str_ind + 2 | 0);
              if (match$2 !== 40) {
                if (match$2 !== 123) {
                  _str_ind = str_ind + 3 | 0;
                  continue ;
                } else {
                  var sub_end$1 = search_subformat_end(str_ind + 3 | 0, end_ind, /* "}" */125);
                  _str_ind = sub_end$1 + 2 | 0;
                  continue ;
                }
              } else {
                var sub_end$2 = search_subformat_end(str_ind + 3 | 0, end_ind, /* ")" */41);
                _str_ind = sub_end$2 + 2 | 0;
                continue ;
              }
            }
          } else if (match$1 !== 40) {
            if (match$1 !== 41) {
              exit = 1;
            } else {
              return expected_character(str_ind + 1 | 0, "character '}'", /* ")" */41);
            }
          } else {
            var sub_end$3 = search_subformat_end(str_ind + 2 | 0, end_ind, /* ")" */41);
            _str_ind = sub_end$3 + 2 | 0;
            continue ;
          }
          if (exit === 1) {
            _str_ind = str_ind + 2 | 0;
            continue ;
          }
          
        }
      }
    };
  };
  var parse_conversion = function (pct_ind, str_ind, end_ind, plus, sharp, space, ign, pad, prec, padprec, symb) {
    var plus_used = false;
    var sharp_used = false;
    var space_used = false;
    var ign_used = /* record */[/* contents */false];
    var pad_used = false;
    var prec_used = /* record */[/* contents */false];
    var check_no_0 = function (symb, pad) {
      if (typeof pad === "number") {
        return pad;
      } else if (pad.tag) {
        if (pad[0] >= 2) {
          if (legacy_behavior$1) {
            return /* Arg_padding */Block.__(1, [/* Right */1]);
          } else {
            return incompatible_flag(pct_ind, str_ind, symb, "0");
          }
        } else {
          return pad;
        }
      } else if (pad[0] >= 2) {
        if (legacy_behavior$1) {
          return /* Lit_padding */Block.__(0, [
                    /* Right */1,
                    pad[1]
                  ]);
        } else {
          return incompatible_flag(pct_ind, str_ind, symb, "0");
        }
      } else {
        return pad;
      }
    };
    var opt_of_pad = function (c, pad) {
      if (typeof pad === "number") {
        return undefined;
      } else if (pad.tag) {
        return incompatible_flag(pct_ind, str_ind, c, "'*'");
      } else {
        switch (pad[0]) {
          case 0 : 
              if (legacy_behavior$1) {
                return pad[1];
              } else {
                return incompatible_flag(pct_ind, str_ind, c, "'-'");
              }
          case 1 : 
              return pad[1];
          case 2 : 
              if (legacy_behavior$1) {
                return pad[1];
              } else {
                return incompatible_flag(pct_ind, str_ind, c, "'0'");
              }
          
        }
      }
    };
    var get_prec_opt = function (param) {
      prec_used[0] = true;
      if (typeof prec === "number") {
        if (prec !== 0) {
          return incompatible_flag(pct_ind, str_ind, /* "_" */95, "'*'");
        } else {
          return undefined;
        }
      } else {
        return prec[0];
      }
    };
    var fmt_result;
    var exit = 0;
    var exit$1 = 0;
    var exit$2 = 0;
    if (symb >= 124) {
      exit$1 = 6;
    } else {
      switch (symb) {
        case 33 : 
            var match = parse_literal(str_ind, str_ind, end_ind);
            fmt_result = /* Fmt_EBB */[/* Flush */Block.__(10, [match[0]])];
            break;
        case 40 : 
            var sub_end = search_subformat_end(str_ind, end_ind, /* ")" */41);
            var beg_ind = sub_end + 2 | 0;
            var match$1 = parse_literal(beg_ind, beg_ind, end_ind);
            var fmt_rest = match$1[0];
            var match$2 = parse_literal(str_ind, str_ind, sub_end);
            var sub_fmtty = fmtty_of_fmt(match$2[0]);
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored_000 = opt_of_pad(/* "_" */95, pad);
              var ignored = /* Ignored_format_subst */Block.__(8, [
                  ignored_000,
                  sub_fmtty
                ]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored,
                    fmt_rest
                  ])];
            } else {
              pad_used = true;
              fmt_result = /* Fmt_EBB */[/* Format_subst */Block.__(14, [
                    opt_of_pad(/* "(" */40, pad),
                    sub_fmtty,
                    fmt_rest
                  ])];
            }
            break;
        case 44 : 
            fmt_result = parse_literal(str_ind, str_ind, end_ind);
            break;
        case 37 : 
        case 64 : 
            exit$1 = 4;
            break;
        case 67 : 
            var match$3 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$1 = match$3[0];
            fmt_result = (ign_used[0] = true, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    /* Ignored_caml_char */1,
                    fmt_rest$1
                  ])] : /* Fmt_EBB */[/* Caml_char */Block.__(1, [fmt_rest$1])];
            break;
        case 78 : 
            var match$4 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$2 = match$4[0];
            if (ign_used[0] = true, ign) {
              var ignored$1 = /* Ignored_scan_get_counter */Block.__(10, [/* Token_counter */2]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$1,
                    fmt_rest$2
                  ])];
            } else {
              fmt_result = /* Fmt_EBB */[/* Scan_get_counter */Block.__(21, [
                    /* Token_counter */2,
                    fmt_rest$2
                  ])];
            }
            break;
        case 83 : 
            pad_used = true;
            var pad$1 = check_no_0(symb, padprec);
            var match$5 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$3 = match$5[0];
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored$2 = /* Ignored_caml_string */Block.__(1, [opt_of_pad(/* "_" */95, padprec)]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$2,
                    fmt_rest$3
                  ])];
            } else {
              var match$6 = make_padding_fmt_ebb(pad$1, fmt_rest$3);
              fmt_result = /* Fmt_EBB */[/* Caml_string */Block.__(3, [
                    match$6[0],
                    match$6[1]
                  ])];
            }
            break;
        case 91 : 
            var match$7 = parse_char_set(str_ind, end_ind);
            var char_set = match$7[1];
            var next_ind = match$7[0];
            var match$8 = parse_literal(next_ind, next_ind, end_ind);
            var fmt_rest$4 = match$8[0];
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored_000$1 = opt_of_pad(/* "_" */95, pad);
              var ignored$3 = /* Ignored_scan_char_set */Block.__(9, [
                  ignored_000$1,
                  char_set
                ]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$3,
                    fmt_rest$4
                  ])];
            } else {
              pad_used = true;
              fmt_result = /* Fmt_EBB */[/* Scan_char_set */Block.__(20, [
                    opt_of_pad(/* "[" */91, pad),
                    char_set,
                    fmt_rest$4
                  ])];
            }
            break;
        case 32 : 
        case 35 : 
        case 43 : 
        case 45 : 
        case 95 : 
            exit$1 = 5;
            break;
        case 97 : 
            var match$9 = parse_literal(str_ind, str_ind, end_ind);
            fmt_result = /* Fmt_EBB */[/* Alpha */Block.__(15, [match$9[0]])];
            break;
        case 66 : 
        case 98 : 
            exit$1 = 3;
            break;
        case 99 : 
            var char_format = function (fmt_rest) {
              if (ign_used[0] = true, ign) {
                return /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                            /* Ignored_char */0,
                            fmt_rest
                          ])];
              } else {
                return /* Fmt_EBB */[/* Char */Block.__(0, [fmt_rest])];
              }
            };
            var scan_format = function (fmt_rest) {
              if (ign_used[0] = true, ign) {
                return /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                            /* Ignored_scan_next_char */4,
                            fmt_rest
                          ])];
              } else {
                return /* Fmt_EBB */[/* Scan_next_char */Block.__(22, [fmt_rest])];
              }
            };
            var match$10 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$5 = match$10[0];
            pad_used = true;
            var match$11 = opt_of_pad(/* "c" */99, pad);
            fmt_result = match$11 !== undefined ? (
                match$11 !== 0 ? (
                    legacy_behavior$1 ? char_format(fmt_rest$5) : invalid_format_message(str_ind, "non-zero widths are unsupported for %c conversions")
                  ) : scan_format(fmt_rest$5)
              ) : char_format(fmt_rest$5);
            break;
        case 69 : 
        case 70 : 
        case 71 : 
        case 101 : 
        case 102 : 
        case 103 : 
            exit$1 = 2;
            break;
        case 76 : 
        case 108 : 
        case 110 : 
            exit$2 = 8;
            break;
        case 114 : 
            var match$12 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$6 = match$12[0];
            fmt_result = (ign_used[0] = true, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    /* Ignored_reader */3,
                    fmt_rest$6
                  ])] : /* Fmt_EBB */[/* Reader */Block.__(19, [fmt_rest$6])];
            break;
        case 115 : 
            pad_used = true;
            var pad$2 = check_no_0(symb, padprec);
            var match$13 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$7 = match$13[0];
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored$4 = /* Ignored_string */Block.__(0, [opt_of_pad(/* "_" */95, padprec)]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$4,
                    fmt_rest$7
                  ])];
            } else {
              var match$14 = make_padding_fmt_ebb(pad$2, fmt_rest$7);
              fmt_result = /* Fmt_EBB */[/* String */Block.__(2, [
                    match$14[0],
                    match$14[1]
                  ])];
            }
            break;
        case 116 : 
            var match$15 = parse_literal(str_ind, str_ind, end_ind);
            fmt_result = /* Fmt_EBB */[/* Theta */Block.__(16, [match$15[0]])];
            break;
        case 88 : 
        case 100 : 
        case 105 : 
        case 111 : 
        case 117 : 
        case 120 : 
            exit$2 = 7;
            break;
        case 0 : 
        case 1 : 
        case 2 : 
        case 3 : 
        case 4 : 
        case 5 : 
        case 6 : 
        case 7 : 
        case 8 : 
        case 9 : 
        case 10 : 
        case 11 : 
        case 12 : 
        case 13 : 
        case 14 : 
        case 15 : 
        case 16 : 
        case 17 : 
        case 18 : 
        case 19 : 
        case 20 : 
        case 21 : 
        case 22 : 
        case 23 : 
        case 24 : 
        case 25 : 
        case 26 : 
        case 27 : 
        case 28 : 
        case 29 : 
        case 30 : 
        case 31 : 
        case 34 : 
        case 36 : 
        case 38 : 
        case 39 : 
        case 41 : 
        case 42 : 
        case 46 : 
        case 47 : 
        case 48 : 
        case 49 : 
        case 50 : 
        case 51 : 
        case 52 : 
        case 53 : 
        case 54 : 
        case 55 : 
        case 56 : 
        case 57 : 
        case 58 : 
        case 59 : 
        case 60 : 
        case 61 : 
        case 62 : 
        case 63 : 
        case 65 : 
        case 68 : 
        case 72 : 
        case 73 : 
        case 74 : 
        case 75 : 
        case 77 : 
        case 79 : 
        case 80 : 
        case 81 : 
        case 82 : 
        case 84 : 
        case 85 : 
        case 86 : 
        case 87 : 
        case 89 : 
        case 90 : 
        case 92 : 
        case 93 : 
        case 94 : 
        case 96 : 
        case 104 : 
        case 106 : 
        case 107 : 
        case 109 : 
        case 112 : 
        case 113 : 
        case 118 : 
        case 119 : 
        case 121 : 
        case 122 : 
            exit$1 = 6;
            break;
        case 123 : 
            var sub_end$1 = search_subformat_end(str_ind, end_ind, /* "}" */125);
            var match$16 = parse_literal(str_ind, str_ind, sub_end$1);
            var beg_ind$1 = sub_end$1 + 2 | 0;
            var match$17 = parse_literal(beg_ind$1, beg_ind$1, end_ind);
            var fmt_rest$8 = match$17[0];
            var sub_fmtty$1 = fmtty_of_fmt(match$16[0]);
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored_000$2 = opt_of_pad(/* "_" */95, pad);
              var ignored$5 = /* Ignored_format_arg */Block.__(7, [
                  ignored_000$2,
                  sub_fmtty$1
                ]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$5,
                    fmt_rest$8
                  ])];
            } else {
              pad_used = true;
              fmt_result = /* Fmt_EBB */[/* Format_arg */Block.__(13, [
                    opt_of_pad(/* "{" */123, pad),
                    sub_fmtty$1,
                    fmt_rest$8
                  ])];
            }
            break;
        
      }
    }
    switch (exit$2) {
      case 7 : 
          plus_used = true;
          sharp_used = true;
          space_used = true;
          var iconv = compute_int_conv(pct_ind, str_ind, plus, sharp, space, symb);
          var match$18 = parse_literal(str_ind, str_ind, end_ind);
          var fmt_rest$9 = match$18[0];
          if (ign_used[0] = true, ign) {
            pad_used = true;
            var ignored_001 = opt_of_pad(/* "_" */95, pad);
            var ignored$6 = /* Ignored_int */Block.__(2, [
                iconv,
                ignored_001
              ]);
            fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                  ignored$6,
                  fmt_rest$9
                ])];
          } else {
            pad_used = true;
            prec_used[0] = true;
            var pad$3;
            var exit$3 = 0;
            if (typeof prec === "number" && prec === 0) {
              pad$3 = pad;
            } else {
              exit$3 = 9;
            }
            if (exit$3 === 9) {
              pad$3 = typeof pad === "number" ? /* No_padding */0 : (
                  pad.tag ? (
                      pad[0] >= 2 ? (
                          legacy_behavior$1 ? /* Arg_padding */Block.__(1, [/* Right */1]) : incompatible_flag(pct_ind, str_ind, /* "0" */48, "precision")
                        ) : pad
                    ) : (
                      pad[0] >= 2 ? (
                          legacy_behavior$1 ? /* Lit_padding */Block.__(0, [
                                /* Right */1,
                                pad[1]
                              ]) : incompatible_flag(pct_ind, str_ind, /* "0" */48, "precision")
                        ) : pad
                    )
                );
            }
            var match$19 = make_padprec_fmt_ebb(pad$3, (prec_used[0] = true, prec), fmt_rest$9);
            fmt_result = /* Fmt_EBB */[/* Int */Block.__(4, [
                  iconv,
                  match$19[0],
                  match$19[1],
                  match$19[2]
                ])];
          }
          break;
      case 8 : 
          if (str_ind === end_ind || !is_int_base(Caml_string.get(str, str_ind))) {
            var match$20 = parse_literal(str_ind, str_ind, end_ind);
            var fmt_rest$10 = match$20[0];
            var counter = counter_of_char(symb);
            if (ign_used[0] = true, ign) {
              var ignored$7 = /* Ignored_scan_get_counter */Block.__(10, [counter]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$7,
                    fmt_rest$10
                  ])];
            } else {
              fmt_result = /* Fmt_EBB */[/* Scan_get_counter */Block.__(21, [
                    counter,
                    fmt_rest$10
                  ])];
            }
          } else {
            exit$1 = 6;
          }
          break;
      
    }
    switch (exit$1) {
      case 2 : 
          plus_used = true;
          space_used = true;
          var fconv = compute_float_conv(pct_ind, str_ind, plus, space, symb);
          var match$21 = parse_literal(str_ind, str_ind, end_ind);
          var fmt_rest$11 = match$21[0];
          if (ign_used[0] = true, ign) {
            pad_used = true;
            var ignored_000$3 = opt_of_pad(/* "_" */95, pad);
            var ignored_001$1 = get_prec_opt(/* () */0);
            var ignored$8 = /* Ignored_float */Block.__(6, [
                ignored_000$3,
                ignored_001$1
              ]);
            fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                  ignored$8,
                  fmt_rest$11
                ])];
          } else {
            pad_used = true;
            var match$22 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$11);
            fmt_result = /* Fmt_EBB */[/* Float */Block.__(8, [
                  fconv,
                  match$22[0],
                  match$22[1],
                  match$22[2]
                ])];
          }
          break;
      case 3 : 
          var match$23 = parse_literal(str_ind, str_ind, end_ind);
          var fmt_rest$12 = match$23[0];
          fmt_result = (ign_used[0] = true, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                  /* Ignored_bool */2,
                  fmt_rest$12
                ])] : /* Fmt_EBB */[/* Bool */Block.__(9, [fmt_rest$12])];
          break;
      case 4 : 
          var match$24 = parse_literal(str_ind, str_ind, end_ind);
          fmt_result = /* Fmt_EBB */[/* Char_literal */Block.__(12, [
                symb,
                match$24[0]
              ])];
          break;
      case 5 : 
          fmt_result = Curry._3(failwith_message(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid format ",
                        /* Caml_string */Block.__(3, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ": at character number ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        ", flag ",
                                        /* Caml_char */Block.__(1, [/* String_literal */Block.__(11, [
                                                " is only allowed after the '",
                                                /* Char_literal */Block.__(12, [
                                                    /* "%" */37,
                                                    /* String_literal */Block.__(11, [
                                                        "', before padding and precision",
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"
                  ]), str, pct_ind, symb);
          break;
      case 6 : 
          if (symb >= 108) {
            if (symb >= 111) {
              exit = 1;
            } else {
              switch (symb - 108 | 0) {
                case 0 : 
                    plus_used = true;
                    sharp_used = true;
                    space_used = true;
                    var iconv$1 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));
                    var beg_ind$2 = str_ind + 1 | 0;
                    var match$25 = parse_literal(beg_ind$2, beg_ind$2, end_ind);
                    var fmt_rest$13 = match$25[0];
                    if (ign_used[0] = true, ign) {
                      pad_used = true;
                      var ignored_001$2 = opt_of_pad(/* "_" */95, pad);
                      var ignored$9 = /* Ignored_int32 */Block.__(3, [
                          iconv$1,
                          ignored_001$2
                        ]);
                      fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                            ignored$9,
                            fmt_rest$13
                          ])];
                    } else {
                      pad_used = true;
                      var match$26 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$13);
                      fmt_result = /* Fmt_EBB */[/* Int32 */Block.__(5, [
                            iconv$1,
                            match$26[0],
                            match$26[1],
                            match$26[2]
                          ])];
                    }
                    break;
                case 1 : 
                    exit = 1;
                    break;
                case 2 : 
                    plus_used = true;
                    sharp_used = true;
                    space_used = true;
                    var iconv$2 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));
                    var beg_ind$3 = str_ind + 1 | 0;
                    var match$27 = parse_literal(beg_ind$3, beg_ind$3, end_ind);
                    var fmt_rest$14 = match$27[0];
                    if (ign_used[0] = true, ign) {
                      pad_used = true;
                      var ignored_001$3 = opt_of_pad(/* "_" */95, pad);
                      var ignored$10 = /* Ignored_nativeint */Block.__(4, [
                          iconv$2,
                          ignored_001$3
                        ]);
                      fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                            ignored$10,
                            fmt_rest$14
                          ])];
                    } else {
                      pad_used = true;
                      var match$28 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$14);
                      fmt_result = /* Fmt_EBB */[/* Nativeint */Block.__(6, [
                            iconv$2,
                            match$28[0],
                            match$28[1],
                            match$28[2]
                          ])];
                    }
                    break;
                
              }
            }
          } else if (symb !== 76) {
            exit = 1;
          } else {
            plus_used = true;
            sharp_used = true;
            space_used = true;
            var iconv$3 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));
            var beg_ind$4 = str_ind + 1 | 0;
            var match$29 = parse_literal(beg_ind$4, beg_ind$4, end_ind);
            var fmt_rest$15 = match$29[0];
            if (ign_used[0] = true, ign) {
              pad_used = true;
              var ignored_001$4 = opt_of_pad(/* "_" */95, pad);
              var ignored$11 = /* Ignored_int64 */Block.__(5, [
                  iconv$3,
                  ignored_001$4
                ]);
              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [
                    ignored$11,
                    fmt_rest$15
                  ])];
            } else {
              pad_used = true;
              var match$30 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$15);
              fmt_result = /* Fmt_EBB */[/* Int64 */Block.__(7, [
                    iconv$3,
                    match$30[0],
                    match$30[1],
                    match$30[2]
                  ])];
            }
          }
          break;
      
    }
    if (exit === 1) {
      fmt_result = Curry._3(failwith_message(/* Format */[
                /* String_literal */Block.__(11, [
                    "invalid format ",
                    /* Caml_string */Block.__(3, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            ": at character number ",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    ", invalid conversion \"",
                                    /* Char_literal */Block.__(12, [
                                        /* "%" */37,
                                        /* Char */Block.__(0, [/* Char_literal */Block.__(12, [
                                                /* "\"" */34,
                                                /* End_of_format */0
                                              ])])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "invalid format %S: at character number %d, invalid conversion \"%%%c\""
              ]), str, str_ind - 1 | 0, symb);
    }
    if (!legacy_behavior$1) {
      if (!plus_used && plus) {
        incompatible_flag(pct_ind, str_ind, symb, "'+'");
      }
      if (!sharp_used && sharp) {
        incompatible_flag(pct_ind, str_ind, symb, "'#'");
      }
      if (!space_used && space) {
        incompatible_flag(pct_ind, str_ind, symb, "' '");
      }
      if (!pad_used && Caml_obj.caml_notequal(/* Padding_EBB */[pad], /* Padding_EBB */[/* No_padding */0])) {
        incompatible_flag(pct_ind, str_ind, symb, "`padding'");
      }
      if (!prec_used[0] && Caml_obj.caml_notequal(/* Precision_EBB */[prec], /* Precision_EBB */[/* No_precision */0])) {
        incompatible_flag(pct_ind, str_ind, ign ? /* "_" */95 : symb, "`precision'");
      }
      if (ign && plus) {
        incompatible_flag(pct_ind, str_ind, /* "_" */95, "'+'");
      }
      
    }
    if (!ign_used[0] && ign) {
      var exit$4 = 0;
      if (symb >= 38) {
        if (symb !== 44) {
          if (symb !== 64) {
            exit$4 = 1;
          } else if (!legacy_behavior$1) {
            exit$4 = 1;
          }
          
        } else if (!legacy_behavior$1) {
          exit$4 = 1;
        }
        
      } else if (symb !== 33) {
        if (symb >= 37) {
          if (!legacy_behavior$1) {
            exit$4 = 1;
          }
          
        } else {
          exit$4 = 1;
        }
      } else if (!legacy_behavior$1) {
        exit$4 = 1;
      }
      if (exit$4 === 1) {
        incompatible_flag(pct_ind, str_ind, symb, "'_'");
      }
      
    }
    return fmt_result;
  };
  var parse_flags = function (pct_ind, str_ind, end_ind, ign) {
    var zero = /* record */[/* contents */false];
    var minus = /* record */[/* contents */false];
    var plus = /* record */[/* contents */false];
    var space = /* record */[/* contents */false];
    var sharp = /* record */[/* contents */false];
    var set_flag = function (str_ind, flag) {
      if (flag[0] && !legacy_behavior$1) {
        Curry._3(failwith_message(/* Format */[
                  /* String_literal */Block.__(11, [
                      "invalid format ",
                      /* Caml_string */Block.__(3, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              ": at character number ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      ", duplicate flag ",
                                      /* Caml_char */Block.__(1, [/* End_of_format */0])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "invalid format %S: at character number %d, duplicate flag %C"
                ]), str, str_ind, Caml_string.get(str, str_ind));
      }
      flag[0] = true;
      return /* () */0;
    };
    var _str_ind = str_ind;
    while(true) {
      var str_ind$1 = _str_ind;
      if (str_ind$1 === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      var match = Caml_string.get(str, str_ind$1);
      var exit = 0;
      switch (match) {
        case 32 : 
            set_flag(str_ind$1, space);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        case 35 : 
            set_flag(str_ind$1, sharp);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        case 43 : 
            set_flag(str_ind$1, plus);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        case 45 : 
            set_flag(str_ind$1, minus);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        case 33 : 
        case 34 : 
        case 36 : 
        case 37 : 
        case 38 : 
        case 39 : 
        case 40 : 
        case 41 : 
        case 42 : 
        case 44 : 
        case 46 : 
        case 47 : 
            exit = 1;
            break;
        case 48 : 
            set_flag(str_ind$1, zero);
            _str_ind = str_ind$1 + 1 | 0;
            continue ;
        default:
          exit = 1;
      }
      if (exit === 1) {
        var pct_ind$1 = pct_ind;
        var str_ind$2 = str_ind$1;
        var end_ind$1 = end_ind;
        var zero$1 = zero[0];
        var minus$1 = minus[0];
        var plus$1 = plus[0];
        var sharp$1 = sharp[0];
        var space$1 = space[0];
        var ign$1 = ign;
        if (str_ind$2 === end_ind$1) {
          invalid_format_message(end_ind$1, "unexpected end of format");
        }
        var padty = zero$1 ? (
            minus$1 ? (
                legacy_behavior$1 ? /* Left */0 : incompatible_flag(pct_ind$1, str_ind$2, /* "-" */45, "0")
              ) : /* Zeros */2
          ) : (
            minus$1 ? /* Left */0 : /* Right */1
          );
        var match$1 = Caml_string.get(str, str_ind$2);
        var exit$1 = 0;
        if (match$1 >= 48) {
          if (match$1 >= 58) {
            exit$1 = 1;
          } else {
            var match$2 = parse_positive(str_ind$2, end_ind$1, 0);
            return parse_after_padding(pct_ind$1, match$2[0], end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Lit_padding */Block.__(0, [
                          padty,
                          match$2[1]
                        ]));
          }
        } else if (match$1 !== 42) {
          exit$1 = 1;
        } else {
          return parse_after_padding(pct_ind$1, str_ind$2 + 1 | 0, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Arg_padding */Block.__(1, [padty]));
        }
        if (exit$1 === 1) {
          switch (padty) {
            case 0 : 
                if (!legacy_behavior$1) {
                  invalid_format_without(str_ind$2 - 1 | 0, /* "-" */45, "padding");
                }
                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* No_padding */0);
            case 1 : 
                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* No_padding */0);
            case 2 : 
                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Lit_padding */Block.__(0, [
                              /* Right */1,
                              0
                            ]));
            
          }
        }
        
      }
      
    };
  };
  var is_int_base = function (symb) {
    switch (symb) {
      case 89 : 
      case 90 : 
      case 91 : 
      case 92 : 
      case 93 : 
      case 94 : 
      case 95 : 
      case 96 : 
      case 97 : 
      case 98 : 
      case 99 : 
      case 101 : 
      case 102 : 
      case 103 : 
      case 104 : 
      case 106 : 
      case 107 : 
      case 108 : 
      case 109 : 
      case 110 : 
      case 112 : 
      case 113 : 
      case 114 : 
      case 115 : 
      case 116 : 
      case 118 : 
      case 119 : 
          return false;
      case 88 : 
      case 100 : 
      case 105 : 
      case 111 : 
      case 117 : 
      case 120 : 
          return true;
      default:
        return false;
    }
  };
  var counter_of_char = function (symb) {
    var exit = 0;
    if (symb >= 108) {
      if (symb >= 111) {
        exit = 1;
      } else {
        switch (symb - 108 | 0) {
          case 0 : 
              return /* Line_counter */0;
          case 1 : 
              exit = 1;
              break;
          case 2 : 
              return /* Char_counter */1;
          
        }
      }
    } else if (symb !== 76) {
      exit = 1;
    } else {
      return /* Token_counter */2;
    }
    if (exit === 1) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "camlinternalFormat.ml",
              2686,
              34
            ]
          ];
    }
    
  };
  var parse_char_set = function (str_ind, end_ind) {
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var char_set = Bytes.make(32, /* "\000" */0);
    var add_range = function (c, c$prime) {
      for(var i = c; i <= c$prime; ++i){
        add_in_char_set(char_set, Pervasives.char_of_int(i));
      }
      return /* () */0;
    };
    var fail_single_percent = function (str_ind) {
      return Curry._2(failwith_message(/* Format */[
                      /* String_literal */Block.__(11, [
                          "invalid format ",
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  ": '",
                                  /* Char_literal */Block.__(12, [
                                      /* "%" */37,
                                      /* String_literal */Block.__(11, [
                                          "' alone is not accepted in character sets, use ",
                                          /* Char_literal */Block.__(12, [
                                              /* "%" */37,
                                              /* Char_literal */Block.__(12, [
                                                  /* "%" */37,
                                                  /* String_literal */Block.__(11, [
                                                      " instead at position ",
                                                      /* Int */Block.__(4, [
                                                          /* Int_d */0,
                                                          /* No_padding */0,
                                                          /* No_precision */0,
                                                          /* Char_literal */Block.__(12, [
                                                              /* "." */46,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."
                    ]), str, str_ind);
    };
    var parse_char_set_after_char = function (_str_ind, end_ind, _c) {
      while(true) {
        var c = _c;
        var str_ind = _str_ind;
        if (str_ind === end_ind) {
          invalid_format_message(end_ind, "unexpected end of format");
        }
        var c$prime = Caml_string.get(str, str_ind);
        var exit = 0;
        var exit$1 = 0;
        if (c$prime >= 46) {
          if (c$prime !== 64) {
            if (c$prime !== 93) {
              exit = 1;
            } else {
              add_in_char_set(char_set, c);
              return str_ind + 1 | 0;
            }
          } else {
            exit$1 = 2;
          }
        } else if (c$prime !== 37) {
          if (c$prime >= 45) {
            var str_ind$1 = str_ind + 1 | 0;
            var end_ind$1 = end_ind;
            var c$1 = c;
            if (str_ind$1 === end_ind$1) {
              invalid_format_message(end_ind$1, "unexpected end of format");
            }
            var c$prime$1 = Caml_string.get(str, str_ind$1);
            if (c$prime$1 !== 37) {
              if (c$prime$1 !== 93) {
                add_range(c$1, c$prime$1);
                return parse_char_set_content(str_ind$1 + 1 | 0, end_ind$1);
              } else {
                add_in_char_set(char_set, c$1);
                add_in_char_set(char_set, /* "-" */45);
                return str_ind$1 + 1 | 0;
              }
            } else {
              if ((str_ind$1 + 1 | 0) === end_ind$1) {
                invalid_format_message(end_ind$1, "unexpected end of format");
              }
              var c$prime$2 = Caml_string.get(str, str_ind$1 + 1 | 0);
              var exit$2 = 0;
              if (c$prime$2 !== 37 && c$prime$2 !== 64) {
                return fail_single_percent(str_ind$1);
              } else {
                exit$2 = 1;
              }
              if (exit$2 === 1) {
                add_range(c$1, c$prime$2);
                return parse_char_set_content(str_ind$1 + 2 | 0, end_ind$1);
              }
              
            }
          } else {
            exit = 1;
          }
        } else {
          exit$1 = 2;
        }
        if (exit$1 === 2) {
          if (c === /* "%" */37) {
            add_in_char_set(char_set, c$prime);
            return parse_char_set_content(str_ind + 1 | 0, end_ind);
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          if (c === /* "%" */37) {
            fail_single_percent(str_ind);
          }
          add_in_char_set(char_set, c);
          _c = c$prime;
          _str_ind = str_ind + 1 | 0;
          continue ;
        }
        
      };
    };
    var parse_char_set_content = function (_str_ind, end_ind) {
      while(true) {
        var str_ind = _str_ind;
        if (str_ind === end_ind) {
          invalid_format_message(end_ind, "unexpected end of format");
        }
        var c = Caml_string.get(str, str_ind);
        if (c !== 45) {
          if (c !== 93) {
            return parse_char_set_after_char(str_ind + 1 | 0, end_ind, c);
          } else {
            return str_ind + 1 | 0;
          }
        } else {
          add_in_char_set(char_set, /* "-" */45);
          _str_ind = str_ind + 1 | 0;
          continue ;
        }
      };
    };
    var parse_char_set_start = function (str_ind, end_ind) {
      if (str_ind === end_ind) {
        invalid_format_message(end_ind, "unexpected end of format");
      }
      var c = Caml_string.get(str, str_ind);
      return parse_char_set_after_char(str_ind + 1 | 0, end_ind, c);
    };
    if (str_ind === end_ind) {
      invalid_format_message(end_ind, "unexpected end of format");
    }
    var match = Caml_string.get(str, str_ind);
    var match$1 = match !== 94 ? /* tuple */[
        str_ind,
        false
      ] : /* tuple */[
        str_ind + 1 | 0,
        true
      ];
    var next_ind = parse_char_set_start(match$1[0], end_ind);
    var char_set$1 = Bytes.to_string(char_set);
    return /* tuple */[
            next_ind,
            match$1[1] ? rev_char_set(char_set$1) : char_set$1
          ];
  };
  var check_open_box = function (fmt) {
    if (typeof fmt === "number" || !(fmt.tag === 11 && typeof fmt[1] === "number")) {
      return /* () */0;
    } else {
      try {
        open_box_of_string(fmt[0]);
        return /* () */0;
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        if (exn[0] === Caml_builtin_exceptions.failure) {
          return /* () */0;
        } else {
          throw exn;
        }
      }
    }
  };
  var parse_tag = function (is_open_tag, str_ind, end_ind) {
    try {
      if (str_ind === end_ind) {
        throw Caml_builtin_exceptions.not_found;
      }
      var match = Caml_string.get(str, str_ind);
      if (match !== 60) {
        throw Caml_builtin_exceptions.not_found;
      } else {
        var ind = $$String.index_from(str, str_ind + 1 | 0, /* ">" */62);
        if (ind >= end_ind) {
          throw Caml_builtin_exceptions.not_found;
        }
        var sub_str = $$String.sub(str, str_ind, (ind - str_ind | 0) + 1 | 0);
        var beg_ind = ind + 1 | 0;
        var match$1 = parse_literal(beg_ind, beg_ind, end_ind);
        var match$2 = parse_literal(str_ind, str_ind, ind + 1 | 0);
        var sub_fmt = match$2[0];
        var sub_format = /* Format */[
          sub_fmt,
          sub_str
        ];
        var formatting = is_open_tag ? /* Open_tag */Block.__(0, [sub_format]) : (check_open_box(sub_fmt), /* Open_box */Block.__(1, [sub_format]));
        return /* Fmt_EBB */[/* Formatting_gen */Block.__(18, [
                    formatting,
                    match$1[0]
                  ])];
      }
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        var match$3 = parse_literal(str_ind, str_ind, end_ind);
        var sub_format$1 = /* Format */[
          /* End_of_format */0,
          ""
        ];
        var formatting$1 = is_open_tag ? /* Open_tag */Block.__(0, [sub_format$1]) : /* Open_box */Block.__(1, [sub_format$1]);
        return /* Fmt_EBB */[/* Formatting_gen */Block.__(18, [
                    formatting$1,
                    match$3[0]
                  ])];
      } else {
        throw exn;
      }
    }
  };
  return parse_literal(0, 0, str.length);
}

function format_of_string_fmtty(str, fmtty) {
  var match = fmt_ebb_of_string(undefined, str);
  try {
    return /* Format */[
            type_format(match[0], fmtty),
            str
          ];
  }
  catch (exn){
    if (exn === Type_mismatch) {
      return Curry._2(failwith_message(/* Format */[
                      /* String_literal */Block.__(11, [
                          "bad input: format type mismatch between ",
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " and ",
                                  /* Caml_string */Block.__(3, [
                                      /* No_padding */0,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ]),
                      "bad input: format type mismatch between %S and %S"
                    ]), str, string_of_fmtty(fmtty));
    } else {
      throw exn;
    }
  }
}

function format_of_string_format(str, param) {
  var match = fmt_ebb_of_string(undefined, str);
  try {
    return /* Format */[
            type_format(match[0], fmtty_of_fmt(param[0])),
            str
          ];
  }
  catch (exn){
    if (exn === Type_mismatch) {
      return Curry._2(failwith_message(/* Format */[
                      /* String_literal */Block.__(11, [
                          "bad input: format type mismatch between ",
                          /* Caml_string */Block.__(3, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " and ",
                                  /* Caml_string */Block.__(3, [
                                      /* No_padding */0,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ]),
                      "bad input: format type mismatch between %S and %S"
                    ]), str, param[1]);
    } else {
      throw exn;
    }
  }
}

exports.is_in_char_set = is_in_char_set;
exports.rev_char_set = rev_char_set;
exports.create_char_set = create_char_set;
exports.add_in_char_set = add_in_char_set;
exports.freeze_char_set = freeze_char_set;
exports.param_format_of_ignored_format = param_format_of_ignored_format;
exports.make_printf = make_printf;
exports.output_acc = output_acc;
exports.bufput_acc = bufput_acc;
exports.strput_acc = strput_acc;
exports.type_format = type_format;
exports.fmt_ebb_of_string = fmt_ebb_of_string;
exports.format_of_string_fmtty = format_of_string_fmtty;
exports.format_of_string_format = format_of_string_format;
exports.char_of_iconv = char_of_iconv;
exports.string_of_formatting_lit = string_of_formatting_lit;
exports.string_of_formatting_gen = string_of_formatting_gen;
exports.string_of_fmtty = string_of_fmtty;
exports.string_of_fmt = string_of_fmt;
exports.open_box_of_string = open_box_of_string;
exports.symm = symm;
exports.trans = trans;
exports.recast = recast;
/* No side effect */

},{"./block.js":33,"./buffer.js":34,"./bytes.js":35,"./caml_builtin_exceptions.js":37,"./caml_bytes.js":38,"./caml_exceptions.js":39,"./caml_float.js":40,"./caml_format.js":41,"./caml_int32.js":42,"./caml_io.js":44,"./caml_obj.js":46,"./caml_primitive.js":47,"./caml_string.js":48,"./camlinternalFormatBasics.js":52,"./char.js":53,"./curry.js":54,"./js_exn.js":55,"./pervasives.js":59,"./string.js":61}],52:[function(require,module,exports){
'use strict';

var Block = require("./block.js");

function erase_rel(param) {
  if (typeof param === "number") {
    return /* End_of_fmtty */0;
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return /* Char_ty */Block.__(0, [erase_rel(param[0])]);
      case 1 : 
          return /* String_ty */Block.__(1, [erase_rel(param[0])]);
      case 2 : 
          return /* Int_ty */Block.__(2, [erase_rel(param[0])]);
      case 3 : 
          return /* Int32_ty */Block.__(3, [erase_rel(param[0])]);
      case 4 : 
          return /* Nativeint_ty */Block.__(4, [erase_rel(param[0])]);
      case 5 : 
          return /* Int64_ty */Block.__(5, [erase_rel(param[0])]);
      case 6 : 
          return /* Float_ty */Block.__(6, [erase_rel(param[0])]);
      case 7 : 
          return /* Bool_ty */Block.__(7, [erase_rel(param[0])]);
      case 8 : 
          return /* Format_arg_ty */Block.__(8, [
                    param[0],
                    erase_rel(param[1])
                  ]);
      case 9 : 
          var ty1 = param[0];
          return /* Format_subst_ty */Block.__(9, [
                    ty1,
                    ty1,
                    erase_rel(param[2])
                  ]);
      case 10 : 
          return /* Alpha_ty */Block.__(10, [erase_rel(param[0])]);
      case 11 : 
          return /* Theta_ty */Block.__(11, [erase_rel(param[0])]);
      case 12 : 
          return /* Any_ty */Block.__(12, [erase_rel(param[0])]);
      case 13 : 
          return /* Reader_ty */Block.__(13, [erase_rel(param[0])]);
      case 14 : 
          return /* Ignored_reader_ty */Block.__(14, [erase_rel(param[0])]);
      
    }
  }
}

function concat_fmtty(fmtty1, fmtty2) {
  if (typeof fmtty1 === "number") {
    return fmtty2;
  } else {
    switch (fmtty1.tag | 0) {
      case 0 : 
          return /* Char_ty */Block.__(0, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 1 : 
          return /* String_ty */Block.__(1, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 2 : 
          return /* Int_ty */Block.__(2, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 3 : 
          return /* Int32_ty */Block.__(3, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 4 : 
          return /* Nativeint_ty */Block.__(4, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 5 : 
          return /* Int64_ty */Block.__(5, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 6 : 
          return /* Float_ty */Block.__(6, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 7 : 
          return /* Bool_ty */Block.__(7, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 8 : 
          return /* Format_arg_ty */Block.__(8, [
                    fmtty1[0],
                    concat_fmtty(fmtty1[1], fmtty2)
                  ]);
      case 9 : 
          return /* Format_subst_ty */Block.__(9, [
                    fmtty1[0],
                    fmtty1[1],
                    concat_fmtty(fmtty1[2], fmtty2)
                  ]);
      case 10 : 
          return /* Alpha_ty */Block.__(10, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 11 : 
          return /* Theta_ty */Block.__(11, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 12 : 
          return /* Any_ty */Block.__(12, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 13 : 
          return /* Reader_ty */Block.__(13, [concat_fmtty(fmtty1[0], fmtty2)]);
      case 14 : 
          return /* Ignored_reader_ty */Block.__(14, [concat_fmtty(fmtty1[0], fmtty2)]);
      
    }
  }
}

function concat_fmt(fmt1, fmt2) {
  if (typeof fmt1 === "number") {
    return fmt2;
  } else {
    switch (fmt1.tag | 0) {
      case 0 : 
          return /* Char */Block.__(0, [concat_fmt(fmt1[0], fmt2)]);
      case 1 : 
          return /* Caml_char */Block.__(1, [concat_fmt(fmt1[0], fmt2)]);
      case 2 : 
          return /* String */Block.__(2, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 3 : 
          return /* Caml_string */Block.__(3, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 4 : 
          return /* Int */Block.__(4, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 5 : 
          return /* Int32 */Block.__(5, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 6 : 
          return /* Nativeint */Block.__(6, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 7 : 
          return /* Int64 */Block.__(7, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 8 : 
          return /* Float */Block.__(8, [
                    fmt1[0],
                    fmt1[1],
                    fmt1[2],
                    concat_fmt(fmt1[3], fmt2)
                  ]);
      case 9 : 
          return /* Bool */Block.__(9, [concat_fmt(fmt1[0], fmt2)]);
      case 10 : 
          return /* Flush */Block.__(10, [concat_fmt(fmt1[0], fmt2)]);
      case 11 : 
          return /* String_literal */Block.__(11, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 12 : 
          return /* Char_literal */Block.__(12, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 13 : 
          return /* Format_arg */Block.__(13, [
                    fmt1[0],
                    fmt1[1],
                    concat_fmt(fmt1[2], fmt2)
                  ]);
      case 14 : 
          return /* Format_subst */Block.__(14, [
                    fmt1[0],
                    fmt1[1],
                    concat_fmt(fmt1[2], fmt2)
                  ]);
      case 15 : 
          return /* Alpha */Block.__(15, [concat_fmt(fmt1[0], fmt2)]);
      case 16 : 
          return /* Theta */Block.__(16, [concat_fmt(fmt1[0], fmt2)]);
      case 17 : 
          return /* Formatting_lit */Block.__(17, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 18 : 
          return /* Formatting_gen */Block.__(18, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 19 : 
          return /* Reader */Block.__(19, [concat_fmt(fmt1[0], fmt2)]);
      case 20 : 
          return /* Scan_char_set */Block.__(20, [
                    fmt1[0],
                    fmt1[1],
                    concat_fmt(fmt1[2], fmt2)
                  ]);
      case 21 : 
          return /* Scan_get_counter */Block.__(21, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 22 : 
          return /* Scan_next_char */Block.__(22, [concat_fmt(fmt1[0], fmt2)]);
      case 23 : 
          return /* Ignored_param */Block.__(23, [
                    fmt1[0],
                    concat_fmt(fmt1[1], fmt2)
                  ]);
      case 24 : 
          return /* Custom */Block.__(24, [
                    fmt1[0],
                    fmt1[1],
                    concat_fmt(fmt1[2], fmt2)
                  ]);
      
    }
  }
}

exports.concat_fmtty = concat_fmtty;
exports.erase_rel = erase_rel;
exports.concat_fmt = concat_fmt;
/* No side effect */

},{"./block.js":33}],53:[function(require,module,exports){
'use strict';

var Caml_string = require("./caml_string.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function chr(n) {
  if (n < 0 || n > 255) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Char.chr"
        ];
  } else {
    return n;
  }
}

function escaped(c) {
  var exit = 0;
  if (c >= 40) {
    if (c !== 92) {
      exit = c >= 127 ? 1 : 2;
    } else {
      return "\\\\";
    }
  } else if (c >= 32) {
    if (c >= 39) {
      return "\\'";
    } else {
      exit = 2;
    }
  } else if (c >= 14) {
    exit = 1;
  } else {
    switch (c) {
      case 8 : 
          return "\\b";
      case 9 : 
          return "\\t";
      case 10 : 
          return "\\n";
      case 0 : 
      case 1 : 
      case 2 : 
      case 3 : 
      case 4 : 
      case 5 : 
      case 6 : 
      case 7 : 
      case 11 : 
      case 12 : 
          exit = 1;
          break;
      case 13 : 
          return "\\r";
      
    }
  }
  switch (exit) {
    case 1 : 
        var s = Caml_string.caml_create_string(4);
        s[0] = /* "\\" */92;
        s[1] = 48 + (c / 100 | 0) | 0;
        s[2] = 48 + (c / 10 | 0) % 10 | 0;
        s[3] = 48 + c % 10 | 0;
        return Caml_string.bytes_to_string(s);
    case 2 : 
        var s$1 = Caml_string.caml_create_string(1);
        s$1[0] = c;
        return Caml_string.bytes_to_string(s$1);
    
  }
}

function lowercase(c) {
  if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
    return c + 32 | 0;
  } else {
    return c;
  }
}

function uppercase(c) {
  if (c >= /* "a" */97 && c <= /* "z" */122 || c >= /* "\224" */224 && c <= /* "\246" */246 || c >= /* "\248" */248 && c <= /* "\254" */254) {
    return c - 32 | 0;
  } else {
    return c;
  }
}

function compare(c1, c2) {
  return c1 - c2 | 0;
}

exports.chr = chr;
exports.escaped = escaped;
exports.lowercase = lowercase;
exports.uppercase = uppercase;
exports.compare = compare;
/* No side effect */

},{"./caml_builtin_exceptions.js":37,"./caml_string.js":48}],54:[function(require,module,exports){
'use strict';

var Caml_array = require("./caml_array.js");

function app(_f, _args) {
  while(true) {
    var args = _args;
    var f = _f;
    var arity = f.length;
    var len = args.length;
    var d = arity - len | 0;
    if (d === 0) {
      return f.apply(null, args);
    } else if (d < 0) {
      _args = Caml_array.caml_array_sub(args, arity, -d | 0);
      _f = f.apply(null, Caml_array.caml_array_sub(args, 0, arity));
      continue ;
    } else {
      return (function(f,args){
      return function (x) {
        return app(f, args.concat(/* array */[x]));
      }
      }(f,args));
    }
  };
}

function curry_1(o, a0, arity) {
  switch (arity) {
    case 1 : 
        return o(a0);
    case 2 : 
        return (function (param) {
            return o(a0, param);
          });
    case 3 : 
        return (function (param, param$1) {
            return o(a0, param, param$1);
          });
    case 4 : 
        return (function (param, param$1, param$2) {
            return o(a0, param, param$1, param$2);
          });
    case 5 : 
        return (function (param, param$1, param$2, param$3) {
            return o(a0, param, param$1, param$2, param$3);
          });
    case 6 : 
        return (function (param, param$1, param$2, param$3, param$4) {
            return o(a0, param, param$1, param$2, param$3, param$4);
          });
    case 7 : 
        return (function (param, param$1, param$2, param$3, param$4, param$5) {
            return o(a0, param, param$1, param$2, param$3, param$4, param$5);
          });
    default:
      return app(o, /* array */[a0]);
  }
}

function _1(o, a0) {
  var arity = o.length;
  if (arity === 1) {
    return o(a0);
  } else {
    return curry_1(o, a0, arity);
  }
}

function __1(o) {
  var arity = o.length;
  if (arity === 1) {
    return o;
  } else {
    return (function (a0) {
        return _1(o, a0);
      });
  }
}

function curry_2(o, a0, a1, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[a1]);
    case 2 : 
        return o(a0, a1);
    case 3 : 
        return (function (param) {
            return o(a0, a1, param);
          });
    case 4 : 
        return (function (param, param$1) {
            return o(a0, a1, param, param$1);
          });
    case 5 : 
        return (function (param, param$1, param$2) {
            return o(a0, a1, param, param$1, param$2);
          });
    case 6 : 
        return (function (param, param$1, param$2, param$3) {
            return o(a0, a1, param, param$1, param$2, param$3);
          });
    case 7 : 
        return (function (param, param$1, param$2, param$3, param$4) {
            return o(a0, a1, param, param$1, param$2, param$3, param$4);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1
                ]);
  }
}

function _2(o, a0, a1) {
  var arity = o.length;
  if (arity === 2) {
    return o(a0, a1);
  } else {
    return curry_2(o, a0, a1, arity);
  }
}

function __2(o) {
  var arity = o.length;
  if (arity === 2) {
    return o;
  } else {
    return (function (a0, a1) {
        return _2(o, a0, a1);
      });
  }
}

function curry_3(o, a0, a1, a2, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[a2]);
    case 3 : 
        return o(a0, a1, a2);
    case 4 : 
        return (function (param) {
            return o(a0, a1, a2, param);
          });
    case 5 : 
        return (function (param, param$1) {
            return o(a0, a1, a2, param, param$1);
          });
    case 6 : 
        return (function (param, param$1, param$2) {
            return o(a0, a1, a2, param, param$1, param$2);
          });
    case 7 : 
        return (function (param, param$1, param$2, param$3) {
            return o(a0, a1, a2, param, param$1, param$2, param$3);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2
                ]);
  }
}

function _3(o, a0, a1, a2) {
  var arity = o.length;
  if (arity === 3) {
    return o(a0, a1, a2);
  } else {
    return curry_3(o, a0, a1, a2, arity);
  }
}

function __3(o) {
  var arity = o.length;
  if (arity === 3) {
    return o;
  } else {
    return (function (a0, a1, a2) {
        return _3(o, a0, a1, a2);
      });
  }
}

function curry_4(o, a0, a1, a2, a3, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[a3]);
    case 4 : 
        return o(a0, a1, a2, a3);
    case 5 : 
        return (function (param) {
            return o(a0, a1, a2, a3, param);
          });
    case 6 : 
        return (function (param, param$1) {
            return o(a0, a1, a2, a3, param, param$1);
          });
    case 7 : 
        return (function (param, param$1, param$2) {
            return o(a0, a1, a2, a3, param, param$1, param$2);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3
                ]);
  }
}

function _4(o, a0, a1, a2, a3) {
  var arity = o.length;
  if (arity === 4) {
    return o(a0, a1, a2, a3);
  } else {
    return curry_4(o, a0, a1, a2, a3, arity);
  }
}

function __4(o) {
  var arity = o.length;
  if (arity === 4) {
    return o;
  } else {
    return (function (a0, a1, a2, a3) {
        return _4(o, a0, a1, a2, a3);
      });
  }
}

function curry_5(o, a0, a1, a2, a3, a4, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3,
                    a4
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3,
                    a4
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[
                    a3,
                    a4
                  ]);
    case 4 : 
        return app(o(a0, a1, a2, a3), /* array */[a4]);
    case 5 : 
        return o(a0, a1, a2, a3, a4);
    case 6 : 
        return (function (param) {
            return o(a0, a1, a2, a3, a4, param);
          });
    case 7 : 
        return (function (param, param$1) {
            return o(a0, a1, a2, a3, a4, param, param$1);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4
                ]);
  }
}

function _5(o, a0, a1, a2, a3, a4) {
  var arity = o.length;
  if (arity === 5) {
    return o(a0, a1, a2, a3, a4);
  } else {
    return curry_5(o, a0, a1, a2, a3, a4, arity);
  }
}

function __5(o) {
  var arity = o.length;
  if (arity === 5) {
    return o;
  } else {
    return (function (a0, a1, a2, a3, a4) {
        return _5(o, a0, a1, a2, a3, a4);
      });
  }
}

function curry_6(o, a0, a1, a2, a3, a4, a5, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3,
                    a4,
                    a5
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3,
                    a4,
                    a5
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[
                    a3,
                    a4,
                    a5
                  ]);
    case 4 : 
        return app(o(a0, a1, a2, a3), /* array */[
                    a4,
                    a5
                  ]);
    case 5 : 
        return app(o(a0, a1, a2, a3, a4), /* array */[a5]);
    case 6 : 
        return o(a0, a1, a2, a3, a4, a5);
    case 7 : 
        return (function (param) {
            return o(a0, a1, a2, a3, a4, a5, param);
          });
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5
                ]);
  }
}

function _6(o, a0, a1, a2, a3, a4, a5) {
  var arity = o.length;
  if (arity === 6) {
    return o(a0, a1, a2, a3, a4, a5);
  } else {
    return curry_6(o, a0, a1, a2, a3, a4, a5, arity);
  }
}

function __6(o) {
  var arity = o.length;
  if (arity === 6) {
    return o;
  } else {
    return (function (a0, a1, a2, a3, a4, a5) {
        return _6(o, a0, a1, a2, a3, a4, a5);
      });
  }
}

function curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3,
                    a4,
                    a5,
                    a6
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[
                    a3,
                    a4,
                    a5,
                    a6
                  ]);
    case 4 : 
        return app(o(a0, a1, a2, a3), /* array */[
                    a4,
                    a5,
                    a6
                  ]);
    case 5 : 
        return app(o(a0, a1, a2, a3, a4), /* array */[
                    a5,
                    a6
                  ]);
    case 6 : 
        return app(o(a0, a1, a2, a3, a4, a5), /* array */[a6]);
    case 7 : 
        return o(a0, a1, a2, a3, a4, a5, a6);
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6
                ]);
  }
}

function _7(o, a0, a1, a2, a3, a4, a5, a6) {
  var arity = o.length;
  if (arity === 7) {
    return o(a0, a1, a2, a3, a4, a5, a6);
  } else {
    return curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity);
  }
}

function __7(o) {
  var arity = o.length;
  if (arity === 7) {
    return o;
  } else {
    return (function (a0, a1, a2, a3, a4, a5, a6) {
        return _7(o, a0, a1, a2, a3, a4, a5, a6);
      });
  }
}

function curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity) {
  switch (arity) {
    case 1 : 
        return app(o(a0), /* array */[
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7
                  ]);
    case 2 : 
        return app(o(a0, a1), /* array */[
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7
                  ]);
    case 3 : 
        return app(o(a0, a1, a2), /* array */[
                    a3,
                    a4,
                    a5,
                    a6,
                    a7
                  ]);
    case 4 : 
        return app(o(a0, a1, a2, a3), /* array */[
                    a4,
                    a5,
                    a6,
                    a7
                  ]);
    case 5 : 
        return app(o(a0, a1, a2, a3, a4), /* array */[
                    a5,
                    a6,
                    a7
                  ]);
    case 6 : 
        return app(o(a0, a1, a2, a3, a4, a5), /* array */[
                    a6,
                    a7
                  ]);
    case 7 : 
        return app(o(a0, a1, a2, a3, a4, a5, a6), /* array */[a7]);
    default:
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7
                ]);
  }
}

function _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {
  var arity = o.length;
  if (arity === 8) {
    return o(a0, a1, a2, a3, a4, a5, a6, a7);
  } else {
    return curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity);
  }
}

function __8(o) {
  var arity = o.length;
  if (arity === 8) {
    return o;
  } else {
    return (function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return _8(o, a0, a1, a2, a3, a4, a5, a6, a7);
      });
  }
}

exports.app = app;
exports.curry_1 = curry_1;
exports._1 = _1;
exports.__1 = __1;
exports.curry_2 = curry_2;
exports._2 = _2;
exports.__2 = __2;
exports.curry_3 = curry_3;
exports._3 = _3;
exports.__3 = __3;
exports.curry_4 = curry_4;
exports._4 = _4;
exports.__4 = __4;
exports.curry_5 = curry_5;
exports._5 = _5;
exports.__5 = __5;
exports.curry_6 = curry_6;
exports._6 = _6;
exports.__6 = __6;
exports.curry_7 = curry_7;
exports._7 = _7;
exports.__7 = __7;
exports.curry_8 = curry_8;
exports._8 = _8;
exports.__8 = __8;
/* No side effect */

},{"./caml_array.js":36}],55:[function(require,module,exports){
'use strict';

var Caml_exceptions = require("./caml_exceptions.js");

var $$Error = Caml_exceptions.create("Js_exn.Error");

function internalToOCamlException(e) {
  if (Caml_exceptions.isCamlExceptionOrOpenVariant(e)) {
    return e;
  } else {
    return [
            $$Error,
            e
          ];
  }
}

function raiseError(str) {
  throw new Error(str);
}

function raiseEvalError(str) {
  throw new EvalError(str);
}

function raiseRangeError(str) {
  throw new RangeError(str);
}

function raiseReferenceError(str) {
  throw new ReferenceError(str);
}

function raiseSyntaxError(str) {
  throw new SyntaxError(str);
}

function raiseTypeError(str) {
  throw new TypeError(str);
}

function raiseUriError(str) {
  throw new URIError(str);
}

exports.$$Error = $$Error;
exports.internalToOCamlException = internalToOCamlException;
exports.raiseError = raiseError;
exports.raiseEvalError = raiseEvalError;
exports.raiseRangeError = raiseRangeError;
exports.raiseReferenceError = raiseReferenceError;
exports.raiseSyntaxError = raiseSyntaxError;
exports.raiseTypeError = raiseTypeError;
exports.raiseUriError = raiseUriError;
/* No side effect */

},{"./caml_exceptions.js":39}],56:[function(require,module,exports){
'use strict';

var Block = require("./block.js");
var Js_primitive = require("./js_primitive.js");

function classify(x) {
  var ty = typeof x;
  if (ty === "string") {
    return /* JSONString */Block.__(0, [x]);
  } else if (ty === "number") {
    return /* JSONNumber */Block.__(1, [x]);
  } else if (ty === "boolean") {
    if (x === true) {
      return /* JSONTrue */1;
    } else {
      return /* JSONFalse */0;
    }
  } else if (x === null) {
    return /* JSONNull */2;
  } else if (Array.isArray(x)) {
    return /* JSONArray */Block.__(3, [x]);
  } else {
    return /* JSONObject */Block.__(2, [x]);
  }
}

function test(x, v) {
  switch (v) {
    case 0 : 
        return typeof x === "string";
    case 1 : 
        return typeof x === "number";
    case 2 : 
        if (x !== null && typeof x === "object") {
          return !Array.isArray(x);
        } else {
          return false;
        }
    case 3 : 
        return Array.isArray(x);
    case 4 : 
        return typeof x === "boolean";
    case 5 : 
        return x === null;
    
  }
}

function decodeString(json) {
  if (typeof json === "string") {
    return json;
  }
  
}

function decodeNumber(json) {
  if (typeof json === "number") {
    return json;
  }
  
}

function decodeObject(json) {
  if (typeof json === "object" && !Array.isArray(json) && json !== null) {
    return Js_primitive.some(json);
  }
  
}

function decodeArray(json) {
  if (Array.isArray(json)) {
    return json;
  }
  
}

function decodeBoolean(json) {
  if (typeof json === "boolean") {
    return json;
  }
  
}

function decodeNull(json) {
  if (json === null) {
    return null;
  }
  
}

exports.classify = classify;
exports.test = test;
exports.decodeString = decodeString;
exports.decodeNumber = decodeNumber;
exports.decodeObject = decodeObject;
exports.decodeArray = decodeArray;
exports.decodeBoolean = decodeBoolean;
exports.decodeNull = decodeNull;
/* No side effect */

},{"./block.js":33,"./js_primitive.js":57}],57:[function(require,module,exports){
'use strict';


var undefinedHeader = /* array */[];

function some(x) {
  if (x === undefined) {
    var block = /* tuple */[
      undefinedHeader,
      0
    ];
    block.tag = 256;
    return block;
  } else if (x !== null && x[0] === undefinedHeader) {
    var nid = x[1] + 1 | 0;
    var block$1 = /* tuple */[
      undefinedHeader,
      nid
    ];
    block$1.tag = 256;
    return block$1;
  } else {
    return x;
  }
}

function nullable_to_opt(x) {
  if (x === null || x === undefined) {
    return undefined;
  } else {
    return some(x);
  }
}

function undefined_to_opt(x) {
  if (x === undefined) {
    return undefined;
  } else {
    return some(x);
  }
}

function null_to_opt(x) {
  if (x === null) {
    return undefined;
  } else {
    return some(x);
  }
}

function valFromOption(x) {
  if (x !== null && x[0] === undefinedHeader) {
    var depth = x[1];
    if (depth === 0) {
      return undefined;
    } else {
      return /* tuple */[
              undefinedHeader,
              depth - 1 | 0
            ];
    }
  } else {
    return x;
  }
}

function option_get(x) {
  if (x === undefined) {
    return undefined;
  } else {
    return valFromOption(x);
  }
}

function option_get_unwrap(x) {
  if (x === undefined) {
    return undefined;
  } else {
    return valFromOption(x)[1];
  }
}

exports.nullable_to_opt = nullable_to_opt;
exports.undefined_to_opt = undefined_to_opt;
exports.null_to_opt = null_to_opt;
exports.valFromOption = valFromOption;
exports.some = some;
exports.option_get = option_get;
exports.option_get_unwrap = option_get_unwrap;
/* No side effect */

},{}],58:[function(require,module,exports){
'use strict';

var Curry = require("./curry.js");
var Caml_obj = require("./caml_obj.js");
var Pervasives = require("./pervasives.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");

function length(l) {
  var _len = 0;
  var _param = l;
  while(true) {
    var param = _param;
    var len = _len;
    if (param) {
      _param = param[1];
      _len = len + 1 | 0;
      continue ;
    } else {
      return len;
    }
  };
}

function hd(param) {
  if (param) {
    return param[0];
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "hd"
        ];
  }
}

function tl(param) {
  if (param) {
    return param[1];
  } else {
    throw [
          Caml_builtin_exceptions.failure,
          "tl"
        ];
  }
}

function nth(l, n) {
  if (n < 0) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "List.nth"
        ];
  } else {
    var _l = l;
    var _n = n;
    while(true) {
      var n$1 = _n;
      var l$1 = _l;
      if (l$1) {
        if (n$1 === 0) {
          return l$1[0];
        } else {
          _n = n$1 - 1 | 0;
          _l = l$1[1];
          continue ;
        }
      } else {
        throw [
              Caml_builtin_exceptions.failure,
              "nth"
            ];
      }
    };
  }
}

function rev_append(_l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      _l2 = /* :: */[
        l1[0],
        l2
      ];
      _l1 = l1[1];
      continue ;
    } else {
      return l2;
    }
  };
}

function rev(l) {
  return rev_append(l, /* [] */0);
}

function flatten(param) {
  if (param) {
    return Pervasives.$at(param[0], flatten(param[1]));
  } else {
    return /* [] */0;
  }
}

function map(f, param) {
  if (param) {
    var r = Curry._1(f, param[0]);
    return /* :: */[
            r,
            map(f, param[1])
          ];
  } else {
    return /* [] */0;
  }
}

function mapi(i, f, param) {
  if (param) {
    var r = Curry._2(f, i, param[0]);
    return /* :: */[
            r,
            mapi(i + 1 | 0, f, param[1])
          ];
  } else {
    return /* [] */0;
  }
}

function mapi$1(f, l) {
  return mapi(0, f, l);
}

function rev_map(f, l) {
  var _accu = /* [] */0;
  var _param = l;
  while(true) {
    var param = _param;
    var accu = _accu;
    if (param) {
      _param = param[1];
      _accu = /* :: */[
        Curry._1(f, param[0]),
        accu
      ];
      continue ;
    } else {
      return accu;
    }
  };
}

function iter(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      Curry._1(f, param[0]);
      _param = param[1];
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function iteri(f, l) {
  var _i = 0;
  var f$1 = f;
  var _param = l;
  while(true) {
    var param = _param;
    var i = _i;
    if (param) {
      Curry._2(f$1, i, param[0]);
      _param = param[1];
      _i = i + 1 | 0;
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function fold_left(f, _accu, _l) {
  while(true) {
    var l = _l;
    var accu = _accu;
    if (l) {
      _l = l[1];
      _accu = Curry._2(f, accu, l[0]);
      continue ;
    } else {
      return accu;
    }
  };
}

function fold_right(f, l, accu) {
  if (l) {
    return Curry._2(f, l[0], fold_right(f, l[1], accu));
  } else {
    return accu;
  }
}

function map2(f, l1, l2) {
  if (l1) {
    if (l2) {
      var r = Curry._2(f, l1[0], l2[0]);
      return /* :: */[
              r,
              map2(f, l1[1], l2[1])
            ];
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.map2"
          ];
    }
  } else if (l2) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "List.map2"
        ];
  } else {
    return /* [] */0;
  }
}

function rev_map2(f, l1, l2) {
  var _accu = /* [] */0;
  var _l1 = l1;
  var _l2 = l2;
  while(true) {
    var l2$1 = _l2;
    var l1$1 = _l1;
    var accu = _accu;
    if (l1$1) {
      if (l2$1) {
        _l2 = l2$1[1];
        _l1 = l1$1[1];
        _accu = /* :: */[
          Curry._2(f, l1$1[0], l2$1[0]),
          accu
        ];
        continue ;
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.rev_map2"
            ];
      }
    } else if (l2$1) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.rev_map2"
          ];
    } else {
      return accu;
    }
  };
}

function iter2(f, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        Curry._2(f, l1[0], l2[0]);
        _l2 = l2[1];
        _l1 = l1[1];
        continue ;
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.iter2"
            ];
      }
    } else if (l2) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.iter2"
          ];
    } else {
      return /* () */0;
    }
  };
}

function fold_left2(f, _accu, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    var accu = _accu;
    if (l1) {
      if (l2) {
        _l2 = l2[1];
        _l1 = l1[1];
        _accu = Curry._3(f, accu, l1[0], l2[0]);
        continue ;
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.fold_left2"
            ];
      }
    } else if (l2) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.fold_left2"
          ];
    } else {
      return accu;
    }
  };
}

function fold_right2(f, l1, l2, accu) {
  if (l1) {
    if (l2) {
      return Curry._3(f, l1[0], l2[0], fold_right2(f, l1[1], l2[1], accu));
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.fold_right2"
          ];
    }
  } else if (l2) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "List.fold_right2"
        ];
  } else {
    return accu;
  }
}

function for_all(p, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._1(p, param[0])) {
        _param = param[1];
        continue ;
      } else {
        return false;
      }
    } else {
      return true;
    }
  };
}

function exists(p, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Curry._1(p, param[0])) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function for_all2(p, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        if (Curry._2(p, l1[0], l2[0])) {
          _l2 = l2[1];
          _l1 = l1[1];
          continue ;
        } else {
          return false;
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.for_all2"
            ];
      }
    } else if (l2) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.for_all2"
          ];
    } else {
      return true;
    }
  };
}

function exists2(p, _l1, _l2) {
  while(true) {
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        if (Curry._2(p, l1[0], l2[0])) {
          return true;
        } else {
          _l2 = l2[1];
          _l1 = l1[1];
          continue ;
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "List.exists2"
            ];
      }
    } else if (l2) {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.exists2"
          ];
    } else {
      return false;
    }
  };
}

function mem(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Caml_obj.caml_equal(param[0], x)) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function memq(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (param[0] === x) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function assoc(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = param[0];
      if (Caml_obj.caml_equal(match[0], x)) {
        return match[1];
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function assq(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var match = param[0];
      if (match[0] === x) {
        return match[1];
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function mem_assoc(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (Caml_obj.caml_equal(param[0][0], x)) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function mem_assq(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      if (param[0][0] === x) {
        return true;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      return false;
    }
  };
}

function remove_assoc(x, param) {
  if (param) {
    var l = param[1];
    var pair = param[0];
    if (Caml_obj.caml_equal(pair[0], x)) {
      return l;
    } else {
      return /* :: */[
              pair,
              remove_assoc(x, l)
            ];
    }
  } else {
    return /* [] */0;
  }
}

function remove_assq(x, param) {
  if (param) {
    var l = param[1];
    var pair = param[0];
    if (pair[0] === x) {
      return l;
    } else {
      return /* :: */[
              pair,
              remove_assq(x, l)
            ];
    }
  } else {
    return /* [] */0;
  }
}

function find(p, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var x = param[0];
      if (Curry._1(p, x)) {
        return x;
      } else {
        _param = param[1];
        continue ;
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  };
}

function find_all(p) {
  return (function (param) {
      var _accu = /* [] */0;
      var _param = param;
      while(true) {
        var param$1 = _param;
        var accu = _accu;
        if (param$1) {
          var l = param$1[1];
          var x = param$1[0];
          if (Curry._1(p, x)) {
            _param = l;
            _accu = /* :: */[
              x,
              accu
            ];
            continue ;
          } else {
            _param = l;
            continue ;
          }
        } else {
          return rev_append(accu, /* [] */0);
        }
      };
    });
}

function partition(p, l) {
  var _yes = /* [] */0;
  var _no = /* [] */0;
  var _param = l;
  while(true) {
    var param = _param;
    var no = _no;
    var yes = _yes;
    if (param) {
      var l$1 = param[1];
      var x = param[0];
      if (Curry._1(p, x)) {
        _param = l$1;
        _yes = /* :: */[
          x,
          yes
        ];
        continue ;
      } else {
        _param = l$1;
        _no = /* :: */[
          x,
          no
        ];
        continue ;
      }
    } else {
      return /* tuple */[
              rev_append(yes, /* [] */0),
              rev_append(no, /* [] */0)
            ];
    }
  };
}

function split(param) {
  if (param) {
    var match = param[0];
    var match$1 = split(param[1]);
    return /* tuple */[
            /* :: */[
              match[0],
              match$1[0]
            ],
            /* :: */[
              match[1],
              match$1[1]
            ]
          ];
  } else {
    return /* tuple */[
            /* [] */0,
            /* [] */0
          ];
  }
}

function combine(l1, l2) {
  if (l1) {
    if (l2) {
      return /* :: */[
              /* tuple */[
                l1[0],
                l2[0]
              ],
              combine(l1[1], l2[1])
            ];
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "List.combine"
          ];
    }
  } else if (l2) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "List.combine"
        ];
  } else {
    return /* [] */0;
  }
}

function merge(cmp, l1, l2) {
  if (l1) {
    if (l2) {
      var h2 = l2[0];
      var h1 = l1[0];
      if (Curry._2(cmp, h1, h2) <= 0) {
        return /* :: */[
                h1,
                merge(cmp, l1[1], l2)
              ];
      } else {
        return /* :: */[
                h2,
                merge(cmp, l1, l2[1])
              ];
      }
    } else {
      return l1;
    }
  } else {
    return l2;
  }
}

function chop(_k, _l) {
  while(true) {
    var l = _l;
    var k = _k;
    if (k === 0) {
      return l;
    } else if (l) {
      _l = l[1];
      _k = k - 1 | 0;
      continue ;
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "list.ml",
              223,
              11
            ]
          ];
    }
  };
}

function stable_sort(cmp, l) {
  var sort = function (n, l) {
    var exit = 0;
    if (n !== 2) {
      if (n !== 3 || !l) {
        exit = 1;
      } else {
        var match = l[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var x3 = match$1[0];
            var x2 = match[0];
            var x1 = l[0];
            if (Curry._2(cmp, x1, x2) <= 0) {
              if (Curry._2(cmp, x2, x3) <= 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else if (Curry._2(cmp, x1, x3) <= 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x3,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                return /* :: */[
                        x3,
                        /* :: */[
                          x1,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ]
                      ];
              }
            } else if (Curry._2(cmp, x1, x3) <= 0) {
              return /* :: */[
                      x2,
                      /* :: */[
                        x1,
                        /* :: */[
                          x3,
                          /* [] */0
                        ]
                      ]
                    ];
            } else if (Curry._2(cmp, x2, x3) <= 0) {
              return /* :: */[
                      x2,
                      /* :: */[
                        x3,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ]
                    ];
            } else {
              return /* :: */[
                      x3,
                      /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ]
                    ];
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      }
    } else if (l) {
      var match$2 = l[1];
      if (match$2) {
        var x2$1 = match$2[0];
        var x1$1 = l[0];
        if (Curry._2(cmp, x1$1, x2$1) <= 0) {
          return /* :: */[
                  x1$1,
                  /* :: */[
                    x2$1,
                    /* [] */0
                  ]
                ];
        } else {
          return /* :: */[
                  x2$1,
                  /* :: */[
                    x1$1,
                    /* [] */0
                  ]
                ];
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = rev_sort(n1, l);
      var s2 = rev_sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (l1) {
          if (l2$1) {
            var h2 = l2$1[0];
            var h1 = l1[0];
            if (Curry._2(cmp, h1, h2) > 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l1 = l1[1];
              continue ;
            } else {
              _accu = /* :: */[
                h2,
                accu
              ];
              _l2 = l2$1[1];
              continue ;
            }
          } else {
            return rev_append(l1, accu);
          }
        } else {
          return rev_append(l2$1, accu);
        }
      };
    }
    
  };
  var rev_sort = function (n, l) {
    var exit = 0;
    if (n !== 2) {
      if (n !== 3 || !l) {
        exit = 1;
      } else {
        var match = l[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var x3 = match$1[0];
            var x2 = match[0];
            var x1 = l[0];
            if (Curry._2(cmp, x1, x2) > 0) {
              if (Curry._2(cmp, x2, x3) > 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else if (Curry._2(cmp, x1, x3) > 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x3,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                return /* :: */[
                        x3,
                        /* :: */[
                          x1,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ]
                      ];
              }
            } else if (Curry._2(cmp, x1, x3) > 0) {
              return /* :: */[
                      x2,
                      /* :: */[
                        x1,
                        /* :: */[
                          x3,
                          /* [] */0
                        ]
                      ]
                    ];
            } else if (Curry._2(cmp, x2, x3) > 0) {
              return /* :: */[
                      x2,
                      /* :: */[
                        x3,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ]
                    ];
            } else {
              return /* :: */[
                      x3,
                      /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ]
                    ];
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      }
    } else if (l) {
      var match$2 = l[1];
      if (match$2) {
        var x2$1 = match$2[0];
        var x1$1 = l[0];
        if (Curry._2(cmp, x1$1, x2$1) > 0) {
          return /* :: */[
                  x1$1,
                  /* :: */[
                    x2$1,
                    /* [] */0
                  ]
                ];
        } else {
          return /* :: */[
                  x2$1,
                  /* :: */[
                    x1$1,
                    /* [] */0
                  ]
                ];
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = sort(n1, l);
      var s2 = sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (l1) {
          if (l2$1) {
            var h2 = l2$1[0];
            var h1 = l1[0];
            if (Curry._2(cmp, h1, h2) <= 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l1 = l1[1];
              continue ;
            } else {
              _accu = /* :: */[
                h2,
                accu
              ];
              _l2 = l2$1[1];
              continue ;
            }
          } else {
            return rev_append(l1, accu);
          }
        } else {
          return rev_append(l2$1, accu);
        }
      };
    }
    
  };
  var len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l);
  }
}

function sort_uniq(cmp, l) {
  var sort = function (n, l) {
    var exit = 0;
    if (n !== 2) {
      if (n !== 3 || !l) {
        exit = 1;
      } else {
        var match = l[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var x3 = match$1[0];
            var x2 = match[0];
            var x1 = l[0];
            var c = Curry._2(cmp, x1, x2);
            if (c === 0) {
              var c$1 = Curry._2(cmp, x2, x3);
              if (c$1 === 0) {
                return /* :: */[
                        x2,
                        /* [] */0
                      ];
              } else if (c$1 < 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x3,
                          /* [] */0
                        ]
                      ];
              } else {
                return /* :: */[
                        x3,
                        /* :: */[
                          x2,
                          /* [] */0
                        ]
                      ];
              }
            } else if (c < 0) {
              var c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* [] */0
                        ]
                      ];
              } else if (c$2 < 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                var c$3 = Curry._2(cmp, x1, x3);
                if (c$3 === 0) {
                  return /* :: */[
                          x1,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ];
                } else if (c$3 < 0) {
                  return /* :: */[
                          x1,
                          /* :: */[
                            x3,
                            /* :: */[
                              x2,
                              /* [] */0
                            ]
                          ]
                        ];
                } else {
                  return /* :: */[
                          x3,
                          /* :: */[
                            x1,
                            /* :: */[
                              x2,
                              /* [] */0
                            ]
                          ]
                        ];
                }
              }
            } else {
              var c$4 = Curry._2(cmp, x1, x3);
              if (c$4 === 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ];
              } else if (c$4 < 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                var c$5 = Curry._2(cmp, x2, x3);
                if (c$5 === 0) {
                  return /* :: */[
                          x2,
                          /* :: */[
                            x1,
                            /* [] */0
                          ]
                        ];
                } else if (c$5 < 0) {
                  return /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* :: */[
                              x1,
                              /* [] */0
                            ]
                          ]
                        ];
                } else {
                  return /* :: */[
                          x3,
                          /* :: */[
                            x2,
                            /* :: */[
                              x1,
                              /* [] */0
                            ]
                          ]
                        ];
                }
              }
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      }
    } else if (l) {
      var match$2 = l[1];
      if (match$2) {
        var x2$1 = match$2[0];
        var x1$1 = l[0];
        var c$6 = Curry._2(cmp, x1$1, x2$1);
        if (c$6 === 0) {
          return /* :: */[
                  x1$1,
                  /* [] */0
                ];
        } else if (c$6 < 0) {
          return /* :: */[
                  x1$1,
                  /* :: */[
                    x2$1,
                    /* [] */0
                  ]
                ];
        } else {
          return /* :: */[
                  x2$1,
                  /* :: */[
                    x1$1,
                    /* [] */0
                  ]
                ];
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = rev_sort(n1, l);
      var s2 = rev_sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (l1) {
          if (l2$1) {
            var t2 = l2$1[1];
            var h2 = l2$1[0];
            var t1 = l1[1];
            var h1 = l1[0];
            var c$7 = Curry._2(cmp, h1, h2);
            if (c$7 === 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l2 = t2;
              _l1 = t1;
              continue ;
            } else if (c$7 > 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l1 = t1;
              continue ;
            } else {
              _accu = /* :: */[
                h2,
                accu
              ];
              _l2 = t2;
              continue ;
            }
          } else {
            return rev_append(l1, accu);
          }
        } else {
          return rev_append(l2$1, accu);
        }
      };
    }
    
  };
  var rev_sort = function (n, l) {
    var exit = 0;
    if (n !== 2) {
      if (n !== 3 || !l) {
        exit = 1;
      } else {
        var match = l[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var x3 = match$1[0];
            var x2 = match[0];
            var x1 = l[0];
            var c = Curry._2(cmp, x1, x2);
            if (c === 0) {
              var c$1 = Curry._2(cmp, x2, x3);
              if (c$1 === 0) {
                return /* :: */[
                        x2,
                        /* [] */0
                      ];
              } else if (c$1 > 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x3,
                          /* [] */0
                        ]
                      ];
              } else {
                return /* :: */[
                        x3,
                        /* :: */[
                          x2,
                          /* [] */0
                        ]
                      ];
              }
            } else if (c > 0) {
              var c$2 = Curry._2(cmp, x2, x3);
              if (c$2 === 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* [] */0
                        ]
                      ];
              } else if (c$2 > 0) {
                return /* :: */[
                        x1,
                        /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                var c$3 = Curry._2(cmp, x1, x3);
                if (c$3 === 0) {
                  return /* :: */[
                          x1,
                          /* :: */[
                            x2,
                            /* [] */0
                          ]
                        ];
                } else if (c$3 > 0) {
                  return /* :: */[
                          x1,
                          /* :: */[
                            x3,
                            /* :: */[
                              x2,
                              /* [] */0
                            ]
                          ]
                        ];
                } else {
                  return /* :: */[
                          x3,
                          /* :: */[
                            x1,
                            /* :: */[
                              x2,
                              /* [] */0
                            ]
                          ]
                        ];
                }
              }
            } else {
              var c$4 = Curry._2(cmp, x1, x3);
              if (c$4 === 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* [] */0
                        ]
                      ];
              } else if (c$4 > 0) {
                return /* :: */[
                        x2,
                        /* :: */[
                          x1,
                          /* :: */[
                            x3,
                            /* [] */0
                          ]
                        ]
                      ];
              } else {
                var c$5 = Curry._2(cmp, x2, x3);
                if (c$5 === 0) {
                  return /* :: */[
                          x2,
                          /* :: */[
                            x1,
                            /* [] */0
                          ]
                        ];
                } else if (c$5 > 0) {
                  return /* :: */[
                          x2,
                          /* :: */[
                            x3,
                            /* :: */[
                              x1,
                              /* [] */0
                            ]
                          ]
                        ];
                } else {
                  return /* :: */[
                          x3,
                          /* :: */[
                            x2,
                            /* :: */[
                              x1,
                              /* [] */0
                            ]
                          ]
                        ];
                }
              }
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      }
    } else if (l) {
      var match$2 = l[1];
      if (match$2) {
        var x2$1 = match$2[0];
        var x1$1 = l[0];
        var c$6 = Curry._2(cmp, x1$1, x2$1);
        if (c$6 === 0) {
          return /* :: */[
                  x1$1,
                  /* [] */0
                ];
        } else if (c$6 > 0) {
          return /* :: */[
                  x1$1,
                  /* :: */[
                    x2$1,
                    /* [] */0
                  ]
                ];
        } else {
          return /* :: */[
                  x2$1,
                  /* :: */[
                    x1$1,
                    /* [] */0
                  ]
                ];
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var n1 = (n >> 1);
      var n2 = n - n1 | 0;
      var l2 = chop(n1, l);
      var s1 = sort(n1, l);
      var s2 = sort(n2, l2);
      var _l1 = s1;
      var _l2 = s2;
      var _accu = /* [] */0;
      while(true) {
        var accu = _accu;
        var l2$1 = _l2;
        var l1 = _l1;
        if (l1) {
          if (l2$1) {
            var t2 = l2$1[1];
            var h2 = l2$1[0];
            var t1 = l1[1];
            var h1 = l1[0];
            var c$7 = Curry._2(cmp, h1, h2);
            if (c$7 === 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l2 = t2;
              _l1 = t1;
              continue ;
            } else if (c$7 < 0) {
              _accu = /* :: */[
                h1,
                accu
              ];
              _l1 = t1;
              continue ;
            } else {
              _accu = /* :: */[
                h2,
                accu
              ];
              _l2 = t2;
              continue ;
            }
          } else {
            return rev_append(l1, accu);
          }
        } else {
          return rev_append(l2$1, accu);
        }
      };
    }
    
  };
  var len = length(l);
  if (len < 2) {
    return l;
  } else {
    return sort(len, l);
  }
}

var append = Pervasives.$at;

var concat = flatten;

var filter = find_all;

var sort = stable_sort;

var fast_sort = stable_sort;

exports.length = length;
exports.hd = hd;
exports.tl = tl;
exports.nth = nth;
exports.rev = rev;
exports.append = append;
exports.rev_append = rev_append;
exports.concat = concat;
exports.flatten = flatten;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi$1;
exports.rev_map = rev_map;
exports.fold_left = fold_left;
exports.fold_right = fold_right;
exports.iter2 = iter2;
exports.map2 = map2;
exports.rev_map2 = rev_map2;
exports.fold_left2 = fold_left2;
exports.fold_right2 = fold_right2;
exports.for_all = for_all;
exports.exists = exists;
exports.for_all2 = for_all2;
exports.exists2 = exists2;
exports.mem = mem;
exports.memq = memq;
exports.find = find;
exports.filter = filter;
exports.find_all = find_all;
exports.partition = partition;
exports.assoc = assoc;
exports.assq = assq;
exports.mem_assoc = mem_assoc;
exports.mem_assq = mem_assq;
exports.remove_assoc = remove_assoc;
exports.remove_assq = remove_assq;
exports.split = split;
exports.combine = combine;
exports.sort = sort;
exports.stable_sort = stable_sort;
exports.fast_sort = fast_sort;
exports.sort_uniq = sort_uniq;
exports.merge = merge;
/* No side effect */

},{"./caml_builtin_exceptions.js":37,"./caml_obj.js":46,"./curry.js":54,"./pervasives.js":59}],59:[function(require,module,exports){
'use strict';

var Curry = require("./curry.js");
var Caml_io = require("./caml_io.js");
var Caml_sys = require("./caml_sys.js");
var Caml_format = require("./caml_format.js");
var Caml_string = require("./caml_string.js");
var Caml_exceptions = require("./caml_exceptions.js");
var Caml_missing_polyfill = require("./caml_missing_polyfill.js");
var Caml_builtin_exceptions = require("./caml_builtin_exceptions.js");
var CamlinternalFormatBasics = require("./camlinternalFormatBasics.js");

function failwith(s) {
  throw [
        Caml_builtin_exceptions.failure,
        s
      ];
}

function invalid_arg(s) {
  throw [
        Caml_builtin_exceptions.invalid_argument,
        s
      ];
}

var Exit = Caml_exceptions.create("Pervasives.Exit");

function abs(x) {
  if (x >= 0) {
    return x;
  } else {
    return -x | 0;
  }
}

function lnot(x) {
  return x ^ -1;
}

var min_int = -2147483648;

function char_of_int(n) {
  if (n < 0 || n > 255) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "char_of_int"
        ];
  } else {
    return n;
  }
}

function string_of_bool(b) {
  if (b) {
    return "true";
  } else {
    return "false";
  }
}

function bool_of_string(param) {
  switch (param) {
    case "false" : 
        return false;
    case "true" : 
        return true;
    default:
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "bool_of_string"
          ];
  }
}

function valid_float_lexem(s) {
  var l = s.length;
  var _i = 0;
  while(true) {
    var i = _i;
    if (i >= l) {
      return s + ".";
    } else {
      var match = Caml_string.get(s, i);
      if (match >= 48) {
        if (match >= 58) {
          return s;
        } else {
          _i = i + 1 | 0;
          continue ;
        }
      } else if (match !== 45) {
        return s;
      } else {
        _i = i + 1 | 0;
        continue ;
      }
    }
  };
}

function string_of_float(f) {
  return valid_float_lexem(Caml_format.caml_format_float("%.12g", f));
}

function $at(l1, l2) {
  if (l1) {
    return /* :: */[
            l1[0],
            $at(l1[1], l2)
          ];
  } else {
    return l2;
  }
}

var stdin = Caml_io.stdin;

var stdout = Caml_io.stdout;

var stderr = Caml_io.stderr;

function open_out_gen(mode, perm, name) {
  return Caml_io.caml_ml_open_descriptor_out(Caml_missing_polyfill.not_implemented("caml_sys_open"));
}

function open_out(name) {
  return open_out_gen(/* :: */[
              /* Open_wronly */1,
              /* :: */[
                /* Open_creat */3,
                /* :: */[
                  /* Open_trunc */4,
                  /* :: */[
                    /* Open_text */7,
                    /* [] */0
                  ]
                ]
              ]
            ], 438, name);
}

function open_out_bin(name) {
  return open_out_gen(/* :: */[
              /* Open_wronly */1,
              /* :: */[
                /* Open_creat */3,
                /* :: */[
                  /* Open_trunc */4,
                  /* :: */[
                    /* Open_binary */6,
                    /* [] */0
                  ]
                ]
              ]
            ], 438, name);
}

function flush_all(param) {
  var _param = Caml_io.caml_ml_out_channels_list(/* () */0);
  while(true) {
    var param$1 = _param;
    if (param$1) {
      try {
        Caml_io.caml_ml_flush(param$1[0]);
      }
      catch (exn){
        
      }
      _param = param$1[1];
      continue ;
    } else {
      return /* () */0;
    }
  };
}

function output_bytes(oc, s) {
  return Caml_io.caml_ml_output(oc, s, 0, s.length);
}

function output_string(oc, s) {
  return Caml_io.caml_ml_output(oc, s, 0, s.length);
}

function output(oc, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "output"
        ];
  } else {
    return Caml_io.caml_ml_output(oc, s, ofs, len);
  }
}

function output_substring(oc, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "output_substring"
        ];
  } else {
    return Caml_io.caml_ml_output(oc, s, ofs, len);
  }
}

function output_value(chan, v) {
  return Caml_missing_polyfill.not_implemented("caml_output_value");
}

function close_out(oc) {
  Caml_io.caml_ml_flush(oc);
  return Caml_missing_polyfill.not_implemented("caml_ml_close_channel");
}

function close_out_noerr(oc) {
  try {
    Caml_io.caml_ml_flush(oc);
  }
  catch (exn){
    
  }
  try {
    return Caml_missing_polyfill.not_implemented("caml_ml_close_channel");
  }
  catch (exn$1){
    return /* () */0;
  }
}

function open_in_gen(mode, perm, name) {
  return Caml_io.caml_ml_open_descriptor_in(Caml_missing_polyfill.not_implemented("caml_sys_open"));
}

function open_in(name) {
  return open_in_gen(/* :: */[
              /* Open_rdonly */0,
              /* :: */[
                /* Open_text */7,
                /* [] */0
              ]
            ], 0, name);
}

function open_in_bin(name) {
  return open_in_gen(/* :: */[
              /* Open_rdonly */0,
              /* :: */[
                /* Open_binary */6,
                /* [] */0
              ]
            ], 0, name);
}

function input(ic, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "input"
        ];
  } else {
    return Caml_missing_polyfill.not_implemented("caml_ml_input");
  }
}

function unsafe_really_input(ic, s, _ofs, _len) {
  while(true) {
    var len = _len;
    var ofs = _ofs;
    if (len <= 0) {
      return /* () */0;
    } else {
      var r = Caml_missing_polyfill.not_implemented("caml_ml_input");
      if (r === 0) {
        throw Caml_builtin_exceptions.end_of_file;
      } else {
        _len = len - r | 0;
        _ofs = ofs + r | 0;
        continue ;
      }
    }
  };
}

function really_input(ic, s, ofs, len) {
  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "really_input"
        ];
  } else {
    return unsafe_really_input(ic, s, ofs, len);
  }
}

function really_input_string(ic, len) {
  var s = Caml_string.caml_create_string(len);
  really_input(ic, s, 0, len);
  return Caml_string.bytes_to_string(s);
}

function input_line(chan) {
  var build_result = function (buf, _pos, _param) {
    while(true) {
      var param = _param;
      var pos = _pos;
      if (param) {
        var hd = param[0];
        var len = hd.length;
        Caml_string.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);
        _param = param[1];
        _pos = pos - len | 0;
        continue ;
      } else {
        return buf;
      }
    };
  };
  var scan = function (_accu, _len) {
    while(true) {
      var len = _len;
      var accu = _accu;
      var n = Caml_missing_polyfill.not_implemented("caml_ml_input_scan_line");
      if (n === 0) {
        if (accu) {
          return build_result(Caml_string.caml_create_string(len), len, accu);
        } else {
          throw Caml_builtin_exceptions.end_of_file;
        }
      } else if (n > 0) {
        var res = Caml_string.caml_create_string(n - 1 | 0);
        Caml_missing_polyfill.not_implemented("caml_ml_input");
        Caml_io.caml_ml_input_char(chan);
        if (accu) {
          var len$1 = (len + n | 0) - 1 | 0;
          return build_result(Caml_string.caml_create_string(len$1), len$1, /* :: */[
                      res,
                      accu
                    ]);
        } else {
          return res;
        }
      } else {
        var beg = Caml_string.caml_create_string(-n | 0);
        Caml_missing_polyfill.not_implemented("caml_ml_input");
        _len = len - n | 0;
        _accu = /* :: */[
          beg,
          accu
        ];
        continue ;
      }
    };
  };
  return Caml_string.bytes_to_string(scan(/* [] */0, 0));
}

function close_in_noerr(ic) {
  try {
    return Caml_missing_polyfill.not_implemented("caml_ml_close_channel");
  }
  catch (exn){
    return /* () */0;
  }
}

function print_char(c) {
  return Caml_io.caml_ml_output_char(stdout, c);
}

function print_string(s) {
  return output_string(stdout, s);
}

function print_bytes(s) {
  return output_bytes(stdout, s);
}

function print_int(i) {
  return output_string(stdout, String(i));
}

function print_float(f) {
  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
}

function print_newline(param) {
  Caml_io.caml_ml_output_char(stdout, /* "\n" */10);
  return Caml_io.caml_ml_flush(stdout);
}

function prerr_char(c) {
  return Caml_io.caml_ml_output_char(stderr, c);
}

function prerr_string(s) {
  return output_string(stderr, s);
}

function prerr_bytes(s) {
  return output_bytes(stderr, s);
}

function prerr_int(i) {
  return output_string(stderr, String(i));
}

function prerr_float(f) {
  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float("%.12g", f)));
}

function prerr_newline(param) {
  Caml_io.caml_ml_output_char(stderr, /* "\n" */10);
  return Caml_io.caml_ml_flush(stderr);
}

function read_line(param) {
  Caml_io.caml_ml_flush(stdout);
  return input_line(stdin);
}

function read_int(param) {
  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
}

function read_float(param) {
  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));
}

function string_of_format(param) {
  return param[1];
}

function $caret$caret(param, param$1) {
  return /* Format */[
          CamlinternalFormatBasics.concat_fmt(param[0], param$1[0]),
          param[1] + ("%," + param$1[1])
        ];
}

var exit_function = /* record */[/* contents */flush_all];

function at_exit(f) {
  var g = exit_function[0];
  exit_function[0] = (function (param) {
      Curry._1(f, /* () */0);
      return Curry._1(g, /* () */0);
    });
  return /* () */0;
}

function do_at_exit(param) {
  return Curry._1(exit_function[0], /* () */0);
}

function exit(retcode) {
  do_at_exit(/* () */0);
  return Caml_sys.caml_sys_exit(retcode);
}

var max_int = 2147483647;

var epsilon_float = 2.220446049250313e-16;

var flush = Caml_io.caml_ml_flush;

var output_char = Caml_io.caml_ml_output_char;

var output_byte = Caml_io.caml_ml_output_char;

function output_binary_int(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_output_int");
}

function seek_out(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_seek_out");
}

function pos_out(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_pos_out");
}

function out_channel_length(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_channel_size");
}

function set_binary_mode_out(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_set_binary_mode");
}

var input_char = Caml_io.caml_ml_input_char;

var input_byte = Caml_io.caml_ml_input_char;

function input_binary_int(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_input_int");
}

function input_value(prim) {
  return Caml_missing_polyfill.not_implemented("caml_input_value");
}

function seek_in(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_seek_in");
}

function pos_in(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_pos_in");
}

function in_channel_length(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_channel_size");
}

function close_in(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_close_channel");
}

function set_binary_mode_in(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_set_binary_mode");
}

function LargeFile_000(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_seek_out_64");
}

function LargeFile_001(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_pos_out_64");
}

function LargeFile_002(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_channel_size_64");
}

function LargeFile_003(prim, prim$1) {
  return Caml_missing_polyfill.not_implemented("caml_ml_seek_in_64");
}

function LargeFile_004(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_pos_in_64");
}

function LargeFile_005(prim) {
  return Caml_missing_polyfill.not_implemented("caml_ml_channel_size_64");
}

var LargeFile = [
  LargeFile_000,
  LargeFile_001,
  LargeFile_002,
  LargeFile_003,
  LargeFile_004,
  LargeFile_005
];

exports.invalid_arg = invalid_arg;
exports.failwith = failwith;
exports.Exit = Exit;
exports.abs = abs;
exports.max_int = max_int;
exports.min_int = min_int;
exports.lnot = lnot;
exports.epsilon_float = epsilon_float;
exports.char_of_int = char_of_int;
exports.string_of_bool = string_of_bool;
exports.bool_of_string = bool_of_string;
exports.string_of_float = string_of_float;
exports.$at = $at;
exports.stdin = stdin;
exports.stdout = stdout;
exports.stderr = stderr;
exports.print_char = print_char;
exports.print_string = print_string;
exports.print_bytes = print_bytes;
exports.print_int = print_int;
exports.print_float = print_float;
exports.print_newline = print_newline;
exports.prerr_char = prerr_char;
exports.prerr_string = prerr_string;
exports.prerr_bytes = prerr_bytes;
exports.prerr_int = prerr_int;
exports.prerr_float = prerr_float;
exports.prerr_newline = prerr_newline;
exports.read_line = read_line;
exports.read_int = read_int;
exports.read_float = read_float;
exports.open_out = open_out;
exports.open_out_bin = open_out_bin;
exports.open_out_gen = open_out_gen;
exports.flush = flush;
exports.flush_all = flush_all;
exports.output_char = output_char;
exports.output_string = output_string;
exports.output_bytes = output_bytes;
exports.output = output;
exports.output_substring = output_substring;
exports.output_byte = output_byte;
exports.output_binary_int = output_binary_int;
exports.output_value = output_value;
exports.seek_out = seek_out;
exports.pos_out = pos_out;
exports.out_channel_length = out_channel_length;
exports.close_out = close_out;
exports.close_out_noerr = close_out_noerr;
exports.set_binary_mode_out = set_binary_mode_out;
exports.open_in = open_in;
exports.open_in_bin = open_in_bin;
exports.open_in_gen = open_in_gen;
exports.input_char = input_char;
exports.input_line = input_line;
exports.input = input;
exports.really_input = really_input;
exports.really_input_string = really_input_string;
exports.input_byte = input_byte;
exports.input_binary_int = input_binary_int;
exports.input_value = input_value;
exports.seek_in = seek_in;
exports.pos_in = pos_in;
exports.in_channel_length = in_channel_length;
exports.close_in = close_in;
exports.close_in_noerr = close_in_noerr;
exports.set_binary_mode_in = set_binary_mode_in;
exports.LargeFile = LargeFile;
exports.string_of_format = string_of_format;
exports.$caret$caret = $caret$caret;
exports.exit = exit;
exports.at_exit = at_exit;
exports.valid_float_lexem = valid_float_lexem;
exports.unsafe_really_input = unsafe_really_input;
exports.do_at_exit = do_at_exit;
/* No side effect */

},{"./caml_builtin_exceptions.js":37,"./caml_exceptions.js":39,"./caml_format.js":41,"./caml_io.js":44,"./caml_missing_polyfill.js":45,"./caml_string.js":48,"./caml_sys.js":49,"./camlinternalFormatBasics.js":52,"./curry.js":54}],60:[function(require,module,exports){
'use strict';

var Curry = require("./curry.js");
var $$Buffer = require("./buffer.js");
var Pervasives = require("./pervasives.js");
var CamlinternalFormat = require("./camlinternalFormat.js");

function kfprintf(k, o, param) {
  return CamlinternalFormat.make_printf((function (o, acc) {
                CamlinternalFormat.output_acc(o, acc);
                return Curry._1(k, o);
              }), o, /* End_of_acc */0, param[0]);
}

function kbprintf(k, b, param) {
  return CamlinternalFormat.make_printf((function (b, acc) {
                CamlinternalFormat.bufput_acc(b, acc);
                return Curry._1(k, b);
              }), b, /* End_of_acc */0, param[0]);
}

function ikfprintf(k, oc, param) {
  return CamlinternalFormat.make_printf((function (oc, param) {
                return Curry._1(k, oc);
              }), oc, /* End_of_acc */0, param[0]);
}

function fprintf(oc, fmt) {
  return kfprintf((function (prim) {
                return /* () */0;
              }), oc, fmt);
}

function bprintf(b, fmt) {
  return kbprintf((function (prim) {
                return /* () */0;
              }), b, fmt);
}

function ifprintf(oc, fmt) {
  return ikfprintf((function (prim) {
                return /* () */0;
              }), oc, fmt);
}

function printf(fmt) {
  return fprintf(Pervasives.stdout, fmt);
}

function eprintf(fmt) {
  return fprintf(Pervasives.stderr, fmt);
}

function ksprintf(k, param) {
  var k$prime = function (param, acc) {
    var buf = $$Buffer.create(64);
    CamlinternalFormat.strput_acc(buf, acc);
    return Curry._1(k, $$Buffer.contents(buf));
  };
  return CamlinternalFormat.make_printf(k$prime, /* () */0, /* End_of_acc */0, param[0]);
}

function sprintf(fmt) {
  return ksprintf((function (s) {
                return s;
              }), fmt);
}

var kprintf = ksprintf;

exports.fprintf = fprintf;
exports.printf = printf;
exports.eprintf = eprintf;
exports.sprintf = sprintf;
exports.bprintf = bprintf;
exports.ifprintf = ifprintf;
exports.kfprintf = kfprintf;
exports.ikfprintf = ikfprintf;
exports.ksprintf = ksprintf;
exports.kbprintf = kbprintf;
exports.kprintf = kprintf;
/* No side effect */

},{"./buffer.js":34,"./camlinternalFormat.js":51,"./curry.js":54,"./pervasives.js":59}],61:[function(require,module,exports){
'use strict';

var List = require("./list.js");
var Bytes = require("./bytes.js");
var Caml_int32 = require("./caml_int32.js");
var Caml_string = require("./caml_string.js");
var Caml_primitive = require("./caml_primitive.js");

function make(n, c) {
  return Caml_string.bytes_to_string(Bytes.make(n, c));
}

function init(n, f) {
  return Caml_string.bytes_to_string(Bytes.init(n, f));
}

function copy(s) {
  return Caml_string.bytes_to_string(Bytes.copy(Caml_string.bytes_of_string(s)));
}

function sub(s, ofs, len) {
  return Caml_string.bytes_to_string(Bytes.sub(Caml_string.bytes_of_string(s), ofs, len));
}

function concat(sep, l) {
  if (l) {
    var hd = l[0];
    var num = /* record */[/* contents */0];
    var len = /* record */[/* contents */0];
    List.iter((function (s) {
            num[0] = num[0] + 1 | 0;
            len[0] = len[0] + s.length | 0;
            return /* () */0;
          }), l);
    var r = Caml_string.caml_create_string(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);
    Caml_string.caml_blit_string(hd, 0, r, 0, hd.length);
    var pos = /* record */[/* contents */hd.length];
    List.iter((function (s) {
            Caml_string.caml_blit_string(sep, 0, r, pos[0], sep.length);
            pos[0] = pos[0] + sep.length | 0;
            Caml_string.caml_blit_string(s, 0, r, pos[0], s.length);
            pos[0] = pos[0] + s.length | 0;
            return /* () */0;
          }), l[1]);
    return Caml_string.bytes_to_string(r);
  } else {
    return "";
  }
}

function iter(f, s) {
  return Bytes.iter(f, Caml_string.bytes_of_string(s));
}

function iteri(f, s) {
  return Bytes.iteri(f, Caml_string.bytes_of_string(s));
}

function map(f, s) {
  return Caml_string.bytes_to_string(Bytes.map(f, Caml_string.bytes_of_string(s)));
}

function mapi(f, s) {
  return Caml_string.bytes_to_string(Bytes.mapi(f, Caml_string.bytes_of_string(s)));
}

function is_space(param) {
  var switcher = param - 9 | 0;
  if (switcher > 4 || switcher < 0) {
    return switcher === 23;
  } else {
    return switcher !== 2;
  }
}

function trim(s) {
  if (s === "" || !(is_space(s.charCodeAt(0)) || is_space(s.charCodeAt(s.length - 1 | 0)))) {
    return s;
  } else {
    return Caml_string.bytes_to_string(Bytes.trim(Caml_string.bytes_of_string(s)));
  }
}

function escaped(s) {
  var needs_escape = function (_i) {
    while(true) {
      var i = _i;
      if (i >= s.length) {
        return false;
      } else {
        var match = s.charCodeAt(i);
        if (match >= 32) {
          var switcher = match - 34 | 0;
          if (switcher > 58 || switcher < 0) {
            if (switcher >= 93) {
              return true;
            } else {
              _i = i + 1 | 0;
              continue ;
            }
          } else if (switcher > 57 || switcher < 1) {
            return true;
          } else {
            _i = i + 1 | 0;
            continue ;
          }
        } else {
          return true;
        }
      }
    };
  };
  if (needs_escape(0)) {
    return Caml_string.bytes_to_string(Bytes.escaped(Caml_string.bytes_of_string(s)));
  } else {
    return s;
  }
}

function index(s, c) {
  return Bytes.index(Caml_string.bytes_of_string(s), c);
}

function rindex(s, c) {
  return Bytes.rindex(Caml_string.bytes_of_string(s), c);
}

function index_from(s, i, c) {
  return Bytes.index_from(Caml_string.bytes_of_string(s), i, c);
}

function rindex_from(s, i, c) {
  return Bytes.rindex_from(Caml_string.bytes_of_string(s), i, c);
}

function contains(s, c) {
  return Bytes.contains(Caml_string.bytes_of_string(s), c);
}

function contains_from(s, i, c) {
  return Bytes.contains_from(Caml_string.bytes_of_string(s), i, c);
}

function rcontains_from(s, i, c) {
  return Bytes.rcontains_from(Caml_string.bytes_of_string(s), i, c);
}

function uppercase(s) {
  return Caml_string.bytes_to_string(Bytes.uppercase(Caml_string.bytes_of_string(s)));
}

function lowercase(s) {
  return Caml_string.bytes_to_string(Bytes.lowercase(Caml_string.bytes_of_string(s)));
}

function capitalize(s) {
  return Caml_string.bytes_to_string(Bytes.capitalize(Caml_string.bytes_of_string(s)));
}

function uncapitalize(s) {
  return Caml_string.bytes_to_string(Bytes.uncapitalize(Caml_string.bytes_of_string(s)));
}

var compare = Caml_primitive.caml_string_compare;

var fill = Bytes.fill;

var blit = Bytes.blit_string;

exports.make = make;
exports.init = init;
exports.copy = copy;
exports.sub = sub;
exports.fill = fill;
exports.blit = blit;
exports.concat = concat;
exports.iter = iter;
exports.iteri = iteri;
exports.map = map;
exports.mapi = mapi;
exports.trim = trim;
exports.escaped = escaped;
exports.index = index;
exports.rindex = rindex;
exports.index_from = index_from;
exports.rindex_from = rindex_from;
exports.contains = contains;
exports.contains_from = contains_from;
exports.rcontains_from = rcontains_from;
exports.uppercase = uppercase;
exports.lowercase = lowercase;
exports.capitalize = capitalize;
exports.uncapitalize = uncapitalize;
exports.compare = compare;
/* No side effect */

},{"./bytes.js":35,"./caml_int32.js":42,"./caml_primitive.js":47,"./caml_string.js":48,"./list.js":58}],62:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[22])(22)
});