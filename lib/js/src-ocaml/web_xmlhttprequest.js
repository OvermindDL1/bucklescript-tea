// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Web_formdata = require("./web_formdata.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function abort(x) {
  return x.abort();
}

function getAllResponseHeaders(x) {
  var match = x.getAllResponseHeaders();
  if (match !== null) {
    if (match === "") {
      return /* Error */Block.__(1, [/* NetworkError */1]);
    } else {
      return /* Ok */Block.__(0, [match]);
    }
  } else {
    return /* Error */Block.__(1, [/* IncompleteResponse */0]);
  }
}

function getAllResponseHeadersAsList(x) {
  var err = getAllResponseHeaders(x);
  if (err.tag) {
    return err;
  } else {
    return /* Ok */Block.__(0, [List.map((function (param) {
                      if (param.length !== 2) {
                        throw [
                              Caml_builtin_exceptions.failure,
                              "Cannot happen, already checked length"
                            ];
                      } else {
                        var key = param[0];
                        var value = param[1];
                        return /* tuple */[
                                key,
                                value
                              ];
                      }
                    }), List.filter((function (a) {
                            return a.length === 2;
                          }))($$Array.to_list($$Array.map((function (param) {
                                  return param.split(": ", 2);
                                }), err[0].split("\r\n")))))]);
  }
}

function getAllResponseHeadersAsDict(x) {
  var height = function (param) {
    if (param) {
      return param[4];
    } else {
      return 0;
    }
  };
  var create = function (l, x, d, r) {
    var hl = height(l);
    var hr = height(r);
    return /* Node */[
            l,
            x,
            d,
            r,
            hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          ];
  };
  var singleton = function (x, d) {
    return /* Node */[
            /* Empty */0,
            x,
            d,
            /* Empty */0,
            1
          ];
  };
  var bal = function (l, x, d, r) {
    var hl = l ? l[4] : 0;
    var hr = r ? r[4] : 0;
    if (hl > (hr + 2 | 0)) {
      if (l) {
        var lr = l[3];
        var ld = l[2];
        var lv = l[1];
        var ll = l[0];
        if (height(ll) >= height(lr)) {
          return create(ll, lv, ld, create(lr, x, d, r));
        } else if (lr) {
          return create(create(ll, lv, ld, lr[0]), lr[1], lr[2], create(lr[3], x, d, r));
        } else {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else if (hr > (hl + 2 | 0)) {
      if (r) {
        var rr = r[3];
        var rd = r[2];
        var rv = r[1];
        var rl = r[0];
        if (height(rr) >= height(rl)) {
          return create(create(l, x, d, rl), rv, rd, rr);
        } else if (rl) {
          return create(create(l, x, d, rl[0]), rl[1], rl[2], create(rl[3], rv, rd, rr));
        } else {
          throw [
                Caml_builtin_exceptions.invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              Caml_builtin_exceptions.invalid_argument,
              "Map.bal"
            ];
      }
    } else {
      return /* Node */[
              l,
              x,
              d,
              r,
              hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            ];
    }
  };
  var add = function (x, data, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        return /* Node */[
                l,
                x,
                data,
                r,
                param[4]
              ];
      } else if (c < 0) {
        return bal(add(x, data, l), v, d, r);
      } else {
        return bal(l, v, d, add(x, data, r));
      }
    } else {
      return /* Node */[
              /* Empty */0,
              x,
              data,
              /* Empty */0,
              1
            ];
    }
  };
  var min_binding = function (_param) {
    while(true) {
      var param = _param;
      if (param) {
        var l = param[0];
        if (l) {
          _param = l;
          continue ;
        } else {
          return /* tuple */[
                  param[1],
                  param[2]
                ];
        }
      } else {
        throw Caml_builtin_exceptions.not_found;
      }
    };
  };
  var remove_min_binding = function (param) {
    if (param) {
      var l = param[0];
      if (l) {
        return bal(remove_min_binding(l), param[1], param[2], param[3]);
      } else {
        return param[3];
      }
    } else {
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "Map.remove_min_elt"
          ];
    }
  };
  var remove = function (x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        var t1 = l;
        var t2 = r;
        if (t1) {
          if (t2) {
            var match = min_binding(t2);
            return bal(t1, match[0], match[1], remove_min_binding(t2));
          } else {
            return t1;
          }
        } else {
          return t2;
        }
      } else if (c < 0) {
        return bal(remove(x, l), v, d, r);
      } else {
        return bal(l, v, d, remove(x, r));
      }
    } else {
      return /* Empty */0;
    }
  };
  var iter = function (f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        iter(f, param[0]);
        Curry._2(f, param[1], param[2]);
        _param = param[3];
        continue ;
      } else {
        return /* () */0;
      }
    };
  };
  var map = function (f, param) {
    if (param) {
      var l$prime = map(f, param[0]);
      var d$prime = Curry._1(f, param[2]);
      var r$prime = map(f, param[3]);
      return /* Node */[
              l$prime,
              param[1],
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  };
  var mapi = function (f, param) {
    if (param) {
      var v = param[1];
      var l$prime = mapi(f, param[0]);
      var d$prime = Curry._2(f, v, param[2]);
      var r$prime = mapi(f, param[3]);
      return /* Node */[
              l$prime,
              v,
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  };
  var fold = function (f, _m, _accu) {
    while(true) {
      var accu = _accu;
      var m = _m;
      if (m) {
        _accu = Curry._3(f, m[1], m[2], fold(f, m[0], accu));
        _m = m[3];
        continue ;
      } else {
        return accu;
      }
    };
  };
  var for_all = function (p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (Curry._2(p, param[1], param[2]) && for_all(p, param[0])) {
          _param = param[3];
          continue ;
        } else {
          return false;
        }
      } else {
        return true;
      }
    };
  };
  var exists = function (p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (Curry._2(p, param[1], param[2]) || exists(p, param[0])) {
          return true;
        } else {
          _param = param[3];
          continue ;
        }
      } else {
        return false;
      }
    };
  };
  var add_min_binding = function (k, v, param) {
    if (param) {
      return bal(add_min_binding(k, v, param[0]), param[1], param[2], param[3]);
    } else {
      return singleton(k, v);
    }
  };
  var add_max_binding = function (k, v, param) {
    if (param) {
      return bal(param[0], param[1], param[2], add_max_binding(k, v, param[3]));
    } else {
      return singleton(k, v);
    }
  };
  var join = function (l, v, d, r) {
    if (l) {
      if (r) {
        var rh = r[4];
        var lh = l[4];
        if (lh > (rh + 2 | 0)) {
          return bal(l[0], l[1], l[2], join(l[3], v, d, r));
        } else if (rh > (lh + 2 | 0)) {
          return bal(join(l, v, d, r[0]), r[1], r[2], r[3]);
        } else {
          return create(l, v, d, r);
        }
      } else {
        return add_max_binding(v, d, l);
      }
    } else {
      return add_min_binding(v, d, r);
    }
  };
  var concat = function (t1, t2) {
    if (t1) {
      if (t2) {
        var match = min_binding(t2);
        return join(t1, match[0], match[1], remove_min_binding(t2));
      } else {
        return t1;
      }
    } else {
      return t2;
    }
  };
  var concat_or_join = function (t1, v, d, t2) {
    if (d !== undefined) {
      return join(t1, v, Js_primitive.valFromOption(d), t2);
    } else {
      return concat(t1, t2);
    }
  };
  var split = function (x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = Caml_primitive.caml_string_compare(x, v);
      if (c === 0) {
        return /* tuple */[
                l,
                Js_primitive.some(d),
                r
              ];
      } else if (c < 0) {
        var match = split(x, l);
        return /* tuple */[
                match[0],
                match[1],
                join(match[2], v, d, r)
              ];
      } else {
        var match$1 = split(x, r);
        return /* tuple */[
                join(l, v, d, match$1[0]),
                match$1[1],
                match$1[2]
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              undefined,
              /* Empty */0
            ];
    }
  };
  var merge = function (f, s1, s2) {
    var exit = 0;
    if (s1) {
      var v1 = s1[1];
      if (s1[4] >= height(s2)) {
        var match = split(v1, s2);
        return concat_or_join(merge(f, s1[0], match[0]), v1, Curry._3(f, v1, Js_primitive.some(s1[2]), match[1]), merge(f, s1[3], match[2]));
      } else {
        exit = 1;
      }
    } else if (s2) {
      exit = 1;
    } else {
      return /* Empty */0;
    }
    if (exit === 1) {
      if (s2) {
        var v2 = s2[1];
        var match$1 = split(v2, s1);
        return concat_or_join(merge(f, match$1[0], s2[0]), v2, Curry._3(f, v2, match$1[1], Js_primitive.some(s2[2])), merge(f, match$1[2], s2[3]));
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "map.ml",
                270,
                10
              ]
            ];
      }
    }
    
  };
  var filter = function (p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var l$prime = filter(p, param[0]);
      var pvd = Curry._2(p, v, d);
      var r$prime = filter(p, param[3]);
      if (pvd) {
        return join(l$prime, v, d, r$prime);
      } else {
        return concat(l$prime, r$prime);
      }
    } else {
      return /* Empty */0;
    }
  };
  var partition = function (p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var match = partition(p, param[0]);
      var lf = match[1];
      var lt = match[0];
      var pvd = Curry._2(p, v, d);
      var match$1 = partition(p, param[3]);
      var rf = match$1[1];
      var rt = match$1[0];
      if (pvd) {
        return /* tuple */[
                join(lt, v, d, rt),
                concat(lf, rf)
              ];
      } else {
        return /* tuple */[
                concat(lt, rt),
                join(lf, v, d, rf)
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              /* Empty */0
            ];
    }
  };
  var cardinal = function (param) {
    if (param) {
      return (cardinal(param[0]) + 1 | 0) + cardinal(param[3]) | 0;
    } else {
      return 0;
    }
  };
  var bindings_aux = function (_accu, _param) {
    while(true) {
      var param = _param;
      var accu = _accu;
      if (param) {
        _param = param[0];
        _accu = /* :: */[
          /* tuple */[
            param[1],
            param[2]
          ],
          bindings_aux(accu, param[3])
        ];
        continue ;
      } else {
        return accu;
      }
    };
  };
  var err = getAllResponseHeadersAsList(x);
  if (err.tag) {
    return err;
  } else {
    var insert = function (d, param) {
      return add(param[0], param[1], d);
    };
    return /* Ok */Block.__(0, [List.fold_left(insert, /* Empty */0, err[0])]);
  }
}

function getResponseHeader(key, x) {
  return Js_primitive.null_to_opt(x.getResponse(key));
}

function open_(method$prime, url, $staropt$star, $staropt$star$1, $staropt$star$2, x) {
  var async = $staropt$star !== undefined ? $staropt$star : true;
  var user = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
  var password = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
  return x.open(method$prime, url, async, user, password);
}

function overrideMimeType(mimetype, x) {
  return x.overrideMimeType(mimetype);
}

function send(body, x) {
  if (typeof body === "number") {
    if (body === 0) {
      return x.send();
    } else {
      return x.send(null);
    }
  } else {
    switch (body.tag | 0) {
      case 0 : 
          return x.send(body[0]);
      case 1 : 
          return x.send(body[0]);
      case 2 : 
          var form = List.fold_left((function (f, param) {
                  Web_formdata.append(param[0], param[1], f);
                  return f;
                }), new FormData(), body[0]);
          return x.send(form);
      case 3 : 
          return x.send(body[0]);
      
    }
  }
}

function setRequestHeader(header, value, x) {
  return x.setRequestHeader(header, value);
}

function set_onreadystatechange(cb, x) {
  x.onreadystatechange = cb;
  return /* () */0;
}

function get_onreadystatechange(x) {
  return x.onreadystatechange;
}

function readyState(x) {
  var i = x.readyState;
  if (i > 4 || i < 0) {
    var s = "Invalid return from 'readystate' of: " + String(i);
    throw [
          Caml_builtin_exceptions.failure,
          s
        ];
  } else {
    return i;
  }
}

function set_responseType(typ, x) {
  if (typeof typ === "number") {
    switch (typ) {
      case 0 : 
          x.responseType = "";
          return /* () */0;
      case 1 : 
          x.responseType = "arraybuffer";
          return /* () */0;
      case 2 : 
          x.responseType = "blob";
          return /* () */0;
      case 3 : 
          x.responseType = "document";
          return /* () */0;
      case 4 : 
          x.responseType = "json";
          return /* () */0;
      case 5 : 
          x.responseType = "text";
          return /* () */0;
      
    }
  } else {
    x.responseType = typ[0];
    return /* () */0;
  }
}

function get_responseType(x) {
  var s = x.responseType;
  switch (s) {
    case "" : 
        return /* StringResponseType */0;
    case "arraybuffer" : 
        return /* ArrayBufferResponseType */1;
    case "blob" : 
        return /* BlobResponseType */2;
    case "document" : 
        return /* DocumentResponseType */3;
    case "json" : 
        return /* JsonResponseType */4;
    case "text" : 
        return /* TextResponseType */5;
    default:
      return /* RawResponseType */[s];
  }
}

function get_response(x) {
  var match = x.response;
  if (match !== null) {
    var match$1 = get_responseType(x);
    if (typeof match$1 === "number") {
      switch (match$1) {
        case 0 : 
            return /* StringResponse */Block.__(0, [match]);
        case 1 : 
            return /* ArrayBufferResponse */Block.__(1, [match]);
        case 2 : 
            return /* BlobResponse */Block.__(2, [match]);
        case 3 : 
            return /* DocumentResponse */Block.__(3, [match]);
        case 4 : 
            return /* JsonResponse */Block.__(4, [match]);
        case 5 : 
            return /* TextResponse */Block.__(5, [match]);
        
      }
    } else {
      return /* RawResponse */Block.__(6, [
                match$1[0],
                match
              ]);
    }
  } else {
    return /* NoResponse */0;
  }
}

function get_responseText(x) {
  return x.responseText;
}

function get_responseURL(x) {
  return x.responseURL;
}

function get_responseXML(x) {
  return Js_primitive.null_to_opt(x.responseXML);
}

function get_status(x) {
  return x.status;
}

function get_statusText(x) {
  return x.statusText;
}

function set_timeout(t, x) {
  x.timeout = t;
  return /* () */0;
}

function get_timeout(x) {
  return x.timeout;
}

function set_withCredentials(b, x) {
  x.withCredentials = b;
  return /* () */0;
}

function get_withCredentials(x) {
  return x.withCredentials;
}

function set_onabort(cb, x) {
  x.onabort = cb;
  return /* () */0;
}

function get_onabort(x) {
  return x.onabort;
}

function set_onerror(cb, x) {
  x.onerror = cb;
  return /* () */0;
}

function get_onerror(x) {
  return x.onerror;
}

function set_onload(cb, x) {
  x.onload = cb;
  return /* () */0;
}

function get_onload(x) {
  return x.onload;
}

function set_onloadstart(cb, x) {
  x.onloadstart = cb;
  return /* () */0;
}

function get_onloadstart(x) {
  return x.onloadstart;
}

function set_onprogress(cb, x) {
  x.onprogress = cb;
  return /* () */0;
}

function get_onprogress(x) {
  return x.onprogress;
}

function set_ontimeout(cb, x) {
  x.ontimeout = cb;
  return /* () */0;
}

function get_ontimeout(x) {
  return x.ontimeout;
}

function set_onloadend(cb, x) {
  x.onloadend = cb;
  return /* () */0;
}

function get_onloadend(x) {
  return x.onloadend;
}

exports.abort = abort;
exports.getAllResponseHeaders = getAllResponseHeaders;
exports.getAllResponseHeadersAsList = getAllResponseHeadersAsList;
exports.getAllResponseHeadersAsDict = getAllResponseHeadersAsDict;
exports.getResponseHeader = getResponseHeader;
exports.open_ = open_;
exports.overrideMimeType = overrideMimeType;
exports.send = send;
exports.setRequestHeader = setRequestHeader;
exports.set_onreadystatechange = set_onreadystatechange;
exports.get_onreadystatechange = get_onreadystatechange;
exports.readyState = readyState;
exports.set_responseType = set_responseType;
exports.get_responseType = get_responseType;
exports.get_response = get_response;
exports.get_responseText = get_responseText;
exports.get_responseURL = get_responseURL;
exports.get_responseXML = get_responseXML;
exports.get_status = get_status;
exports.get_statusText = get_statusText;
exports.set_timeout = set_timeout;
exports.get_timeout = get_timeout;
exports.set_withCredentials = set_withCredentials;
exports.get_withCredentials = get_withCredentials;
exports.set_onabort = set_onabort;
exports.get_onabort = get_onabort;
exports.set_onerror = set_onerror;
exports.get_onerror = get_onerror;
exports.set_onload = set_onload;
exports.get_onload = get_onload;
exports.set_onloadstart = set_onloadstart;
exports.get_onloadstart = get_onloadstart;
exports.set_onprogress = set_onprogress;
exports.get_onprogress = get_onprogress;
exports.set_ontimeout = set_ontimeout;
exports.get_ontimeout = get_ontimeout;
exports.set_onloadend = set_onloadend;
exports.get_onloadend = get_onloadend;
/* No side effect */
