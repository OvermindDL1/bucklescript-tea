// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';


function style(n) {
  return n.style;
}

function getStyle(n, key) {
  return n.style[key];
}

function setStyle(n, key, value) {
  n.style[key] = value;
  return /* () */0;
}

function setStyleProperty(n, $staropt$star, key, value) {
  var priority = $staropt$star !== undefined ? $staropt$star : false;
  var style = n.style;
  var match = style.setProperty;
  if (match !== undefined) {
    return style.setProperty(key, value, priority ? "important" : null);
  } else {
    return setStyle(n, key, value);
  }
}

function childNodes(n) {
  return n.childNodes;
}

function firstChild(n) {
  return n.firstChild;
}

function appendChild(n, child) {
  return n.appendChild(child);
}

function removeChild(n, child) {
  return n.removeChild(child);
}

function insertBefore(n, child, refNode) {
  return n.insertBefore(child, refNode);
}

function remove(n, child) {
  return n.remove(child);
}

function setAttributeNS(n, namespace, key, value) {
  return n.setAttributeNS(namespace, key, value);
}

function setAttribute(n, key, value) {
  return n.setAttribute(key, value);
}

function setAttributeNsOptional(n, namespace, key, value) {
  if (namespace === "") {
    return n.setAttribute(key, value);
  } else {
    return n.setAttributeNS(namespace, key, value);
  }
}

function removeAttributeNS(n, namespace, key) {
  return n.removeAttributeNS(namespace, key);
}

function removeAttribute(n, key) {
  return n.removeAttribute(key);
}

function removeAttributeNsOptional(n, namespace, key) {
  if (namespace === "") {
    return n.removeAttribute(key);
  } else {
    return n.removeAttributeNS(namespace, key);
  }
}

function addEventListener(n, typ, listener, options) {
  return n.addEventListener(typ, listener, options);
}

function removeEventListener(n, typ, listener, options) {
  return n.removeEventListener(typ, listener, options);
}

function focus(n) {
  return n.focus();
}

function set_nodeValue(n, text) {
  n.nodeValue = text;
  return /* () */0;
}

function get_nodeValue(n) {
  return n.nodeValue;
}

function remove_polyfill(param) {
  return (
  // remove polyfill
  (function() {
    if (!('remove' in Element.prototype)) {
      Element.prototype.remove = function() {
        if (this.parentNode) {
          this.parentNode.removeChild(this);
        }
      };
    };
  }())
  );
}

exports.style = style;
exports.getStyle = getStyle;
exports.setStyle = setStyle;
exports.setStyleProperty = setStyleProperty;
exports.childNodes = childNodes;
exports.firstChild = firstChild;
exports.appendChild = appendChild;
exports.removeChild = removeChild;
exports.insertBefore = insertBefore;
exports.remove = remove;
exports.setAttributeNS = setAttributeNS;
exports.setAttribute = setAttribute;
exports.setAttributeNsOptional = setAttributeNsOptional;
exports.removeAttributeNS = removeAttributeNS;
exports.removeAttribute = removeAttribute;
exports.removeAttributeNsOptional = removeAttributeNsOptional;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;
exports.focus = focus;
exports.set_nodeValue = set_nodeValue;
exports.get_nodeValue = get_nodeValue;
exports.remove_polyfill = remove_polyfill;
/* No side effect */
