// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Web = require("./web.js");
var List = require("bs-platform/lib/js/list.js");
var Vdom = require("./vdom.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Tea_cmd = require("./tea_cmd.js");
var Tea_sub = require("./tea_sub.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function programStateWrapper(initModel, pump, shutdown) {
  var model = /* record */[/* contents */initModel];
  var callbacks = /* record */[/* contents : record */[/* enqueue */(function (_msg) {
          console.log("INVALID enqueue CALL!");
          return /* () */0;
        })]];
  var pumperInterface = Curry._1(pump, callbacks);
  var pending = /* record */[/* contents */undefined];
  var handler = function (msg) {
    var match = pending[0];
    if (match !== undefined) {
      pending[0] = /* :: */[
        msg,
        match
      ];
      return /* () */0;
    } else {
      pending[0] = /* [] */0;
      var newModel = Curry._2(pumperInterface[/* handleMsg */2], model[0], msg);
      model[0] = newModel;
      var match$1 = pending[0];
      if (match$1 !== undefined) {
        var msgs = match$1;
        if (msgs) {
          pending[0] = undefined;
          return List.iter(handler, List.rev(msgs));
        } else {
          pending[0] = undefined;
          return /* () */0;
        }
      } else {
        throw [
              Caml_builtin_exceptions.failure,
              "INVALID message queue state, should never be None during message processing!"
            ];
      }
    }
  };
  var finalizedCBs = /* record */[/* enqueue */handler];
  callbacks[0] = finalizedCBs;
  var pi_requestShutdown = function (param) {
    callbacks[0] = /* record */[/* enqueue */(function (_msg) {
          console.log("INVALID message enqueued when shut down");
          return /* () */0;
        })];
    var cmd = Curry._1(shutdown, model[0]);
    Curry._1(pumperInterface[/* shutdown */3], cmd);
    return /* () */0;
  };
  var render_string = function (param) {
    return Curry._1(pumperInterface[/* render_string */1], model[0]);
  };
  Curry._1(pumperInterface[/* startup */0], /* () */0);
  return {
          pushMsg: handler,
          shutdown: pi_requestShutdown,
          getHtmlString: render_string
        };
}

function programLoop(update, view, subscriptions, initModel, initCmd, param) {
  if (param !== undefined) {
    var parentNode = Js_primitive.valFromOption(param);
    return (function (callbacks) {
        var priorRenderedVdom = /* record */[/* contents : [] */0];
        var latestModel = /* record */[/* contents */initModel];
        var nextFrameID = /* record */[/* contents */undefined];
        var doRender = function (_delta) {
          var match = nextFrameID[0];
          if (match !== undefined) {
            var newVdom_000 = Curry._1(view, latestModel[0]);
            var newVdom = /* :: */[
              newVdom_000,
              /* [] */0
            ];
            var justRenderedVdom = Vdom.patchVNodesIntoElement(callbacks, parentNode, priorRenderedVdom[0], newVdom);
            priorRenderedVdom[0] = justRenderedVdom;
            nextFrameID[0] = undefined;
            return /* () */0;
          } else {
            return /* () */0;
          }
        };
        var scheduleRender = function (param) {
          var match = nextFrameID[0];
          if (match !== undefined) {
            return /* () */0;
          } else {
            var id = window.requestAnimationFrame(doRender);
            nextFrameID[0] = id;
            return /* () */0;
          }
        };
        var clearPnode = function (param) {
          while(parentNode.childNodes.length > 0) {
            var match = parentNode.firstChild;
            if (match !== null) {
              parentNode.removeChild(match);
            }
            
          };
          return /* () */0;
        };
        var oldSub = /* record */[/* contents : NoSub */0];
        var handleSubscriptionChange = function (model) {
          var newSub = Curry._1(subscriptions, model);
          oldSub[0] = Tea_sub.run(callbacks, callbacks, oldSub[0], newSub);
          return /* () */0;
        };
        var handlerStartup = function (param) {
          clearPnode(/* () */0);
          Tea_cmd.run(callbacks, initCmd);
          handleSubscriptionChange(latestModel[0]);
          nextFrameID[0] = -1;
          doRender(16);
          return /* () */0;
        };
        var render_string = function (model) {
          return Vdom.renderToHtmlString(Curry._1(view, model));
        };
        var handler = function (model, msg) {
          var match = Curry._2(update, model, msg);
          var newModel = match[0];
          latestModel[0] = newModel;
          Tea_cmd.run(callbacks, match[1]);
          scheduleRender(/* () */0);
          handleSubscriptionChange(newModel);
          return newModel;
        };
        var handlerShutdown = function (cmd) {
          nextFrameID[0] = undefined;
          Tea_cmd.run(callbacks, cmd);
          oldSub[0] = Tea_sub.run(callbacks, callbacks, oldSub[0], /* NoSub */0);
          priorRenderedVdom[0] = /* [] */0;
          clearPnode(/* () */0);
          return /* () */0;
        };
        return /* record */[
                /* startup */handlerStartup,
                /* render_string */render_string,
                /* handleMsg */handler,
                /* shutdown */handlerShutdown
              ];
      });
  } else {
    return (function (callbacks) {
        var oldSub = /* record */[/* contents : NoSub */0];
        var handleSubscriptionChange = function (model) {
          var newSub = Curry._1(subscriptions, model);
          oldSub[0] = Tea_sub.run(callbacks, callbacks, oldSub[0], newSub);
          return /* () */0;
        };
        return /* record */[
                /* startup */(function (param) {
                    Tea_cmd.run(callbacks, initCmd);
                    handleSubscriptionChange(initModel);
                    return /* () */0;
                  }),
                /* render_string */(function (model) {
                    return Vdom.renderToHtmlString(Curry._1(view, model));
                  }),
                /* handleMsg */(function (model, msg) {
                    var match = Curry._2(update, model, msg);
                    var newModel = match[0];
                    Tea_cmd.run(callbacks, match[1]);
                    handleSubscriptionChange(newModel);
                    return newModel;
                  }),
                /* shutdown */(function (cmd) {
                    Tea_cmd.run(callbacks, cmd);
                    oldSub[0] = Tea_sub.run(callbacks, callbacks, oldSub[0], /* NoSub */0);
                    return /* () */0;
                  })
              ];
      });
  }
}

function program(param, pnode, flags) {
  Web.polyfills(/* () */0);
  var match = Curry._1(param[/* init */0], flags);
  var initModel = match[0];
  var opnode = (pnode == null) ? undefined : Js_primitive.some(pnode);
  var pumpInterface = programLoop(param[/* update */1], param[/* view */2], param[/* subscriptions */3], initModel, match[1], opnode);
  return programStateWrapper(initModel, pumpInterface, param[/* shutdown */4]);
}

function standardProgram(param, pnode, args) {
  return program(/* record */[
              /* init */param[/* init */0],
              /* update */param[/* update */1],
              /* view */param[/* view */2],
              /* subscriptions */param[/* subscriptions */3],
              /* shutdown */(function (_model) {
                  return /* NoCmd */0;
                })
            ], pnode, args);
}

function beginnerProgram(param, pnode, param$1) {
  var update = param[/* update */1];
  var model = param[/* model */0];
  return standardProgram(/* record */[
              /* init */(function (param) {
                  return /* tuple */[
                          model,
                          /* NoCmd */0
                        ];
                }),
              /* update */(function (model, msg) {
                  return /* tuple */[
                          Curry._2(update, model, msg),
                          /* NoCmd */0
                        ];
                }),
              /* view */param[/* view */2],
              /* subscriptions */(function (_model) {
                  return /* NoSub */0;
                })
            ], pnode, /* () */0);
}

var map = Vdom.map;

exports.programStateWrapper = programStateWrapper;
exports.programLoop = programLoop;
exports.program = program;
exports.standardProgram = standardProgram;
exports.beginnerProgram = beginnerProgram;
exports.map = map;
/* No side effect */
