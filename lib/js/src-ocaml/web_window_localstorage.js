// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("bs-platform/lib/js/caml_option.js");

function localStorage($$window) {
  try {
    return Caml_option.undefined_to_opt($$window.localStorage);
  }
  catch (exn){
    return ;
  }
}

function length($$window) {
  var localStorage$1 = localStorage($$window);
  if (localStorage$1 !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(localStorage$1).length);
  }
  
}

function clear($$window) {
  var localStorage$1 = localStorage($$window);
  if (localStorage$1 !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(localStorage$1).clear());
  }
  
}

function key($$window, idx) {
  var localStorage$1 = localStorage($$window);
  if (localStorage$1 !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(localStorage$1).key(idx));
  }
  
}

function getItem($$window, key) {
  var localStorage$1 = localStorage($$window);
  if (localStorage$1 === undefined) {
    return ;
  }
  try {
    return Caml_option.some(Caml_option.valFromOption(localStorage$1).getItem(key));
  }
  catch (exn){
    return ;
  }
}

function removeItem($$window, key) {
  var localStorage$1 = localStorage($$window);
  if (localStorage$1 !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(localStorage$1).removeItem(key));
  }
  
}

function setItem($$window, key, value) {
  var localStorage$1 = localStorage($$window);
  if (localStorage$1 !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(localStorage$1).setItem(key, value));
  }
  
}

exports.localStorage = localStorage;
exports.length = length;
exports.clear = clear;
exports.key = key;
exports.getItem = getItem;
exports.removeItem = removeItem;
exports.setItem = setItem;
/* No side effect */
