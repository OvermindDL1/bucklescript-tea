// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Web_json = require("./web_json.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Tea_result = require("./tea_result.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function height(param) {
  if (param) {
    return param[/* h */4];
  } else {
    return 0;
  }
}

function create(l, x, d, r) {
  var hl = height(l);
  var hr = height(r);
  return /* Node */[
          /* l */l,
          /* v */x,
          /* d */d,
          /* r */r,
          /* h */hl >= hr ? hl + 1 | 0 : hr + 1 | 0
        ];
}

function singleton(x, d) {
  return /* Node */[
          /* l : Empty */0,
          /* v */x,
          /* d */d,
          /* r : Empty */0,
          /* h */1
        ];
}

function bal(l, x, d, r) {
  var hl = l ? l[/* h */4] : 0;
  var hr = r ? r[/* h */4] : 0;
  if (hl > (hr + 2 | 0)) {
    if (l) {
      var lr = l[/* r */3];
      var ld = l[/* d */2];
      var lv = l[/* v */1];
      var ll = l[/* l */0];
      if (height(ll) >= height(lr)) {
        return create(ll, lv, ld, create(lr, x, d, r));
      }
      if (lr) {
        return create(create(ll, lv, ld, lr[/* l */0]), lr[/* v */1], lr[/* d */2], create(lr[/* r */3], x, d, r));
      }
      throw [
            Caml_builtin_exceptions.invalid_argument,
            "Map.bal"
          ];
    }
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Map.bal"
        ];
  }
  if (hr <= (hl + 2 | 0)) {
    return /* Node */[
            /* l */l,
            /* v */x,
            /* d */d,
            /* r */r,
            /* h */hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          ];
  }
  if (r) {
    var rr = r[/* r */3];
    var rd = r[/* d */2];
    var rv = r[/* v */1];
    var rl = r[/* l */0];
    if (height(rr) >= height(rl)) {
      return create(create(l, x, d, rl), rv, rd, rr);
    }
    if (rl) {
      return create(create(l, x, d, rl[/* l */0]), rl[/* v */1], rl[/* d */2], create(rl[/* r */3], rv, rd, rr));
    }
    throw [
          Caml_builtin_exceptions.invalid_argument,
          "Map.bal"
        ];
  }
  throw [
        Caml_builtin_exceptions.invalid_argument,
        "Map.bal"
      ];
}

function is_empty(param) {
  if (param) {
    return false;
  } else {
    return true;
  }
}

function add(x, data, m) {
  if (!m) {
    return /* Node */[
            /* l : Empty */0,
            /* v */x,
            /* d */data,
            /* r : Empty */0,
            /* h */1
          ];
  }
  var r = m[/* r */3];
  var d = m[/* d */2];
  var v = m[/* v */1];
  var l = m[/* l */0];
  var c = Caml_primitive.caml_string_compare(x, v);
  if (c === 0) {
    if (d === data) {
      return m;
    } else {
      return /* Node */[
              /* l */l,
              /* v */x,
              /* d */data,
              /* r */r,
              /* h */m[/* h */4]
            ];
    }
  }
  if (c < 0) {
    var ll = add(x, data, l);
    if (l === ll) {
      return m;
    } else {
      return bal(ll, v, d, r);
    }
  }
  var rr = add(x, data, r);
  if (r === rr) {
    return m;
  } else {
    return bal(l, v, d, rr);
  }
}

function find(x, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var c = Caml_primitive.caml_string_compare(x, param[/* v */1]);
      if (c === 0) {
        return param[/* d */2];
      }
      _param = c < 0 ? param[/* l */0] : param[/* r */3];
      continue ;
    }
    throw Caml_builtin_exceptions.not_found;
  };
}

function find_first(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var v = param[/* v */1];
      if (Curry._1(f, v)) {
        var _v0 = v;
        var _d0 = param[/* d */2];
        var _param$1 = param[/* l */0];
        while(true) {
          var param$1 = _param$1;
          var d0 = _d0;
          var v0 = _v0;
          if (!param$1) {
            return /* tuple */[
                    v0,
                    d0
                  ];
          }
          var v$1 = param$1[/* v */1];
          if (Curry._1(f, v$1)) {
            _param$1 = param$1[/* l */0];
            _d0 = param$1[/* d */2];
            _v0 = v$1;
            continue ;
          }
          _param$1 = param$1[/* r */3];
          continue ;
        };
      }
      _param = param[/* r */3];
      continue ;
    }
    throw Caml_builtin_exceptions.not_found;
  };
}

function find_first_opt(f, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    var v = param[/* v */1];
    if (Curry._1(f, v)) {
      var _v0 = v;
      var _d0 = param[/* d */2];
      var _param$1 = param[/* l */0];
      while(true) {
        var param$1 = _param$1;
        var d0 = _d0;
        var v0 = _v0;
        if (!param$1) {
          return /* tuple */[
                  v0,
                  d0
                ];
        }
        var v$1 = param$1[/* v */1];
        if (Curry._1(f, v$1)) {
          _param$1 = param$1[/* l */0];
          _d0 = param$1[/* d */2];
          _v0 = v$1;
          continue ;
        }
        _param$1 = param$1[/* r */3];
        continue ;
      };
    }
    _param = param[/* r */3];
    continue ;
  };
}

function find_last(f, _param) {
  while(true) {
    var param = _param;
    if (param) {
      var v = param[/* v */1];
      if (Curry._1(f, v)) {
        var _v0 = v;
        var _d0 = param[/* d */2];
        var _param$1 = param[/* r */3];
        while(true) {
          var param$1 = _param$1;
          var d0 = _d0;
          var v0 = _v0;
          if (!param$1) {
            return /* tuple */[
                    v0,
                    d0
                  ];
          }
          var v$1 = param$1[/* v */1];
          if (Curry._1(f, v$1)) {
            _param$1 = param$1[/* r */3];
            _d0 = param$1[/* d */2];
            _v0 = v$1;
            continue ;
          }
          _param$1 = param$1[/* l */0];
          continue ;
        };
      }
      _param = param[/* l */0];
      continue ;
    }
    throw Caml_builtin_exceptions.not_found;
  };
}

function find_last_opt(f, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    var v = param[/* v */1];
    if (Curry._1(f, v)) {
      var _v0 = v;
      var _d0 = param[/* d */2];
      var _param$1 = param[/* r */3];
      while(true) {
        var param$1 = _param$1;
        var d0 = _d0;
        var v0 = _v0;
        if (!param$1) {
          return /* tuple */[
                  v0,
                  d0
                ];
        }
        var v$1 = param$1[/* v */1];
        if (Curry._1(f, v$1)) {
          _param$1 = param$1[/* r */3];
          _d0 = param$1[/* d */2];
          _v0 = v$1;
          continue ;
        }
        _param$1 = param$1[/* l */0];
        continue ;
      };
    }
    _param = param[/* l */0];
    continue ;
  };
}

function find_opt(x, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    var c = Caml_primitive.caml_string_compare(x, param[/* v */1]);
    if (c === 0) {
      return Caml_option.some(param[/* d */2]);
    }
    _param = c < 0 ? param[/* l */0] : param[/* r */3];
    continue ;
  };
}

function mem(x, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return false;
    }
    var c = Caml_primitive.caml_string_compare(x, param[/* v */1]);
    if (c === 0) {
      return true;
    }
    _param = c < 0 ? param[/* l */0] : param[/* r */3];
    continue ;
  };
}

function min_binding(_param) {
  while(true) {
    var param = _param;
    if (param) {
      var l = param[/* l */0];
      if (!l) {
        return /* tuple */[
                param[/* v */1],
                param[/* d */2]
              ];
      }
      _param = l;
      continue ;
    }
    throw Caml_builtin_exceptions.not_found;
  };
}

function min_binding_opt(_param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    var l = param[/* l */0];
    if (!l) {
      return /* tuple */[
              param[/* v */1],
              param[/* d */2]
            ];
    }
    _param = l;
    continue ;
  };
}

function max_binding(_param) {
  while(true) {
    var param = _param;
    if (param) {
      var r = param[/* r */3];
      if (!r) {
        return /* tuple */[
                param[/* v */1],
                param[/* d */2]
              ];
      }
      _param = r;
      continue ;
    }
    throw Caml_builtin_exceptions.not_found;
  };
}

function max_binding_opt(_param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    var r = param[/* r */3];
    if (!r) {
      return /* tuple */[
              param[/* v */1],
              param[/* d */2]
            ];
    }
    _param = r;
    continue ;
  };
}

function remove_min_binding(param) {
  if (param) {
    var l = param[/* l */0];
    if (l) {
      return bal(remove_min_binding(l), param[/* v */1], param[/* d */2], param[/* r */3]);
    } else {
      return param[/* r */3];
    }
  }
  throw [
        Caml_builtin_exceptions.invalid_argument,
        "Map.remove_min_elt"
      ];
}

function merge(t1, t2) {
  if (!t1) {
    return t2;
  }
  if (!t2) {
    return t1;
  }
  var match = min_binding(t2);
  return bal(t1, match[0], match[1], remove_min_binding(t2));
}

function remove(x, m) {
  if (!m) {
    return /* Empty */0;
  }
  var r = m[/* r */3];
  var d = m[/* d */2];
  var v = m[/* v */1];
  var l = m[/* l */0];
  var c = Caml_primitive.caml_string_compare(x, v);
  if (c === 0) {
    return merge(l, r);
  }
  if (c < 0) {
    var ll = remove(x, l);
    if (l === ll) {
      return m;
    } else {
      return bal(ll, v, d, r);
    }
  }
  var rr = remove(x, r);
  if (r === rr) {
    return m;
  } else {
    return bal(l, v, d, rr);
  }
}

function update(x, f, m) {
  if (m) {
    var r = m[/* r */3];
    var d = m[/* d */2];
    var v = m[/* v */1];
    var l = m[/* l */0];
    var c = Caml_primitive.caml_string_compare(x, v);
    if (c === 0) {
      var data = Curry._1(f, Caml_option.some(d));
      if (data === undefined) {
        return merge(l, r);
      }
      var data$1 = Caml_option.valFromOption(data);
      if (d === data$1) {
        return m;
      } else {
        return /* Node */[
                /* l */l,
                /* v */x,
                /* d */data$1,
                /* r */r,
                /* h */m[/* h */4]
              ];
      }
    }
    if (c < 0) {
      var ll = update(x, f, l);
      if (l === ll) {
        return m;
      } else {
        return bal(ll, v, d, r);
      }
    }
    var rr = update(x, f, r);
    if (r === rr) {
      return m;
    } else {
      return bal(l, v, d, rr);
    }
  }
  var data$2 = Curry._1(f, undefined);
  if (data$2 !== undefined) {
    return /* Node */[
            /* l : Empty */0,
            /* v */x,
            /* d */Caml_option.valFromOption(data$2),
            /* r : Empty */0,
            /* h */1
          ];
  } else {
    return /* Empty */0;
  }
}

function iter(f, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return ;
    }
    iter(f, param[/* l */0]);
    Curry._2(f, param[/* v */1], param[/* d */2]);
    _param = param[/* r */3];
    continue ;
  };
}

function map(f, param) {
  if (!param) {
    return /* Empty */0;
  }
  var l$prime = map(f, param[/* l */0]);
  var d$prime = Curry._1(f, param[/* d */2]);
  var r$prime = map(f, param[/* r */3]);
  return /* Node */[
          /* l */l$prime,
          /* v */param[/* v */1],
          /* d */d$prime,
          /* r */r$prime,
          /* h */param[/* h */4]
        ];
}

function mapi(f, param) {
  if (!param) {
    return /* Empty */0;
  }
  var v = param[/* v */1];
  var l$prime = mapi(f, param[/* l */0]);
  var d$prime = Curry._2(f, v, param[/* d */2]);
  var r$prime = mapi(f, param[/* r */3]);
  return /* Node */[
          /* l */l$prime,
          /* v */v,
          /* d */d$prime,
          /* r */r$prime,
          /* h */param[/* h */4]
        ];
}

function fold(f, _m, _accu) {
  while(true) {
    var accu = _accu;
    var m = _m;
    if (!m) {
      return accu;
    }
    _accu = Curry._3(f, m[/* v */1], m[/* d */2], fold(f, m[/* l */0], accu));
    _m = m[/* r */3];
    continue ;
  };
}

function for_all(p, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return true;
    }
    if (!Curry._2(p, param[/* v */1], param[/* d */2])) {
      return false;
    }
    if (!for_all(p, param[/* l */0])) {
      return false;
    }
    _param = param[/* r */3];
    continue ;
  };
}

function exists(p, _param) {
  while(true) {
    var param = _param;
    if (!param) {
      return false;
    }
    if (Curry._2(p, param[/* v */1], param[/* d */2])) {
      return true;
    }
    if (exists(p, param[/* l */0])) {
      return true;
    }
    _param = param[/* r */3];
    continue ;
  };
}

function add_min_binding(k, x, param) {
  if (param) {
    return bal(add_min_binding(k, x, param[/* l */0]), param[/* v */1], param[/* d */2], param[/* r */3]);
  } else {
    return singleton(k, x);
  }
}

function add_max_binding(k, x, param) {
  if (param) {
    return bal(param[/* l */0], param[/* v */1], param[/* d */2], add_max_binding(k, x, param[/* r */3]));
  } else {
    return singleton(k, x);
  }
}

function join(l, v, d, r) {
  if (!l) {
    return add_min_binding(v, d, r);
  }
  if (!r) {
    return add_max_binding(v, d, l);
  }
  var rh = r[/* h */4];
  var lh = l[/* h */4];
  if (lh > (rh + 2 | 0)) {
    return bal(l[/* l */0], l[/* v */1], l[/* d */2], join(l[/* r */3], v, d, r));
  } else if (rh > (lh + 2 | 0)) {
    return bal(join(l, v, d, r[/* l */0]), r[/* v */1], r[/* d */2], r[/* r */3]);
  } else {
    return create(l, v, d, r);
  }
}

function concat(t1, t2) {
  if (!t1) {
    return t2;
  }
  if (!t2) {
    return t1;
  }
  var match = min_binding(t2);
  return join(t1, match[0], match[1], remove_min_binding(t2));
}

function concat_or_join(t1, v, d, t2) {
  if (d !== undefined) {
    return join(t1, v, Caml_option.valFromOption(d), t2);
  } else {
    return concat(t1, t2);
  }
}

function split(x, param) {
  if (!param) {
    return /* tuple */[
            /* Empty */0,
            undefined,
            /* Empty */0
          ];
  }
  var r = param[/* r */3];
  var d = param[/* d */2];
  var v = param[/* v */1];
  var l = param[/* l */0];
  var c = Caml_primitive.caml_string_compare(x, v);
  if (c === 0) {
    return /* tuple */[
            l,
            Caml_option.some(d),
            r
          ];
  }
  if (c < 0) {
    var match = split(x, l);
    return /* tuple */[
            match[0],
            match[1],
            join(match[2], v, d, r)
          ];
  }
  var match$1 = split(x, r);
  return /* tuple */[
          join(l, v, d, match$1[0]),
          match$1[1],
          match$1[2]
        ];
}

function merge$1(f, s1, s2) {
  if (s1) {
    var v1 = s1[/* v */1];
    if (s1[/* h */4] >= height(s2)) {
      var match = split(v1, s2);
      return concat_or_join(merge$1(f, s1[/* l */0], match[0]), v1, Curry._3(f, v1, Caml_option.some(s1[/* d */2]), match[1]), merge$1(f, s1[/* r */3], match[2]));
    }
    
  } else if (!s2) {
    return /* Empty */0;
  }
  if (s2) {
    var v2 = s2[/* v */1];
    var match$1 = split(v2, s1);
    return concat_or_join(merge$1(f, match$1[0], s2[/* l */0]), v2, Curry._3(f, v2, match$1[1], Caml_option.some(s2[/* d */2])), merge$1(f, match$1[2], s2[/* r */3]));
  }
  throw [
        Caml_builtin_exceptions.assert_failure,
        /* tuple */[
          "map.ml",
          393,
          10
        ]
      ];
}

function union(f, s1, s2) {
  if (!s1) {
    return s2;
  }
  if (!s2) {
    return s1;
  }
  var d2 = s2[/* d */2];
  var v2 = s2[/* v */1];
  var d1 = s1[/* d */2];
  var v1 = s1[/* v */1];
  if (s1[/* h */4] >= s2[/* h */4]) {
    var match = split(v1, s2);
    var d2$1 = match[1];
    var l = union(f, s1[/* l */0], match[0]);
    var r = union(f, s1[/* r */3], match[2]);
    if (d2$1 !== undefined) {
      return concat_or_join(l, v1, Curry._3(f, v1, d1, Caml_option.valFromOption(d2$1)), r);
    } else {
      return join(l, v1, d1, r);
    }
  }
  var match$1 = split(v2, s1);
  var d1$1 = match$1[1];
  var l$1 = union(f, match$1[0], s2[/* l */0]);
  var r$1 = union(f, match$1[2], s2[/* r */3]);
  if (d1$1 !== undefined) {
    return concat_or_join(l$1, v2, Curry._3(f, v2, Caml_option.valFromOption(d1$1), d2), r$1);
  } else {
    return join(l$1, v2, d2, r$1);
  }
}

function filter(p, m) {
  if (!m) {
    return /* Empty */0;
  }
  var r = m[/* r */3];
  var d = m[/* d */2];
  var v = m[/* v */1];
  var l = m[/* l */0];
  var l$prime = filter(p, l);
  var pvd = Curry._2(p, v, d);
  var r$prime = filter(p, r);
  if (pvd) {
    if (l === l$prime && r === r$prime) {
      return m;
    } else {
      return join(l$prime, v, d, r$prime);
    }
  } else {
    return concat(l$prime, r$prime);
  }
}

function partition(p, param) {
  if (!param) {
    return /* tuple */[
            /* Empty */0,
            /* Empty */0
          ];
  }
  var d = param[/* d */2];
  var v = param[/* v */1];
  var match = partition(p, param[/* l */0]);
  var lf = match[1];
  var lt = match[0];
  var pvd = Curry._2(p, v, d);
  var match$1 = partition(p, param[/* r */3]);
  var rf = match$1[1];
  var rt = match$1[0];
  if (pvd) {
    return /* tuple */[
            join(lt, v, d, rt),
            concat(lf, rf)
          ];
  } else {
    return /* tuple */[
            concat(lt, rt),
            join(lf, v, d, rf)
          ];
  }
}

function cons_enum(_m, _e) {
  while(true) {
    var e = _e;
    var m = _m;
    if (!m) {
      return e;
    }
    _e = /* More */[
      m[/* v */1],
      m[/* d */2],
      m[/* r */3],
      e
    ];
    _m = m[/* l */0];
    continue ;
  };
}

function compare(cmp, m1, m2) {
  var _e1 = cons_enum(m1, /* End */0);
  var _e2 = cons_enum(m2, /* End */0);
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (!e1) {
      if (e2) {
        return -1;
      } else {
        return 0;
      }
    }
    if (!e2) {
      return 1;
    }
    var c = Caml_primitive.caml_string_compare(e1[0], e2[0]);
    if (c !== 0) {
      return c;
    }
    var c$1 = Curry._2(cmp, e1[1], e2[1]);
    if (c$1 !== 0) {
      return c$1;
    }
    _e2 = cons_enum(e2[2], e2[3]);
    _e1 = cons_enum(e1[2], e1[3]);
    continue ;
  };
}

function equal(cmp, m1, m2) {
  var _e1 = cons_enum(m1, /* End */0);
  var _e2 = cons_enum(m2, /* End */0);
  while(true) {
    var e2 = _e2;
    var e1 = _e1;
    if (!e1) {
      if (e2) {
        return false;
      } else {
        return true;
      }
    }
    if (!e2) {
      return false;
    }
    if (Caml_primitive.caml_string_compare(e1[0], e2[0]) !== 0) {
      return false;
    }
    if (!Curry._2(cmp, e1[1], e2[1])) {
      return false;
    }
    _e2 = cons_enum(e2[2], e2[3]);
    _e1 = cons_enum(e1[2], e1[3]);
    continue ;
  };
}

function cardinal(param) {
  if (param) {
    return (cardinal(param[/* l */0]) + 1 | 0) + cardinal(param[/* r */3]) | 0;
  } else {
    return 0;
  }
}

function bindings_aux(_accu, _param) {
  while(true) {
    var param = _param;
    var accu = _accu;
    if (!param) {
      return accu;
    }
    _param = param[/* l */0];
    _accu = /* :: */[
      /* tuple */[
        param[/* v */1],
        param[/* d */2]
      ],
      bindings_aux(accu, param[/* r */3])
    ];
    continue ;
  };
}

function bindings(s) {
  return bindings_aux(/* [] */0, s);
}

var ObjectDict = {
  empty: /* Empty */0,
  is_empty: is_empty,
  mem: mem,
  add: add,
  update: update,
  singleton: singleton,
  remove: remove,
  merge: merge$1,
  union: union,
  compare: compare,
  equal: equal,
  iter: iter,
  fold: fold,
  for_all: for_all,
  exists: exists,
  filter: filter,
  partition: partition,
  cardinal: cardinal,
  bindings: bindings,
  min_binding: min_binding,
  min_binding_opt: min_binding_opt,
  max_binding: max_binding,
  max_binding_opt: max_binding_opt,
  choose: min_binding,
  choose_opt: min_binding_opt,
  split: split,
  find: find,
  find_opt: find_opt,
  find_first: find_first,
  find_first_opt: find_first_opt,
  find_last: find_last,
  find_last_opt: find_last_opt,
  map: map,
  mapi: mapi
};

var ParseFail = Caml_exceptions.create("Tea_json.Decoder.ParseFail");

var string = /* Decoder */[(function (value) {
      var s = Web_json.classify(value);
      if (typeof s === "number" || s.tag) {
        return /* Error */Block.__(1, ["Non-string value"]);
      } else {
        return /* Ok */Block.__(0, [s[0]]);
      }
    })];

var $$int = /* Decoder */[(function (value) {
      var n = Web_json.classify(value);
      if (typeof n === "number") {
        return /* Error */Block.__(1, ["Non-int value"]);
      }
      if (n.tag !== /* JSONNumber */1) {
        return /* Error */Block.__(1, ["Non-int value"]);
      }
      var n$1 = n[0];
      if (n$1 > Pervasives.min_int && n$1 < Pervasives.max_int) {
        return /* Ok */Block.__(0, [n$1 | 0]);
      } else {
        return /* Error */Block.__(1, ["number out of int range"]);
      }
    })];

var $$float = /* Decoder */[(function (value) {
      var n = Web_json.classify(value);
      if (typeof n === "number" || n.tag !== /* JSONNumber */1) {
        return /* Error */Block.__(1, ["Non-float-value"]);
      } else {
        return /* Ok */Block.__(0, [n[0]]);
      }
    })];

var bool = /* Decoder */[(function (value) {
      var match = Web_json.classify(value);
      if (typeof match !== "number") {
        return /* Error */Block.__(1, ["Non-boolean value"]);
      }
      switch (match) {
        case /* JSONFalse */0 :
            return /* Ok */Block.__(0, [false]);
        case /* JSONTrue */1 :
            return /* Ok */Block.__(0, [true]);
        case /* JSONNull */2 :
            return /* Error */Block.__(1, ["Non-boolean value"]);
        
      }
    })];

function $$null(v) {
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number" && match >= 2) {
                return /* Ok */Block.__(0, [v]);
              } else {
                return /* Error */Block.__(1, ["Non-null value"]);
              }
            })];
}

function list(decoder) {
  var decoder$1 = decoder[0];
  return /* Decoder */[(function (value) {
              var a = Web_json.classify(value);
              if (typeof a === "number") {
                return /* Error */Block.__(1, ["Non-list value"]);
              }
              if (a.tag !== /* JSONArray */3) {
                return /* Error */Block.__(1, ["Non-list value"]);
              }
              var parse = function (v) {
                var r = Curry._1(decoder$1, v);
                if (!r.tag) {
                  return r[0];
                }
                throw [
                      ParseFail,
                      r[0]
                    ];
              };
              try {
                return /* Ok */Block.__(0, [List.map(parse, $$Array.to_list(a[0]))]);
              }
              catch (raw_e){
                var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                if (e[0] === ParseFail) {
                  return /* Error */Block.__(1, ["list -> " + e[1]]);
                }
                throw e;
              }
            })];
}

function array(decoder) {
  var decoder$1 = decoder[0];
  return /* Decoder */[(function (value) {
              var a = Web_json.classify(value);
              if (typeof a === "number") {
                return /* Error */Block.__(1, ["Non-array value"]);
              }
              if (a.tag !== /* JSONArray */3) {
                return /* Error */Block.__(1, ["Non-array value"]);
              }
              var parse = function (v) {
                var r = Curry._1(decoder$1, v);
                if (!r.tag) {
                  return r[0];
                }
                throw [
                      ParseFail,
                      r[0]
                    ];
              };
              try {
                return /* Ok */Block.__(0, [$$Array.map(parse, a[0])]);
              }
              catch (raw_e){
                var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                if (e[0] === ParseFail) {
                  return /* Error */Block.__(1, ["array -> " + e[1]]);
                }
                throw e;
              }
            })];
}

function keyValuePairs(decoder) {
  var decoder$1 = decoder[0];
  return /* Decoder */[(function (value) {
              var o = Web_json.classify(value);
              if (typeof o === "number") {
                return /* Error */Block.__(1, ["Non-keyValuePair value"]);
              }
              if (o.tag !== /* JSONObject */2) {
                return /* Error */Block.__(1, ["Non-keyValuePair value"]);
              }
              var o$1 = o[0];
              var keys = Object.keys(o$1);
              var parse = function (k, l) {
                var v = Js_dict.get(o$1, k);
                if (v !== undefined) {
                  var r = Curry._1(decoder$1, Caml_option.valFromOption(v));
                  if (!r.tag) {
                    return /* :: */[
                            /* tuple */[
                              k,
                              r[0]
                            ],
                            l
                          ];
                  }
                  throw [
                        ParseFail,
                        r[0]
                      ];
                }
                throw [
                      ParseFail,
                      "Key is undefined: " + k
                    ];
              };
              try {
                return /* Ok */Block.__(0, [$$Array.fold_right(parse, keys, /* [] */0)]);
              }
              catch (raw_e){
                var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                if (e[0] === ParseFail) {
                  return /* Error */Block.__(1, ["Invalid keyValuePair parsing: " + e[1]]);
                }
                throw e;
              }
            })];
}

function dict(decoder) {
  var decoder$1 = decoder[0];
  return /* Decoder */[(function (value) {
              var o = Web_json.classify(value);
              if (typeof o === "number") {
                return /* Error */Block.__(1, ["Non-dict value"]);
              }
              if (o.tag !== /* JSONObject */2) {
                return /* Error */Block.__(1, ["Non-dict value"]);
              }
              var o$1 = o[0];
              var keys = Object.keys(o$1);
              var parse = function (k, d) {
                var v = Js_dict.get(o$1, k);
                if (v !== undefined) {
                  var r = Curry._1(decoder$1, Caml_option.valFromOption(v));
                  if (!r.tag) {
                    return add(k, r[0], d);
                  }
                  throw [
                        ParseFail,
                        r[0]
                      ];
                }
                throw [
                      ParseFail,
                      "Key is undefined: " + k
                    ];
              };
              try {
                return /* Ok */Block.__(0, [$$Array.fold_right(parse, keys, /* Empty */0)]);
              }
              catch (raw_e){
                var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                if (e[0] === ParseFail) {
                  return /* Error */Block.__(1, ["Invalid dict parsing: " + e[1]]);
                }
                throw e;
              }
            })];
}

function field(key, decoder) {
  var decoder$1 = decoder[0];
  return /* Decoder */[(function (value) {
              var o = Web_json.classify(value);
              if (typeof o === "number") {
                return /* Error */Block.__(1, ["Non-fieldable value"]);
              }
              if (o.tag !== /* JSONObject */2) {
                return /* Error */Block.__(1, ["Non-fieldable value"]);
              }
              var v = Js_dict.get(o[0], key);
              if (v === undefined) {
                return /* Error */Block.__(1, ["Field Value is undefined: " + key]);
              }
              var o$1 = Curry._1(decoder$1, Caml_option.valFromOption(v));
              if (o$1.tag) {
                return /* Error */Block.__(1, ["field `" + (key + ("` -> " + o$1[0]))]);
              } else {
                return o$1;
              }
            })];
}

function at(fields, dec) {
  return List.fold_right(field, fields, dec);
}

function index(idx, decoder) {
  var decoder$1 = decoder[0];
  return /* Decoder */[(function (value) {
              var a = Web_json.classify(value);
              if (typeof a === "number") {
                return /* Error */Block.__(1, ["Non-array value"]);
              }
              if (a.tag !== /* JSONArray */3) {
                return /* Error */Block.__(1, ["Non-array value"]);
              }
              var a$1 = a[0];
              if (idx < 0 || idx > a$1.length) {
                return /* Error */Block.__(1, ["Array index out of range: " + String(idx)]);
              } else {
                return Curry._1(decoder$1, Caml_array.caml_array_get(a$1, idx));
              }
            })];
}

function maybe(decoder) {
  var decoder$1 = decoder[0];
  return /* Decoder */[(function (value) {
              var r = Curry._1(decoder$1, value);
              if (r.tag) {
                return /* Ok */Block.__(0, [undefined]);
              } else {
                return /* Ok */Block.__(0, [Caml_option.some(r[0])]);
              }
            })];
}

function oneOf(decoders) {
  return /* Decoder */[(function (value) {
              var parse = function (v, _param) {
                while(true) {
                  var param = _param;
                  if (!param) {
                    return /* Error */Block.__(1, ["No one-of's matched"]);
                  }
                  var rest = param[1];
                  try {
                    var ok = Curry._1(param[0][0], v);
                    if (ok.tag) {
                      return parse(v, rest);
                    } else {
                      return ok;
                    }
                  }
                  catch (exn){
                    _param = rest;
                    continue ;
                  }
                };
              };
              return parse(value, decoders);
            })];
}

function map$1(mapper, decoder1) {
  var decoder1$1 = decoder1[0];
  return /* Decoder */[(function (value) {
              var v1 = Curry._1(decoder1$1, value);
              if (v1.tag) {
                return /* Error */Block.__(1, ["map " + v1[0]]);
              } else {
                return /* Ok */Block.__(0, [Curry._1(mapper, v1[0])]);
              }
            })];
}

function map2(mapper, decoder1, decoder2) {
  var decoder2$1 = decoder2[0];
  var decoder1$1 = decoder1[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1$1, value);
              var match$1 = Curry._1(decoder2$1, value);
              if (!match.tag && !match$1.tag) {
                return /* Ok */Block.__(0, [Curry._2(mapper, match[0], match$1[0])]);
              }
              var e = Tea_result.error_of_first(match, match$1);
              if (e !== undefined) {
                return /* Error */Block.__(1, ["map2 -> " + e]);
              }
              throw [
                    Caml_builtin_exceptions.failure,
                    "Impossible case"
                  ];
            })];
}

function map3(mapper, decoder1, decoder2, decoder3) {
  var decoder3$1 = decoder3[0];
  var decoder2$1 = decoder2[0];
  var decoder1$1 = decoder1[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1$1, value);
              var match$1 = Curry._1(decoder2$1, value);
              var match$2 = Curry._1(decoder3$1, value);
              if (!match.tag && !match$1.tag && !match$2.tag) {
                return /* Ok */Block.__(0, [Curry._3(mapper, match[0], match$1[0], match$2[0])]);
              }
              var e = Tea_result.first(match$2, Tea_result.first(match$1, match));
              if (e.tag) {
                return /* Error */Block.__(1, ["map3 -> " + e[0]]);
              }
              throw [
                    Caml_builtin_exceptions.failure,
                    "Impossible case"
                  ];
            })];
}

function map4(mapper, decoder1, decoder2, decoder3, decoder4) {
  var decoder4$1 = decoder4[0];
  var decoder3$1 = decoder3[0];
  var decoder2$1 = decoder2[0];
  var decoder1$1 = decoder1[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1$1, value);
              var match$1 = Curry._1(decoder2$1, value);
              var match$2 = Curry._1(decoder3$1, value);
              var match$3 = Curry._1(decoder4$1, value);
              if (!match.tag && !match$1.tag && !match$2.tag && !match$3.tag) {
                return /* Ok */Block.__(0, [Curry._4(mapper, match[0], match$1[0], match$2[0], match$3[0])]);
              }
              var e = Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match)));
              if (e.tag) {
                return /* Error */Block.__(1, ["map4 -> " + e[0]]);
              }
              throw [
                    Caml_builtin_exceptions.failure,
                    "Impossible case"
                  ];
            })];
}

function map5(mapper, decoder1, decoder2, decoder3, decoder4, decoder5) {
  var decoder5$1 = decoder5[0];
  var decoder4$1 = decoder4[0];
  var decoder3$1 = decoder3[0];
  var decoder2$1 = decoder2[0];
  var decoder1$1 = decoder1[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1$1, value);
              var match$1 = Curry._1(decoder2$1, value);
              var match$2 = Curry._1(decoder3$1, value);
              var match$3 = Curry._1(decoder4$1, value);
              var match$4 = Curry._1(decoder5$1, value);
              if (!match.tag && !match$1.tag && !match$2.tag && !match$3.tag && !match$4.tag) {
                return /* Ok */Block.__(0, [Curry._5(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0])]);
              }
              var e = Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match))));
              if (e.tag) {
                return /* Error */Block.__(1, ["map5 -> " + e[0]]);
              }
              throw [
                    Caml_builtin_exceptions.failure,
                    "Impossible case"
                  ];
            })];
}

function map6(mapper, decoder1, decoder2, decoder3, decoder4, decoder5, decoder6) {
  var decoder6$1 = decoder6[0];
  var decoder5$1 = decoder5[0];
  var decoder4$1 = decoder4[0];
  var decoder3$1 = decoder3[0];
  var decoder2$1 = decoder2[0];
  var decoder1$1 = decoder1[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1$1, value);
              var match$1 = Curry._1(decoder2$1, value);
              var match$2 = Curry._1(decoder3$1, value);
              var match$3 = Curry._1(decoder4$1, value);
              var match$4 = Curry._1(decoder5$1, value);
              var match$5 = Curry._1(decoder6$1, value);
              if (!match.tag && !match$1.tag && !match$2.tag && !match$3.tag && !match$4.tag && !match$5.tag) {
                return /* Ok */Block.__(0, [Curry._6(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0])]);
              }
              var e = Tea_result.first(match$5, Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match)))));
              if (e.tag) {
                return /* Error */Block.__(1, ["map6 -> " + e[0]]);
              }
              throw [
                    Caml_builtin_exceptions.failure,
                    "Impossible case"
                  ];
            })];
}

function map7(mapper, decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7) {
  var decoder7$1 = decoder7[0];
  var decoder6$1 = decoder6[0];
  var decoder5$1 = decoder5[0];
  var decoder4$1 = decoder4[0];
  var decoder3$1 = decoder3[0];
  var decoder2$1 = decoder2[0];
  var decoder1$1 = decoder1[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1$1, value);
              var match$1 = Curry._1(decoder2$1, value);
              var match$2 = Curry._1(decoder3$1, value);
              var match$3 = Curry._1(decoder4$1, value);
              var match$4 = Curry._1(decoder5$1, value);
              var match$5 = Curry._1(decoder6$1, value);
              var match$6 = Curry._1(decoder7$1, value);
              if (!match.tag && !match$1.tag && !match$2.tag && !match$3.tag && !match$4.tag && !match$5.tag && !match$6.tag) {
                return /* Ok */Block.__(0, [Curry._7(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0], match$6[0])]);
              }
              var e = Tea_result.first(match$6, Tea_result.first(match$5, Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match))))));
              if (e.tag) {
                return /* Error */Block.__(1, ["map7 -> " + e[0]]);
              }
              throw [
                    Caml_builtin_exceptions.failure,
                    "Impossible case"
                  ];
            })];
}

function map8(mapper, decoder1, decoder2, decoder3, decoder4, decoder5, decoder6, decoder7, decoder8) {
  var decoder8$1 = decoder8[0];
  var decoder7$1 = decoder7[0];
  var decoder6$1 = decoder6[0];
  var decoder5$1 = decoder5[0];
  var decoder4$1 = decoder4[0];
  var decoder3$1 = decoder3[0];
  var decoder2$1 = decoder2[0];
  var decoder1$1 = decoder1[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1$1, value);
              var match$1 = Curry._1(decoder2$1, value);
              var match$2 = Curry._1(decoder3$1, value);
              var match$3 = Curry._1(decoder4$1, value);
              var match$4 = Curry._1(decoder5$1, value);
              var match$5 = Curry._1(decoder6$1, value);
              var match$6 = Curry._1(decoder7$1, value);
              var match$7 = Curry._1(decoder8$1, value);
              if (!match.tag && !match$1.tag && !match$2.tag && !match$3.tag && !match$4.tag && !match$5.tag && !match$6.tag && !match$7.tag) {
                return /* Ok */Block.__(0, [Curry._8(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0], match$6[0], match$7[0])]);
              }
              var e = Tea_result.first(match$7, Tea_result.first(match$6, Tea_result.first(match$5, Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match)))))));
              if (e.tag) {
                return /* Error */Block.__(1, ["map8 -> " + e[0]]);
              }
              throw [
                    Caml_builtin_exceptions.failure,
                    "Impossible case"
                  ];
            })];
}

function succeed(v) {
  return /* Decoder */[(function (_value) {
              return /* Ok */Block.__(0, [v]);
            })];
}

function fail(e) {
  return /* Decoder */[(function (_value) {
              return /* Error */Block.__(1, [e]);
            })];
}

var value = /* Decoder */[(function (value) {
      return /* Ok */Block.__(0, [value]);
    })];

function andThen(func, decoder) {
  var decoder$1 = decoder[0];
  return /* Decoder */[(function (value) {
              var r = Curry._1(decoder$1, value);
              if (r.tag) {
                return r;
              }
              var andThenDecoder = Curry._1(func, r[0]);
              return Curry._1(andThenDecoder[0], value);
            })];
}

function lazy_(func) {
  return andThen(func, /* Decoder */[(function (_value) {
                  return /* Ok */Block.__(0, [undefined]);
                })]);
}

function nullable(decoder) {
  return oneOf(/* :: */[
              $$null(undefined),
              /* :: */[
                map$1((function (v) {
                        return Caml_option.some(v);
                      }), decoder),
                /* [] */0
              ]
            ]);
}

function decodeValue(decoder, value) {
  try {
    return Curry._1(decoder[0], value);
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e[0] === ParseFail) {
      return /* Error */Block.__(1, [e[1]]);
    } else {
      return /* Error */Block.__(1, ["Unknown JSON parsing error"]);
    }
  }
}

function decodeEvent(decoder, value) {
  try {
    return Curry._1(decoder[0], value);
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e[0] === ParseFail) {
      return /* Error */Block.__(1, [e[1]]);
    } else {
      return /* Error */Block.__(1, ["Unknown JSON parsing error"]);
    }
  }
}

function decodeString(decoder, string) {
  try {
    var value = JSON.parse(string);
    return decodeValue(decoder, value);
  }
  catch (exn){
    return /* Error */Block.__(1, ["Invalid JSON string"]);
  }
}

var Decoder = {
  ObjectDict: ObjectDict,
  ParseFail: ParseFail,
  string: string,
  $$int: $$int,
  $$float: $$float,
  bool: bool,
  $$null: $$null,
  list: list,
  array: array,
  keyValuePairs: keyValuePairs,
  dict: dict,
  field: field,
  at: at,
  index: index,
  maybe: maybe,
  oneOf: oneOf,
  map: map$1,
  map2: map2,
  map3: map3,
  map4: map4,
  map5: map5,
  map6: map6,
  map7: map7,
  map8: map8,
  succeed: succeed,
  fail: fail,
  value: value,
  andThen: andThen,
  lazy_: lazy_,
  nullable: nullable,
  decodeValue: decodeValue,
  decodeEvent: decodeEvent,
  decodeString: decodeString
};

function encode(indentLevel, value) {
  return Web_json.string_of_json(indentLevel, value);
}

function string$1(v) {
  return v;
}

function $$int$1(v) {
  return v;
}

function $$float$1(v) {
  return v;
}

function bool$1(v) {
  return v;
}

function object_(v) {
  var aux = function (o, param) {
    o[param[0]] = param[1];
    return o;
  };
  return List.fold_left(aux, { }, v);
}

function array$1(v) {
  return v;
}

var list$1 = $$Array.of_list;

var Encoder_null = null;

var Encoder = {
  encode: encode,
  string: string$1,
  $$int: $$int$1,
  $$float: $$float$1,
  bool: bool$1,
  $$null: Encoder_null,
  object_: object_,
  array: array$1,
  list: list$1
};

exports.Decoder = Decoder;
exports.Encoder = Encoder;
/* No side effect */
