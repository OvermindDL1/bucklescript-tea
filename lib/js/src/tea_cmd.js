// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var Vdom = require("./vdom.js");
var Curry = require("rescript/lib/js/curry.js");

function batch(cmds) {
  return {
          TAG: /* Batch */1,
          _0: cmds
        };
}

function call(call$1) {
  return {
          TAG: /* EnqueueCall */2,
          _0: call$1
        };
}

function fnMsg(fnMsg$1) {
  return {
          TAG: /* EnqueueCall */2,
          _0: (function (callbacks) {
              return Curry._1(callbacks.contents.enqueue, Curry._1(fnMsg$1, undefined));
            })
        };
}

function msg(msg$1) {
  return {
          TAG: /* EnqueueCall */2,
          _0: (function (callbacks) {
              return Curry._1(callbacks.contents.enqueue, msg$1);
            })
        };
}

function run(_callbacks, _x) {
  while(true) {
    var x = _x;
    var callbacks = _callbacks;
    if (typeof x === "number") {
      return ;
    }
    switch (x.TAG | 0) {
      case /* Mapper */0 :
          var subCallbacks = Curry._1(x._0, callbacks);
          _x = x._1;
          _callbacks = subCallbacks;
          continue ;
      case /* Batch */1 :
          return List.fold_left((function(callbacks){
                    return function (param, cmd) {
                      return run(callbacks, cmd);
                    }
                    }(callbacks)), undefined, x._0);
      case /* EnqueueCall */2 :
          return Curry._1(x._0, callbacks);
      
    }
  };
}

function map(func, cmd) {
  var mapper = function (param) {
    return Vdom.wrapCallbacks(func, param);
  };
  return {
          TAG: /* Mapper */0,
          _0: mapper,
          _1: cmd
        };
}

var none = /* NoCmd */0;

exports.none = none;
exports.batch = batch;
exports.call = call;
exports.fnMsg = fnMsg;
exports.msg = msg;
exports.run = run;
exports.map = map;
/* No side effect */
