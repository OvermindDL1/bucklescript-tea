// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function nothing(param) {
  
}

function performOpt(toOptionalMessage, task) {
  var task$1 = task._0;
  return {
          TAG: /* EnqueueCall */2,
          _0: (function (callbacks) {
              return Curry._1(task$1, (function (x) {
                            if (x.TAG === /* Ok */0) {
                              var result = Curry._1(toOptionalMessage, x._0);
                              if (result !== undefined) {
                                return Curry._1(callbacks.contents.enqueue, Caml_option.valFromOption(result));
                              } else {
                                return ;
                              }
                            }
                            throw {
                                  RE_EXN_ID: "Failure",
                                  _1: "ERROR:  Task perfom returned error of never! Should not happen!",
                                  Error: new Error()
                                };
                          }));
            })
        };
}

function perform(toMessage, task) {
  return performOpt((function (v) {
                return Caml_option.some(Curry._1(toMessage, v));
              }), task);
}

function attemptOpt(resultToOptionalMessage, task) {
  var task$1 = task._0;
  return {
          TAG: /* EnqueueCall */2,
          _0: (function (callbacks) {
              return Curry._1(task$1, (function (value) {
                            var result = Curry._1(resultToOptionalMessage, value);
                            if (result !== undefined) {
                              return Curry._1(callbacks.contents.enqueue, Caml_option.valFromOption(result));
                            }
                            
                          }));
            })
        };
}

function attempt(resultToMessage, task) {
  return attemptOpt((function (v) {
                return Caml_option.some(Curry._1(resultToMessage, v));
              }), task);
}

function ignore(task) {
  return attemptOpt((function (param) {
                
              }), task);
}

function succeed(value) {
  return /* Task */{
          _0: (function (cb) {
              return Curry._1(cb, {
                          TAG: /* Ok */0,
                          _0: value
                        });
            })
        };
}

function fail(value) {
  return /* Task */{
          _0: (function (cb) {
              return Curry._1(cb, {
                          TAG: /* Error */1,
                          _0: value
                        });
            })
        };
}

function nativeBinding(func) {
  return /* Task */{
          _0: func
        };
}

function andThen(fn, task) {
  var task$1 = task._0;
  return /* Task */{
          _0: (function (cb) {
              return Curry._1(task$1, (function (x) {
                            if (x.TAG !== /* Ok */0) {
                              return Curry._1(cb, x);
                            }
                            var nextTask = Curry._1(fn, x._0);
                            return Curry._1(nextTask._0, cb);
                          }));
            })
        };
}

function onError(fn, task) {
  var task$1 = task._0;
  return /* Task */{
          _0: (function (cb) {
              return Curry._1(task$1, (function (x) {
                            if (x.TAG === /* Ok */0) {
                              return Curry._1(cb, x);
                            }
                            var newTask = Curry._1(fn, x._0);
                            return Curry._1(newTask._0, cb);
                          }));
            })
        };
}

function fromResult(x) {
  if (x.TAG === /* Ok */0) {
    var value = x._0;
    return /* Task */{
            _0: (function (cb) {
                return Curry._1(cb, {
                            TAG: /* Ok */0,
                            _0: value
                          });
              })
          };
  }
  var value$1 = x._0;
  return /* Task */{
          _0: (function (cb) {
              return Curry._1(cb, {
                          TAG: /* Error */1,
                          _0: value$1
                        });
            })
        };
}

function mapError(func, task) {
  return onError((function (e) {
                var value = Curry._1(func, e);
                return /* Task */{
                        _0: (function (cb) {
                            return Curry._1(cb, {
                                        TAG: /* Error */1,
                                        _0: value
                                      });
                          })
                      };
              }), task);
}

function toOption(task) {
  return onError((function (param) {
                return /* Task */{
                        _0: (function (cb) {
                            return Curry._1(cb, {
                                        TAG: /* Ok */0,
                                        _0: undefined
                                      });
                          })
                      };
              }), andThen((function (v) {
                    var value = Caml_option.some(v);
                    return /* Task */{
                            _0: (function (cb) {
                                return Curry._1(cb, {
                                            TAG: /* Ok */0,
                                            _0: value
                                          });
                              })
                          };
                  }), task));
}

function map(func, task1) {
  return andThen((function (v1) {
                var value = Curry._1(func, v1);
                return /* Task */{
                        _0: (function (cb) {
                            return Curry._1(cb, {
                                        TAG: /* Ok */0,
                                        _0: value
                                      });
                          })
                      };
              }), task1);
}

function map2(func, task1, task2) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              var value = Curry._2(func, v1, v2);
                              return /* Task */{
                                      _0: (function (cb) {
                                          return Curry._1(cb, {
                                                      TAG: /* Ok */0,
                                                      _0: value
                                                    });
                                        })
                                    };
                            }), task2);
              }), task1);
}

function map3(func, task1, task2, task3) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              return andThen((function (v3) {
                                            var value = Curry._3(func, v1, v2, v3);
                                            return /* Task */{
                                                    _0: (function (cb) {
                                                        return Curry._1(cb, {
                                                                    TAG: /* Ok */0,
                                                                    _0: value
                                                                  });
                                                      })
                                                  };
                                          }), task3);
                            }), task2);
              }), task1);
}

function map4(func, task1, task2, task3, task4) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              return andThen((function (v3) {
                                            return andThen((function (v4) {
                                                          var value = Curry._4(func, v1, v2, v3, v4);
                                                          return /* Task */{
                                                                  _0: (function (cb) {
                                                                      return Curry._1(cb, {
                                                                                  TAG: /* Ok */0,
                                                                                  _0: value
                                                                                });
                                                                    })
                                                                };
                                                        }), task4);
                                          }), task3);
                            }), task2);
              }), task1);
}

function map5(func, task1, task2, task3, task4, task5) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              return andThen((function (v3) {
                                            return andThen((function (v4) {
                                                          return andThen((function (v5) {
                                                                        var value = Curry._5(func, v1, v2, v3, v4, v5);
                                                                        return /* Task */{
                                                                                _0: (function (cb) {
                                                                                    return Curry._1(cb, {
                                                                                                TAG: /* Ok */0,
                                                                                                _0: value
                                                                                              });
                                                                                  })
                                                                              };
                                                                      }), task5);
                                                        }), task4);
                                          }), task3);
                            }), task2);
              }), task1);
}

function map6(func, task1, task2, task3, task4, task5, task6) {
  return andThen((function (v1) {
                return andThen((function (v2) {
                              return andThen((function (v3) {
                                            return andThen((function (v4) {
                                                          return andThen((function (v5) {
                                                                        return andThen((function (v6) {
                                                                                      var value = Curry._6(func, v1, v2, v3, v4, v5, v6);
                                                                                      return /* Task */{
                                                                                              _0: (function (cb) {
                                                                                                  return Curry._1(cb, {
                                                                                                              TAG: /* Ok */0,
                                                                                                              _0: value
                                                                                                            });
                                                                                                })
                                                                                            };
                                                                                    }), task6);
                                                                      }), task5);
                                                        }), task4);
                                          }), task3);
                            }), task2);
              }), task1);
}

function sequence(x) {
  if (x) {
    return map2((function (l, r) {
                  return {
                          hd: l,
                          tl: r
                        };
                }), x.hd, sequence(x.tl));
  } else {
    return /* Task */{
            _0: (function (cb) {
                return Curry._1(cb, {
                            TAG: /* Ok */0,
                            _0: /* [] */0
                          });
              })
          };
  }
}

var testing_deop = {
  contents: true
};

function testing(param) {
  var doTest = function (expected, task) {
    return Curry._1(task._0, (function (v) {
                  if (Caml_obj.caml_equal(v, expected)) {
                    console.log([
                          "Passed:",
                          expected,
                          v
                        ]);
                  } else {
                    console.log([
                          "FAILED:",
                          expected,
                          v
                        ]);
                  }
                  
                }));
  };
  var s = /* Task */{
    _0: (function (cb) {
        return Curry._1(cb, {
                    TAG: /* Ok */0,
                    _0: 42
                  });
      })
  };
  doTest({
        TAG: /* Ok */0,
        _0: 42
      }, s);
  var f = /* Task */{
    _0: (function (cb) {
        return Curry._1(cb, {
                    TAG: /* Error */1,
                    _0: 86
                  });
      })
  };
  doTest({
        TAG: /* Error */1,
        _0: 86
      }, f);
  var r = function (param) {
    if (testing_deop.contents) {
      return /* Task */{
              _0: (function (cb) {
                  return Curry._1(cb, {
                              TAG: /* Ok */0,
                              _0: 42
                            });
                })
            };
    } else {
      return /* Task */{
              _0: (function (cb) {
                  return Curry._1(cb, {
                              TAG: /* Error */1,
                              _0: 3.14
                            });
                })
            };
    }
  };
  var a1 = andThen((function (n) {
          var value = n + 2 | 0;
          return /* Task */{
                  _0: (function (cb) {
                      return Curry._1(cb, {
                                  TAG: /* Ok */0,
                                  _0: value
                                });
                    })
                };
        }), /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Ok */0,
                        _0: 2
                      });
          })
      });
  doTest({
        TAG: /* Ok */0,
        _0: 4
      }, a1);
  var a2 = andThen((function (n) {
          var value = String(n);
          return /* Task */{
                  _0: (function (cb) {
                      return Curry._1(cb, {
                                  TAG: /* Ok */0,
                                  _0: value
                                });
                    })
                };
        }), /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Ok */0,
                        _0: 2
                      });
          })
      });
  doTest({
        TAG: /* Ok */0,
        _0: "2"
      }, a2);
  var m1 = map((function (prim) {
          return Math.sqrt(prim);
        }), /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Ok */0,
                        _0: 9
                      });
          })
      });
  doTest({
        TAG: /* Ok */0,
        _0: 3
      }, m1);
  var m2 = map2((function (prim0, prim1) {
          return prim0 + prim1 | 0;
        }), /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Ok */0,
                        _0: 9
                      });
          })
      }, /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Ok */0,
                        _0: 3
                      });
          })
      });
  doTest({
        TAG: /* Ok */0,
        _0: 12
      }, m2);
  var m3 = map((function (prim) {
          return String(prim);
        }), /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Ok */0,
                        _0: 9
                      });
          })
      });
  doTest({
        TAG: /* Ok */0,
        _0: "9"
      }, m3);
  var s0 = sequence({
        hd: /* Task */{
          _0: (function (cb) {
              return Curry._1(cb, {
                          TAG: /* Ok */0,
                          _0: 1
                        });
            })
        },
        tl: {
          hd: /* Task */{
            _0: (function (cb) {
                return Curry._1(cb, {
                            TAG: /* Ok */0,
                            _0: 2
                          });
              })
          },
          tl: /* [] */0
        }
      });
  doTest({
        TAG: /* Ok */0,
        _0: {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }, s0);
  var s1 = sequence({
        hd: /* Task */{
          _0: (function (cb) {
              return Curry._1(cb, {
                          TAG: /* Ok */0,
                          _0: 1
                        });
            })
        },
        tl: {
          hd: /* Task */{
            _0: (function (cb) {
                return Curry._1(cb, {
                            TAG: /* Error */1,
                            _0: 2.7
                          });
              })
          },
          tl: {
            hd: r(undefined),
            tl: /* [] */0
          }
        }
      });
  doTest({
        TAG: /* Error */1,
        _0: 2.7
      }, s1);
  var e0 = onError((function (_msg) {
          return /* Task */{
                  _0: (function (cb) {
                      return Curry._1(cb, {
                                  TAG: /* Ok */0,
                                  _0: 42
                                });
                    })
                };
        }), /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Error */1,
                        _0: "file not found"
                      });
          })
      });
  doTest({
        TAG: /* Ok */0,
        _0: 42
      }, e0);
  var e1 = onError((function (_msg) {
          return /* Task */{
                  _0: (function (cb) {
                      return Curry._1(cb, {
                                  TAG: /* Error */1,
                                  _0: 42
                                });
                    })
                };
        }), /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Error */1,
                        _0: "file not found"
                      });
          })
      });
  doTest({
        TAG: /* Error */1,
        _0: 42
      }, e1);
  var n0 = sequence({
        hd: mapError((function (prim) {
                return String(prim);
              }), /* Task */{
              _0: (function (cb) {
                  return Curry._1(cb, {
                              TAG: /* Error */1,
                              _0: 42
                            });
                })
            }),
        tl: {
          hd: mapError((function (prim) {
                  return prim.toString();
                }), /* Task */{
                _0: (function (cb) {
                    return Curry._1(cb, {
                                TAG: /* Error */1,
                                _0: 3.14
                              });
                  })
              }),
          tl: /* [] */0
        }
      });
  doTest({
        TAG: /* Error */1,
        _0: "42"
      }, n0);
  var n1 = sequence({
        hd: mapError((function (prim) {
                return String(prim);
              }), /* Task */{
              _0: (function (cb) {
                  return Curry._1(cb, {
                              TAG: /* Ok */0,
                              _0: 1
                            });
                })
            }),
        tl: {
          hd: mapError((function (prim) {
                  return prim.toString();
                }), /* Task */{
                _0: (function (cb) {
                    return Curry._1(cb, {
                                TAG: /* Error */1,
                                _0: 3.14
                              });
                  })
              }),
          tl: /* [] */0
        }
      });
  doTest({
        TAG: /* Error */1,
        _0: "3.14"
      }, n1);
  var n2 = sequence({
        hd: mapError((function (prim) {
                return String(prim);
              }), /* Task */{
              _0: (function (cb) {
                  return Curry._1(cb, {
                              TAG: /* Ok */0,
                              _0: 1
                            });
                })
            }),
        tl: {
          hd: mapError((function (prim) {
                  return prim.toString();
                }), /* Task */{
                _0: (function (cb) {
                    return Curry._1(cb, {
                                TAG: /* Ok */0,
                                _0: 2
                              });
                  })
              }),
          tl: /* [] */0
        }
      });
  doTest({
        TAG: /* Ok */0,
        _0: {
          hd: 1,
          tl: {
            hd: 2,
            tl: /* [] */0
          }
        }
      }, n2);
  perform((function (param) {
          return 42;
        }), /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Ok */0,
                        _0: 18
                      });
          })
      });
  var value = 42;
  doTest({
        TAG: /* Ok */0,
        _0: 42
      }, /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Ok */0,
                        _0: value
                      });
          })
      });
  var value$1 = "failure";
  doTest({
        TAG: /* Error */1,
        _0: "failure"
      }, /* Task */{
        _0: (function (cb) {
            return Curry._1(cb, {
                        TAG: /* Error */1,
                        _0: value$1
                      });
          })
      });
  doTest({
        TAG: /* Ok */0,
        _0: undefined
      }, toOption(/* Task */{
            _0: (function (cb) {
                return Curry._1(cb, {
                            TAG: /* Error */1,
                            _0: "for some reason"
                          });
              })
          }));
  doTest({
        TAG: /* Ok */0,
        _0: 42
      }, toOption(/* Task */{
            _0: (function (cb) {
                return Curry._1(cb, {
                            TAG: /* Ok */0,
                            _0: 42
                          });
              })
          }));
  
}

exports.nothing = nothing;
exports.performOpt = performOpt;
exports.perform = perform;
exports.attemptOpt = attemptOpt;
exports.attempt = attempt;
exports.ignore = ignore;
exports.succeed = succeed;
exports.fail = fail;
exports.nativeBinding = nativeBinding;
exports.andThen = andThen;
exports.onError = onError;
exports.fromResult = fromResult;
exports.mapError = mapError;
exports.toOption = toOption;
exports.map = map;
exports.map2 = map2;
exports.map3 = map3;
exports.map4 = map4;
exports.map5 = map5;
exports.map6 = map6;
exports.sequence = sequence;
exports.testing_deop = testing_deop;
exports.testing = testing;
/* No side effect */
