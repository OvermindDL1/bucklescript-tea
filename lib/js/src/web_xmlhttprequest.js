// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Web_formdata = require("./web_formdata.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function abort(x) {
  return x.abort();
}

function getAllResponseHeaders(x) {
  var match = x.getAllResponseHeaders();
  if (match !== null) {
    if (match === "") {
      return /* Error */Block.__(1, [/* NetworkError */1]);
    } else {
      return /* Ok */Block.__(0, [match]);
    }
  } else {
    return /* Error */Block.__(1, [/* IncompleteResponse */0]);
  }
}

function getAllResponseHeadersAsList(x) {
  var err = getAllResponseHeaders(x);
  if (err.tag) {
    return err;
  } else {
    return /* Ok */Block.__(0, [Belt_List.map(Belt_List.keep(Belt_List.fromArray(Belt_Array.map(err[0].split("\r\n"), (function (param) {
                                  return param.split(": ", 2);
                                }))), (function (a) {
                          return +(a.length === 2);
                        })), (function (param) {
                      if (param.length !== 2) {
                        throw [
                              Caml_builtin_exceptions.failure,
                              "Cannot happen, already checked length"
                            ];
                      } else {
                        var key = param[0];
                        var value = param[1];
                        return /* tuple */[
                                key,
                                value
                              ];
                      }
                    }))]);
  }
}

function getAllResponseHeadersAsDict(x) {
  var err = getAllResponseHeadersAsList(x);
  if (err.tag) {
    return err;
  } else {
    var insert = function (d, param) {
      return Belt_MapString.set(d, param[0], param[1]);
    };
    return /* Ok */Block.__(0, [Belt_List.reduce(err[0], Belt_MapString.empty, insert)]);
  }
}

function getResponseHeader(key, x) {
  return Js_primitive.null_to_opt(x.getResponse(key));
}

function open_(method$prime, url, $staropt$star, $staropt$star$1, $staropt$star$2, x) {
  var async = $staropt$star ? $staropt$star[0] : /* true */1;
  var user = $staropt$star$1 ? $staropt$star$1[0] : "";
  var password = $staropt$star$2 ? $staropt$star$2[0] : "";
  return x.open(method$prime, url, async, user, password);
}

function overrideMimeType(mimetype, x) {
  return x.overrideMimeType(mimetype);
}

function send(body, x) {
  if (typeof body === "number") {
    if (body === 0) {
      return x.send();
    } else {
      return x.send(null);
    }
  } else {
    switch (body.tag | 0) {
      case 0 : 
          return x.send(body[0]);
      case 1 : 
          return x.send(body[0]);
      case 2 : 
          var form = Belt_List.reduce(body[0], new FormData(), (function (f, param) {
                  Web_formdata.append(param[0], param[1], f);
                  return f;
                }));
          return x.send(form);
      case 3 : 
          return x.send(body[0]);
      
    }
  }
}

function setRequestHeader(header, value, x) {
  return x.setRequestHeader(header, value);
}

function set_onreadystatechange(cb, x) {
  x.onreadystatechange = cb;
  return /* () */0;
}

function get_onreadystatechange(x) {
  return x.onreadystatechange;
}

function readyState(x) {
  var i = x.readystate;
  if (i > 4 || i < 0) {
    var s = "Invalid return from 'readystate' of: " + String(i);
    throw [
          Caml_builtin_exceptions.failure,
          s
        ];
  } else {
    return i;
  }
}

function set_responseType(typ, x) {
  if (typeof typ === "number") {
    switch (typ) {
      case 0 : 
          x.responseType = "";
          return /* () */0;
      case 1 : 
          x.responseType = "arraybuffer";
          return /* () */0;
      case 2 : 
          x.responseType = "blob";
          return /* () */0;
      case 3 : 
          x.responseType = "document";
          return /* () */0;
      case 4 : 
          x.responseType = "json";
          return /* () */0;
      case 5 : 
          x.responseType = "text";
          return /* () */0;
      
    }
  } else {
    x.responseType = typ[0];
    return /* () */0;
  }
}

function get_responseType(x) {
  var s = x.responseType;
  switch (s) {
    case "" : 
        return /* StringResponseType */0;
    case "arraybuffer" : 
        return /* ArrayBufferResponseType */1;
    case "blob" : 
        return /* BlobResponseType */2;
    case "document" : 
        return /* DocumentResponseType */3;
    case "json" : 
        return /* JsonResponseType */4;
    case "text" : 
        return /* TextResponseType */5;
    default:
      return /* RawResponseType */[s];
  }
}

function get_response(x) {
  var match = x.response;
  if (match !== null) {
    var match$1 = get_responseType(x);
    if (typeof match$1 === "number") {
      switch (match$1) {
        case 0 : 
            return /* StringResponse */Block.__(0, [match]);
        case 1 : 
            return /* ArrayBufferResponse */Block.__(1, [match]);
        case 2 : 
            return /* BlobResponse */Block.__(2, [match]);
        case 3 : 
            return /* DocumentResponse */Block.__(3, [match]);
        case 4 : 
            return /* JsonResponse */Block.__(4, [match]);
        case 5 : 
            return /* TextResponse */Block.__(5, [match]);
        
      }
    } else {
      return /* RawResponse */Block.__(6, [
                match$1[0],
                match
              ]);
    }
  } else {
    return /* NoResponse */0;
  }
}

function get_responseText(x) {
  return x.responseText;
}

function get_responseURL(x) {
  return x.responseURL;
}

function get_responseXML(x) {
  return Js_primitive.null_to_opt(x.responseXML);
}

function get_status(x) {
  return x.status;
}

function get_statusText(x) {
  return x.statusText;
}

function set_timeout(t, x) {
  x.timeout = t;
  return /* () */0;
}

function get_timeout(x) {
  return x.timeout;
}

function set_withCredentials(b, x) {
  x.withCredentials = b;
  return /* () */0;
}

function get_withCredentials(x) {
  return x.withCredentials;
}

function set_onabort(cb, x) {
  x.onabort = cb;
  return /* () */0;
}

function get_onabort(x) {
  return x.onabort;
}

function set_onerror(cb, x) {
  x.onerror = cb;
  return /* () */0;
}

function get_onerror(x) {
  return x.onerror;
}

function set_onload(cb, x) {
  x.onload = cb;
  return /* () */0;
}

function get_onload(x) {
  return x.onload;
}

function set_onloadstart(cb, x) {
  x.onloadstart = cb;
  return /* () */0;
}

function get_onloadstart(x) {
  return x.onloadstart;
}

function set_onprogress(cb, x) {
  x.onprogress = cb;
  return /* () */0;
}

function get_onprogress(x) {
  return x.onprogress;
}

function set_ontimeout(cb, x) {
  x.ontimeout = cb;
  return /* () */0;
}

function get_ontimeout(x) {
  return x.ontimeout;
}

function set_onloadend(cb, x) {
  x.onloadend = cb;
  return /* () */0;
}

function get_onloadend(x) {
  return x.onloadend;
}

exports.abort = abort;
exports.getAllResponseHeaders = getAllResponseHeaders;
exports.getAllResponseHeadersAsList = getAllResponseHeadersAsList;
exports.getAllResponseHeadersAsDict = getAllResponseHeadersAsDict;
exports.getResponseHeader = getResponseHeader;
exports.open_ = open_;
exports.overrideMimeType = overrideMimeType;
exports.send = send;
exports.setRequestHeader = setRequestHeader;
exports.set_onreadystatechange = set_onreadystatechange;
exports.get_onreadystatechange = get_onreadystatechange;
exports.readyState = readyState;
exports.set_responseType = set_responseType;
exports.get_responseType = get_responseType;
exports.get_response = get_response;
exports.get_responseText = get_responseText;
exports.get_responseURL = get_responseURL;
exports.get_responseXML = get_responseXML;
exports.get_status = get_status;
exports.get_statusText = get_statusText;
exports.set_timeout = set_timeout;
exports.get_timeout = get_timeout;
exports.set_withCredentials = set_withCredentials;
exports.get_withCredentials = get_withCredentials;
exports.set_onabort = set_onabort;
exports.get_onabort = get_onabort;
exports.set_onerror = set_onerror;
exports.get_onerror = get_onerror;
exports.set_onload = set_onload;
exports.get_onload = get_onload;
exports.set_onloadstart = set_onloadstart;
exports.get_onloadstart = get_onloadstart;
exports.set_onprogress = set_onprogress;
exports.get_onprogress = get_onprogress;
exports.set_ontimeout = set_ontimeout;
exports.get_ontimeout = get_ontimeout;
exports.set_onloadend = set_onloadend;
exports.get_onloadend = get_onloadend;
/* No side effect */
