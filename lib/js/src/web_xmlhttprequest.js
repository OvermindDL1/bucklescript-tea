// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var $$Array = require("rescript/lib/js/array.js");
var Curry = require("rescript/lib/js/curry.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Web_formdata = require("./web_formdata.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

function abort(x) {
  x.abort();
  
}

function getAllResponseHeaders(x) {
  var s = x.getAllResponseHeaders();
  if (s !== null) {
    if (s === "") {
      return {
              TAG: /* Error */1,
              _0: /* NetworkError */1
            };
    } else {
      return {
              TAG: /* Ok */0,
              _0: s
            };
    }
  } else {
    return {
            TAG: /* Error */1,
            _0: /* IncompleteResponse */0
          };
  }
}

function getAllResponseHeadersAsList(x) {
  var err = getAllResponseHeaders(x);
  if (err.TAG === /* Ok */0) {
    return {
            TAG: /* Ok */0,
            _0: List.map((function (x) {
                    if (x.length !== 2) {
                      throw {
                            RE_EXN_ID: "Failure",
                            _1: "Cannot happen, already checked length",
                            Error: new Error()
                          };
                    }
                    var key = x[0];
                    var value = x[1];
                    return [
                            key,
                            value
                          ];
                  }), List.filter(function (a) {
                        return a.length === 2;
                      })($$Array.to_list($$Array.map((function (param) {
                                return param.split(": ", 2);
                              }), err._0.split("\r\n")))))
          };
  } else {
    return err;
  }
}

function getAllResponseHeadersAsDict(x) {
  var err = getAllResponseHeadersAsList(x);
  if (err.TAG !== /* Ok */0) {
    return err;
  }
  var insert = function (d, param) {
    return Belt_MapString.set(d, param[0], param[1]);
  };
  return {
          TAG: /* Ok */0,
          _0: List.fold_left(insert, undefined, err._0)
        };
}

function getResponseHeader(key, x) {
  return Caml_option.null_to_opt(Curry._1(x.getResponse, key));
}

function open_(method$p, url, asyncOpt, userOpt, passwordOpt, x) {
  var async = asyncOpt !== undefined ? asyncOpt : true;
  var user = userOpt !== undefined ? userOpt : "";
  var password = passwordOpt !== undefined ? passwordOpt : "";
  x._open(method$p, url, async, user, password);
  
}

function overrideMimeType(mimetype, x) {
  x.overrideMimeType(mimetype);
  
}

function send(body, x) {
  if (typeof body === "number") {
    if (body === /* EmptyBody */0) {
      x.send();
      return ;
    }
    x.send__string(null);
    return ;
  } else {
    switch (body.TAG | 0) {
      case /* StringBody */0 :
          x.send__string(body._0);
          return ;
      case /* FormDataBody */1 :
          x.send__formdata(body._0);
          return ;
      case /* FormListBody */2 :
          var form = List.fold_left((function (f, param) {
                  Web_formdata.append(param[0], param[1], f);
                  return f;
                }), new FormData(), body._0);
          x.send__formdata(form);
          return ;
      case /* DocumentBody */3 :
          x.send__document(body._0);
          return ;
      
    }
  }
}

function setRequestHeader(header, value, x) {
  x.setRequestHeader(header, value);
  
}

function set_onreadystatechange(cb, x) {
  x.onreadystatechange = cb;
  
}

function get_onreadystatechange(x) {
  return x.onreadystatechange;
}

function readyState(x) {
  var i = x.readyState;
  if (!(i > 4 || i < 0)) {
    return i;
  }
  var s = "Invalid return from 'readystate' of: " + String(i);
  throw {
        RE_EXN_ID: "Failure",
        _1: s,
        Error: new Error()
      };
}

function set_responseType(typ, x) {
  if (typeof typ !== "number") {
    x.responseType = typ._0;
    return ;
  }
  switch (typ) {
    case /* StringResponseType */0 :
        x.responseType = "";
        return ;
    case /* ArrayBufferResponseType */1 :
        x.responseType = "arraybuffer";
        return ;
    case /* BlobResponseType */2 :
        x.responseType = "blob";
        return ;
    case /* DocumentResponseType */3 :
        x.responseType = "document";
        return ;
    case /* JsonResponseType */4 :
        x.responseType = "json";
        return ;
    case /* TextResponseType */5 :
        x.responseType = "text";
        return ;
    
  }
}

function get_responseType(x) {
  var s = x.responseType;
  switch (s) {
    case "" :
        return /* StringResponseType */0;
    case "arraybuffer" :
        return /* ArrayBufferResponseType */1;
    case "blob" :
        return /* BlobResponseType */2;
    case "document" :
        return /* DocumentResponseType */3;
    case "json" :
        return /* JsonResponseType */4;
    case "text" :
        return /* TextResponseType */5;
    default:
      return /* RawResponseType */{
              _0: s
            };
  }
}

function get_response(x) {
  var resp = x.response;
  if (resp === null) {
    return /* NoResponse */0;
  }
  var s = get_responseType(x);
  if (typeof s !== "number") {
    return {
            TAG: /* RawResponse */6,
            _0: s._0,
            _1: resp
          };
  }
  switch (s) {
    case /* StringResponseType */0 :
        return {
                TAG: /* StringResponse */0,
                _0: resp
              };
    case /* ArrayBufferResponseType */1 :
        return {
                TAG: /* ArrayBufferResponse */1,
                _0: resp
              };
    case /* BlobResponseType */2 :
        return {
                TAG: /* BlobResponse */2,
                _0: resp
              };
    case /* DocumentResponseType */3 :
        return {
                TAG: /* DocumentResponse */3,
                _0: resp
              };
    case /* JsonResponseType */4 :
        return {
                TAG: /* JsonResponse */4,
                _0: resp
              };
    case /* TextResponseType */5 :
        return {
                TAG: /* TextResponse */5,
                _0: resp
              };
    
  }
}

function get_responseText(x) {
  return x.responseText;
}

function get_responseURL(x) {
  return x.responseURL;
}

function get_responseXML(x) {
  return Caml_option.null_to_opt(x.responseXML);
}

function get_status(x) {
  return x.status;
}

function get_statusText(x) {
  return x.statusText;
}

function set_timeout(t, x) {
  x.timeout = t;
  
}

function get_timeout(x) {
  return x.timeout;
}

function set_withCredentials(b, x) {
  x.withCredentials = b;
  
}

function get_withCredentials(x) {
  return x.withCredentials;
}

function set_onabort(cb, x) {
  x.onabort = cb;
  
}

function get_onabort(x) {
  return x.onabort;
}

function set_onerror(cb, x) {
  x.onerror = cb;
  
}

function get_onerror(x) {
  return x.onerror;
}

function set_onload(cb, x) {
  x.onload = cb;
  
}

function get_onload(x) {
  return x.onload;
}

function set_onloadstart(cb, x) {
  x.onloadstart = cb;
  
}

function get_onloadstart(x) {
  return x.onloadstart;
}

function set_onprogress(cb, x) {
  x.onprogress = cb;
  
}

function get_onprogress(x) {
  return x.onprogress;
}

function set_ontimeout(cb, x) {
  x.ontimeout = cb;
  
}

function get_ontimeout(x) {
  return x.ontimeout;
}

function set_onloadend(cb, x) {
  x.onloadend = cb;
  
}

function get_onloadend(x) {
  return x.onloadend;
}

exports.abort = abort;
exports.getAllResponseHeaders = getAllResponseHeaders;
exports.getAllResponseHeadersAsList = getAllResponseHeadersAsList;
exports.getAllResponseHeadersAsDict = getAllResponseHeadersAsDict;
exports.getResponseHeader = getResponseHeader;
exports.open_ = open_;
exports.overrideMimeType = overrideMimeType;
exports.send = send;
exports.setRequestHeader = setRequestHeader;
exports.set_onreadystatechange = set_onreadystatechange;
exports.get_onreadystatechange = get_onreadystatechange;
exports.readyState = readyState;
exports.set_responseType = set_responseType;
exports.get_responseType = get_responseType;
exports.get_response = get_response;
exports.get_responseText = get_responseText;
exports.get_responseURL = get_responseURL;
exports.get_responseXML = get_responseXML;
exports.get_status = get_status;
exports.get_statusText = get_statusText;
exports.set_timeout = set_timeout;
exports.get_timeout = get_timeout;
exports.set_withCredentials = set_withCredentials;
exports.get_withCredentials = get_withCredentials;
exports.set_onabort = set_onabort;
exports.get_onabort = get_onabort;
exports.set_onerror = set_onerror;
exports.get_onerror = get_onerror;
exports.set_onload = set_onload;
exports.get_onload = get_onload;
exports.set_onloadstart = set_onloadstart;
exports.get_onloadstart = get_onloadstart;
exports.set_onprogress = set_onprogress;
exports.get_onprogress = get_onprogress;
exports.set_ontimeout = set_ontimeout;
exports.get_ontimeout = get_ontimeout;
exports.set_onloadend = set_onloadend;
exports.get_onloadend = get_onloadend;
/* No side effect */
