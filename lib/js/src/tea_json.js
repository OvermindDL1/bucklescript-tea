// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Web_json = require("./web_json.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Tea_result = require("./tea_result.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var ParseFail = Caml_exceptions.create("Tea_json.Decoder.ParseFail");

var string = /* Decoder */[(function (value) {
      var match = Web_json.classify(value);
      if (typeof match === "number") {
        return /* Error */Block.__(1, ["Non-string value"]);
      } else if (match.tag) {
        return /* Error */Block.__(1, ["Non-string value"]);
      } else {
        return /* Ok */Block.__(0, [match[0]]);
      }
    })];

var $$int = /* Decoder */[(function (value) {
      var match = Web_json.classify(value);
      if (typeof match === "number") {
        return /* Error */Block.__(1, ["Non-int value"]);
      } else if (match.tag === 1) {
        var n = match[0];
        if (n > Pervasives.min_int && n < Pervasives.max_int) {
          return /* Ok */Block.__(0, [n | 0]);
        } else {
          return /* Error */Block.__(1, ["number out of int range"]);
        }
      } else {
        return /* Error */Block.__(1, ["Non-int value"]);
      }
    })];

var $$float = /* Decoder */[(function (value) {
      var match = Web_json.classify(value);
      if (typeof match === "number") {
        return /* Error */Block.__(1, ["Non-float-value"]);
      } else if (match.tag === 1) {
        return /* Ok */Block.__(0, [match[0]]);
      } else {
        return /* Error */Block.__(1, ["Non-float-value"]);
      }
    })];

var bool = /* Decoder */[(function (value) {
      var match = Web_json.classify(value);
      if (typeof match === "number") {
        switch (match) {
          case 0 : 
              return /* Ok */Block.__(0, [/* false */0]);
          case 1 : 
              return /* Ok */Block.__(0, [/* true */1]);
          case 2 : 
              return /* Error */Block.__(1, ["Non-boolean value"]);
          
        }
      } else {
        return /* Error */Block.__(1, ["Non-boolean value"]);
      }
    })];

function $$null(v) {
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number") {
                if (match >= 2) {
                  return /* Ok */Block.__(0, [v]);
                } else {
                  return /* Error */Block.__(1, ["Non-null value"]);
                }
              } else {
                return /* Error */Block.__(1, ["Non-null value"]);
              }
            })];
}

function list(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number") {
                return /* Error */Block.__(1, ["Non-list value"]);
              } else if (match.tag === 3) {
                var parse = function (v) {
                  var match = Curry._1(decoder, v);
                  if (match.tag) {
                    throw [
                          ParseFail,
                          match[0]
                        ];
                  } else {
                    return match[0];
                  }
                };
                try {
                  return /* Ok */Block.__(0, [Belt_List.map(Belt_List.fromArray(match[0]), parse)]);
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn[0] === ParseFail) {
                    return /* Error */Block.__(1, ["list -> " + exn[1]]);
                  } else {
                    throw exn;
                  }
                }
              } else {
                return /* Error */Block.__(1, ["Non-list value"]);
              }
            })];
}

function array(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number") {
                return /* Error */Block.__(1, ["Non-array value"]);
              } else if (match.tag === 3) {
                var parse = function (v) {
                  var match = Curry._1(decoder, v);
                  if (match.tag) {
                    throw [
                          ParseFail,
                          match[0]
                        ];
                  } else {
                    return match[0];
                  }
                };
                try {
                  return /* Ok */Block.__(0, [Belt_Array.map(match[0], parse)]);
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn[0] === ParseFail) {
                    return /* Error */Block.__(1, ["array -> " + exn[1]]);
                  } else {
                    throw exn;
                  }
                }
              } else {
                return /* Error */Block.__(1, ["Non-array value"]);
              }
            })];
}

function keyValuePairs(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number") {
                return /* Error */Block.__(1, ["Non-keyValuePair value"]);
              } else if (match.tag === 2) {
                var o = match[0];
                var keys = Object.keys(o);
                var parse = function (l, k) {
                  var match = o[k];
                  if (match !== undefined) {
                    var match$1 = Curry._1(decoder, match);
                    if (match$1.tag) {
                      throw [
                            ParseFail,
                            match$1[0]
                          ];
                    } else {
                      return /* :: */[
                              /* tuple */[
                                k,
                                match$1[0]
                              ],
                              l
                            ];
                    }
                  } else {
                    throw [
                          ParseFail,
                          "Key is undefined: " + k
                        ];
                  }
                };
                try {
                  return /* Ok */Block.__(0, [Belt_Array.reduceReverse(keys, /* [] */0, parse)]);
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn[0] === ParseFail) {
                    return /* Error */Block.__(1, ["Invalid keyValuePair parsing: " + exn[1]]);
                  } else {
                    throw exn;
                  }
                }
              } else {
                return /* Error */Block.__(1, ["Non-keyValuePair value"]);
              }
            })];
}

function dict(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number") {
                return /* Error */Block.__(1, ["Non-dict value"]);
              } else if (match.tag === 2) {
                var o = match[0];
                var keys = Object.keys(o);
                var parse = function (d, k) {
                  var match = o[k];
                  if (match !== undefined) {
                    var match$1 = Curry._1(decoder, match);
                    if (match$1.tag) {
                      throw [
                            ParseFail,
                            match$1[0]
                          ];
                    } else {
                      return Belt_MapString.set(d, k, match$1[0]);
                    }
                  } else {
                    throw [
                          ParseFail,
                          "Key is undefined: " + k
                        ];
                  }
                };
                try {
                  return /* Ok */Block.__(0, [Belt_Array.reduceReverse(keys, Belt_MapString.empty, parse)]);
                }
                catch (raw_exn){
                  var exn = Js_exn.internalToOCamlException(raw_exn);
                  if (exn[0] === ParseFail) {
                    return /* Error */Block.__(1, ["Invalid dict parsing: " + exn[1]]);
                  } else {
                    throw exn;
                  }
                }
              } else {
                return /* Error */Block.__(1, ["Non-dict value"]);
              }
            })];
}

function field(key, param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number") {
                return /* Error */Block.__(1, ["Non-fieldable value"]);
              } else if (match.tag === 2) {
                var match$1 = match[0][key];
                if (match$1 !== undefined) {
                  var o = Curry._1(decoder, match$1);
                  if (o.tag) {
                    return /* Error */Block.__(1, ["field `" + (key + ("` -> " + o[0]))]);
                  } else {
                    return o;
                  }
                } else {
                  return /* Error */Block.__(1, ["Field Value is undefined: " + key]);
                }
              } else {
                return /* Error */Block.__(1, ["Non-fieldable value"]);
              }
            })];
}

function at(fields, dec) {
  return Belt_List.reduceReverseU(fields, dec, (function (d, k) {
                return field(k, d);
              }));
}

function index(idx, param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Web_json.classify(value);
              if (typeof match === "number") {
                return /* Error */Block.__(1, ["Non-array value"]);
              } else if (match.tag === 3) {
                var a = match[0];
                if (idx < 0 || idx > a.length) {
                  return /* Error */Block.__(1, ["Array index out of range: " + String(idx)]);
                } else {
                  return Curry._1(decoder, a[idx]);
                }
              } else {
                return /* Error */Block.__(1, ["Non-array value"]);
              }
            })];
}

function maybe(param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder, value);
              if (match.tag) {
                return /* Ok */Block.__(0, [/* None */0]);
              } else {
                return /* Ok */Block.__(0, [/* Some */[match[0]]]);
              }
            })];
}

function oneOf(decoders) {
  return /* Decoder */[(function (value) {
              var parse = function (v, _param) {
                while(true) {
                  var param = _param;
                  if (param) {
                    var rest = param[1];
                    try {
                      var ok = Curry._1(param[0][0], v);
                      if (ok.tag) {
                        return parse(v, rest);
                      } else {
                        return ok;
                      }
                    }
                    catch (exn){
                      _param = rest;
                      continue ;
                      
                    }
                  } else {
                    return /* Error */Block.__(1, ["No one-of's matched"]);
                  }
                };
              };
              return parse(value, decoders);
            })];
}

function map(mapper, param) {
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              if (match.tag) {
                return /* Error */Block.__(1, ["map " + match[0]]);
              } else {
                return /* Ok */Block.__(0, [Curry._1(mapper, match[0])]);
              }
            })];
}

function map2(mapper, param, param$1) {
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var exit = 0;
              if (match.tag || match$1.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._2(mapper, match[0], match$1[0])]);
              }
              if (exit === 1) {
                var match$2 = Tea_result.error_of_first(match, match$1);
                if (match$2) {
                  return /* Error */Block.__(1, ["map2 -> " + match$2[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map3(mapper, param, param$1, param$2) {
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._3(mapper, match[0], match$1[0], match$2[0])]);
              }
              if (exit === 1) {
                var match$3 = Tea_result.first(match$2, Tea_result.first(match$1, match));
                if (match$3.tag) {
                  return /* Error */Block.__(1, ["map3 -> " + match$3[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map4(mapper, param, param$1, param$2, param$3) {
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._4(mapper, match[0], match$1[0], match$2[0], match$3[0])]);
              }
              if (exit === 1) {
                var match$4 = Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match)));
                if (match$4.tag) {
                  return /* Error */Block.__(1, ["map4 -> " + match$4[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map5(mapper, param, param$1, param$2, param$3, param$4) {
  var decoder5 = param$4[0];
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var match$4 = Curry._1(decoder5, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._5(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0])]);
              }
              if (exit === 1) {
                var match$5 = Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match))));
                if (match$5.tag) {
                  return /* Error */Block.__(1, ["map5 -> " + match$5[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map6(mapper, param, param$1, param$2, param$3, param$4, param$5) {
  var decoder6 = param$5[0];
  var decoder5 = param$4[0];
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var match$4 = Curry._1(decoder5, value);
              var match$5 = Curry._1(decoder6, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag || match$5.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._6(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0])]);
              }
              if (exit === 1) {
                var match$6 = Tea_result.first(match$5, Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match)))));
                if (match$6.tag) {
                  return /* Error */Block.__(1, ["map6 -> " + match$6[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map7(mapper, param, param$1, param$2, param$3, param$4, param$5, param$6) {
  var decoder7 = param$6[0];
  var decoder6 = param$5[0];
  var decoder5 = param$4[0];
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var match$4 = Curry._1(decoder5, value);
              var match$5 = Curry._1(decoder6, value);
              var match$6 = Curry._1(decoder7, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag || match$5.tag || match$6.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._7(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0], match$6[0])]);
              }
              if (exit === 1) {
                var match$7 = Tea_result.first(match$6, Tea_result.first(match$5, Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match))))));
                if (match$7.tag) {
                  return /* Error */Block.__(1, ["map7 -> " + match$7[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function map8(mapper, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
  var decoder8 = param$7[0];
  var decoder7 = param$6[0];
  var decoder6 = param$5[0];
  var decoder5 = param$4[0];
  var decoder4 = param$3[0];
  var decoder3 = param$2[0];
  var decoder2 = param$1[0];
  var decoder1 = param[0];
  return /* Decoder */[(function (value) {
              var match = Curry._1(decoder1, value);
              var match$1 = Curry._1(decoder2, value);
              var match$2 = Curry._1(decoder3, value);
              var match$3 = Curry._1(decoder4, value);
              var match$4 = Curry._1(decoder5, value);
              var match$5 = Curry._1(decoder6, value);
              var match$6 = Curry._1(decoder7, value);
              var match$7 = Curry._1(decoder8, value);
              var exit = 0;
              if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag || match$5.tag || match$6.tag || match$7.tag) {
                exit = 1;
              } else {
                return /* Ok */Block.__(0, [Curry._8(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0], match$6[0], match$7[0])]);
              }
              if (exit === 1) {
                var match$8 = Tea_result.first(match$7, Tea_result.first(match$6, Tea_result.first(match$5, Tea_result.first(match$4, Tea_result.first(match$3, Tea_result.first(match$2, Tea_result.first(match$1, match)))))));
                if (match$8.tag) {
                  return /* Error */Block.__(1, ["map8 -> " + match$8[0]]);
                } else {
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Impossible case"
                      ];
                }
              }
              
            })];
}

function succeed(v) {
  return /* Decoder */[(function () {
              return /* Ok */Block.__(0, [v]);
            })];
}

function fail(e) {
  return /* Decoder */[(function () {
              return /* Error */Block.__(1, [e]);
            })];
}

var value = /* Decoder */[(function (value) {
      return /* Ok */Block.__(0, [value]);
    })];

function andThen(func, param) {
  var decoder = param[0];
  return /* Decoder */[(function (value) {
              var err = Curry._1(decoder, value);
              if (err.tag) {
                return err;
              } else {
                var match = Curry._1(func, err[0]);
                return Curry._1(match[0], value);
              }
            })];
}

function lazy_(func) {
  return andThen(func, /* Decoder */[(function () {
                  return /* Ok */Block.__(0, [/* () */0]);
                })]);
}

function nullable(decoder) {
  return oneOf(/* :: */[
              $$null(/* None */0),
              /* :: */[
                map((function (v) {
                        return /* Some */[v];
                      }), decoder),
                /* [] */0
              ]
            ]);
}

function decodeValue(param, value) {
  try {
    return Curry._1(param[0], value);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === ParseFail) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      return /* Error */Block.__(1, ["Unknown JSON parsing error"]);
    }
  }
}

function decodeEvent(param, value) {
  try {
    return Curry._1(param[0], value);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === ParseFail) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      return /* Error */Block.__(1, ["Unknown JSON parsing error"]);
    }
  }
}

function decodeString(decoder, string) {
  try {
    var value = JSON.parse(string);
    return decodeValue(decoder, value);
  }
  catch (exn){
    return /* Error */Block.__(1, ["Invalid JSON string"]);
  }
}

var Decoder = /* module */[
  /* ObjectDict */0,
  /* ParseFail */ParseFail,
  /* string */string,
  /* int */$$int,
  /* float */$$float,
  /* bool */bool,
  /* null */$$null,
  /* list */list,
  /* array */array,
  /* keyValuePairs */keyValuePairs,
  /* dict */dict,
  /* field */field,
  /* at */at,
  /* index */index,
  /* maybe */maybe,
  /* oneOf */oneOf,
  /* map */map,
  /* map2 */map2,
  /* map3 */map3,
  /* map4 */map4,
  /* map5 */map5,
  /* map6 */map6,
  /* map7 */map7,
  /* map8 */map8,
  /* succeed */succeed,
  /* fail */fail,
  /* value */value,
  /* andThen */andThen,
  /* lazy_ */lazy_,
  /* nullable */nullable,
  /* decodeValue */decodeValue,
  /* decodeEvent */decodeEvent,
  /* decodeString */decodeString
];

function encode(indentLevel, value) {
  return Web_json.string_of_json(/* Some */[indentLevel], value);
}

function string$1(v) {
  return v;
}

function $$int$1(v) {
  return v;
}

function $$float$1(v) {
  return v;
}

function bool$1(v) {
  if (v) {
    return true;
  } else {
    return false;
  }
}

function object_(v) {
  var aux = function (o, param) {
    o[param[0]] = param[1];
    return o;
  };
  return Belt_List.reduce(v, { }, aux);
}

function array$1(v) {
  return v;
}

var list$1 = $$Array.of_list;

var Encoder = /* module */[
  /* encode */encode,
  /* string */string$1,
  /* int */$$int$1,
  /* float */$$float$1,
  /* bool */bool$1,
  /* null */Web_json.$$null,
  /* object_ */object_,
  /* array */array$1,
  /* list */list$1
];

exports.Decoder = Decoder;
exports.Encoder = Encoder;
/* No side effect */
