// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Tea_json = require("./tea_json.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Web_xmlhttprequest = require("./web_xmlhttprequest.js");

function string_of_error(param) {
  if (typeof param === "number") {
    switch (param) {
      case 0 : 
          return "Timeout";
      case 1 : 
          return "Unknown network error";
      case 2 : 
          return "Request aborted";
      
    }
  } else {
    switch (param.tag | 0) {
      case 0 : 
          return "Bad Url: " + param[0];
      case 1 : 
          return "Bad Status: " + param[0][/* url */0];
      case 2 : 
          return "Bad Payload: " + param[1][/* url */0];
      
    }
  }
}

var emptyRequestEvents = /* record */[
  /* onreadystatechange : None */0,
  /* onprogress : None */0
];

function expectStringResponse(func) {
  return /* Expect */[
          /* TextResponseType */5,
          (function (param) {
              var body = param[/* body */3];
              if (typeof body === "number") {
                return /* Error */Block.__(1, ["Non-text response returned"]);
              } else if (body.tag === 5) {
                return Curry._1(func, body[0]);
              } else {
                return /* Error */Block.__(1, ["Non-text response returned"]);
              }
            })
        ];
}

var expectString = expectStringResponse((function (resString) {
        return /* Ok */Block.__(0, [resString]);
      }));

function request(rawRequest) {
  return /* Request */[
          rawRequest,
          /* None */0
        ];
}

function getString(url) {
  return /* Request */[
          /* record */[
            /* method' */"GET",
            /* headers : [] */0,
            /* url */url,
            /* body : EmptyBody */0,
            /* expect */expectString,
            /* timeout : None */0,
            /* withCredentials : false */0
          ],
          /* None */0
        ];
}

function send(resultToMessage, param) {
  var maybeEvents = param[1];
  var request = param[0];
  var expect = request[/* expect */4];
  var responseToResult = expect[1];
  var typ = expect[0];
  var withCredentials = request[/* withCredentials */6];
  var timeout = request[/* timeout */5];
  var body = request[/* body */3];
  var url = request[/* url */2];
  var headers = request[/* headers */1];
  var method$prime = request[/* method' */0];
  return /* EnqueueCall */Block.__(2, [(function (callbacks) {
                var enqRes = function (result, _) {
                  return Curry._1(callbacks[0][/* enqueue */0], Curry._1(resultToMessage, result));
                };
                var xhr = new XMLHttpRequest();
                if (maybeEvents) {
                  var match = maybeEvents[0];
                  var mayCB = function (thenDo, param) {
                    if (param) {
                      return Curry._1(thenDo, Curry._1(param[0], callbacks));
                    } else {
                      return /* () */0;
                    }
                  };
                  mayCB((function (param) {
                          xhr.onreadystatechange = param;
                          return /* () */0;
                        }), match[/* onreadystatechange */0]);
                  mayCB((function (param) {
                          xhr.onprogress = param;
                          return /* () */0;
                        }), match[/* onprogress */1]);
                }
                var partial_arg = /* Error */Block.__(1, [/* NetworkError */1]);
                var cb = function (param) {
                  return enqRes(partial_arg, param);
                };
                xhr.onerror = cb;
                var partial_arg$1 = /* Error */Block.__(1, [/* Timeout */0]);
                var cb$1 = function (param) {
                  return enqRes(partial_arg$1, param);
                };
                xhr.ontimeout = cb$1;
                var partial_arg$2 = /* Error */Block.__(1, [/* Aborted */2]);
                var cb$2 = function (param) {
                  return enqRes(partial_arg$2, param);
                };
                xhr.onabort = cb$2;
                var cb$3 = function () {
                  var match = Web_xmlhttprequest.getAllResponseHeadersAsDict(xhr);
                  var headers;
                  headers = match.tag ? Belt_MapString.empty : match[0];
                  var response_000 = /* url */xhr.responseURL;
                  var response_001 = /* status : record */[
                    /* code */xhr.status,
                    /* message */xhr.statusText
                  ];
                  var response_003 = /* body */Web_xmlhttprequest.get_response(xhr);
                  var response = /* record */[
                    response_000,
                    response_001,
                    /* headers */headers,
                    response_003
                  ];
                  if (response_001[/* code */0] < 200 || 300 <= response_001[/* code */0]) {
                    var partial_arg = /* Error */Block.__(1, [/* BadStatus */Block.__(1, [response])]);
                    return (function (param) {
                                return enqRes(partial_arg, param);
                              })(/* () */0);
                  } else {
                    var match$1 = Curry._1(responseToResult, response);
                    if (match$1.tag) {
                      var partial_arg$1 = /* Error */Block.__(1, [/* BadPayload */Block.__(2, [
                              match$1[0],
                              response
                            ])]);
                      return (function (param) {
                                  return enqRes(partial_arg$1, param);
                                })(/* () */0);
                    } else {
                      var partial_arg$2 = /* Ok */Block.__(0, [match$1[0]]);
                      return (function (param) {
                                  return enqRes(partial_arg$2, param);
                                })(/* () */0);
                    }
                  }
                };
                xhr.onload = cb$3;
                try {
                  Web_xmlhttprequest.open_(method$prime, url, /* None */0, /* None */0, /* None */0, xhr);
                }
                catch (exn){
                  var partial_arg$3 = /* Error */Block.__(1, [/* BadUrl */Block.__(0, [url])]);
                  ((function (param) {
                          return enqRes(partial_arg$3, param);
                        })(/* () */0));
                }
                var setHeader = function (param) {
                  return Web_xmlhttprequest.setRequestHeader(param[0], param[1], xhr);
                };
                Belt_List.forEach(headers, setHeader);
                Web_xmlhttprequest.set_responseType(typ, xhr);
                if (timeout) {
                  xhr.timeout = timeout[0];
                }
                xhr.withCredentials = withCredentials;
                Web_xmlhttprequest.send(body, xhr);
                return /* () */0;
              })]);
}

function encodeUri(str) {
  return encodeURIComponent(str);
}

function decodeUri(str) {
  try {
    return /* Some */[decodeURIComponent(str)];
  }
  catch (exn){
    return /* None */0;
  }
}

function track(toMessage, param) {
  var events = param[1];
  var onprogress = /* Some */[(function (callbacks, ev) {
        var match = Tea_json.Decoder[/* decodeValue */30](Tea_json.Decoder[/* field */11]("lengthComputable", Tea_json.Decoder[/* bool */5]), ev);
        var lengthComputable;
        lengthComputable = match.tag ? /* false */0 : match[0];
        if (lengthComputable) {
          var decoder = Tea_json.Decoder[/* map2 */17]((function (bytes, bytesExpected) {
                  return /* record */[
                          /* bytes */bytes,
                          /* bytesExpected */bytesExpected
                        ];
                }), Tea_json.Decoder[/* field */11]("loaded", Tea_json.Decoder[/* int */3]), Tea_json.Decoder[/* field */11]("total", Tea_json.Decoder[/* int */3]));
          var match$1 = Tea_json.Decoder[/* decodeValue */30](decoder, ev);
          if (match$1.tag) {
            return /* () */0;
          } else {
            return Curry._1(callbacks[0][/* enqueue */0], Curry._1(toMessage, match$1[0]));
          }
        } else {
          return 0;
        }
      })];
  var events$1 = events ? events[0] : emptyRequestEvents;
  return /* Request */[
          param[0],
          /* Some */[/* record */[
              /* onreadystatechange */events$1[/* onreadystatechange */0],
              /* onprogress */onprogress
            ]]
        ];
}

var Progress_000 = /* emptyProgress : record */[
  /* bytes */0,
  /* bytesExpected */0
];

var Progress = /* module */[
  Progress_000,
  /* track */track
];

exports.string_of_error = string_of_error;
exports.emptyRequestEvents = emptyRequestEvents;
exports.expectStringResponse = expectStringResponse;
exports.expectString = expectString;
exports.request = request;
exports.getString = getString;
exports.send = send;
exports.encodeUri = encodeUri;
exports.decodeUri = decodeUri;
exports.Progress = Progress;
/* expectString Not a pure module */
