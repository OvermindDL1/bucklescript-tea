// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var Vdom = require("./vdom.js");
var Curry = require("rescript/lib/js/curry.js");
var $$String = require("rescript/lib/js/string.js");
var Tea_app = require("./tea_app.js");
var Tea_cmd = require("./tea_cmd.js");
var Tea_sub = require("./tea_sub.js");
var Tea_html2 = require("./tea_html2.js");
var Tea_navigation = require("./tea_navigation.js");

function client_msg(msg) {
  return {
          TAG: /* ClientMsg */0,
          _0: msg
        };
}

function debug(string_of_msg, update, view, subscriptions, shutdown) {
  var init_debug = function (param) {
    return [
            {
              history: {
                hd: [
                  "_init_",
                  param[0]
                ],
                tl: /* [] */0
              },
              state: /* Running */0,
              show_details: false
            },
            Tea_cmd.map(client_msg, param[1])
          ];
  };
  var update$p = function (model, x) {
    if (typeof x === "number") {
      if (x !== /* TogglePaused */0) {
        return [
                {
                  history: model.history,
                  state: model.state,
                  show_details: !model.show_details
                },
                /* NoCmd */0
              ];
      }
      var match = model.state;
      if (match) {
        return [
                {
                  history: model.history,
                  state: /* Running */0,
                  show_details: model.show_details
                },
                /* NoCmd */0
              ];
      } else {
        return [
                {
                  history: model.history,
                  state: /* Paused */{
                    _0: 0
                  },
                  show_details: model.show_details
                },
                /* NoCmd */0
              ];
      }
    } else {
      if (x.TAG !== /* ClientMsg */0) {
        return [
                {
                  history: model.history,
                  state: /* Paused */{
                    _0: x._0
                  },
                  show_details: model.show_details
                },
                /* NoCmd */0
              ];
      }
      if (model.state !== /* Running */0) {
        return [
                model,
                /* NoCmd */0
              ];
      }
      var msg = x._0;
      var match$1 = List.hd(model.history);
      var match$2 = Curry._2(update, match$1[1], msg);
      var dmodel$p_history = {
        hd: [
          Curry._1(string_of_msg, msg),
          match$2[0]
        ],
        tl: model.history
      };
      var dmodel$p_state = model.state;
      var dmodel$p_show_details = model.show_details;
      var dmodel$p = {
        history: dmodel$p_history,
        state: dmodel$p_state,
        show_details: dmodel$p_show_details
      };
      return [
              dmodel$p,
              Tea_cmd.map(client_msg, match$2[1])
            ];
    }
  };
  var view_styles = function (param) {
    var rule = function (selector, properties) {
      var x = $$String.concat(";", List.map((function (param) {
                  return param[0] + (":" + param[1]);
                }), properties));
      return {
              TAG: /* Text */1,
              _0: "" + selector + " {" + x + "}"
            };
    };
    return Tea_html2.node(undefined, "style", undefined, undefined, /* [] */0, {
                hd: rule("#debug.paused", {
                      hd: [
                        "position",
                        "fixed"
                      ],
                      tl: {
                        hd: [
                          "top",
                          "0"
                        ],
                        tl: {
                          hd: [
                            "left",
                            "0"
                          ],
                          tl: {
                            hd: [
                              "width",
                              "100%"
                            ],
                            tl: {
                              hd: [
                                "height",
                                "100%"
                              ],
                              tl: {
                                hd: [
                                  "pointer-events",
                                  "all"
                                ],
                                tl: {
                                  hd: [
                                    "background-color",
                                    "rgba(0,0,0,.1)"
                                  ],
                                  tl: {
                                    hd: [
                                      "box-shadow",
                                      "inset 0 0 10px #333"
                                    ],
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }),
                tl: {
                  hd: rule("#debug nav", {
                        hd: [
                          "position",
                          "fixed"
                        ],
                        tl: {
                          hd: [
                            "max-width",
                            "50%"
                          ],
                          tl: {
                            hd: [
                              "bottom",
                              "0"
                            ],
                            tl: {
                              hd: [
                                "right",
                                "6px"
                              ],
                              tl: {
                                hd: [
                                  "border-radius",
                                  "4px 4px 0 0"
                                ],
                                tl: {
                                  hd: [
                                    "background-color",
                                    "#444"
                                  ],
                                  tl: {
                                    hd: [
                                      "color",
                                      "#fff"
                                    ],
                                    tl: {
                                      hd: [
                                        "font-family",
                                        "monospace"
                                      ],
                                      tl: {
                                        hd: [
                                          "box-shadow",
                                          "0 0 10px #333"
                                        ],
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }),
                  tl: {
                    hd: rule("#debug.paused nav", {
                          hd: [
                            "height",
                            "50%"
                          ],
                          tl: {
                            hd: [
                              "padding-bottom",
                              "2em"
                            ],
                            tl: /* [] */0
                          }
                        }),
                    tl: {
                      hd: rule("#debug nav .toggle", {
                            hd: [
                              "padding",
                              "6px"
                            ],
                            tl: {
                              hd: [
                                "padding-left",
                                "9px"
                              ],
                              tl: {
                                hd: [
                                  "cursor",
                                  "pointer"
                                ],
                                tl: {
                                  hd: [
                                    "min-width",
                                    "24ch"
                                  ],
                                  tl: {
                                    hd: [
                                      "text-align",
                                      "center"
                                    ],
                                    tl: {
                                      hd: [
                                        "border-left",
                                        "3px solid #333"
                                      ],
                                      tl: {
                                        hd: [
                                          "border-radius",
                                          "4px 4px 0 0"
                                        ],
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }),
                      tl: {
                        hd: rule("#debug nav .toggle:before", {
                              hd: [
                                "content",
                                "' '"
                              ],
                              tl: {
                                hd: [
                                  "position",
                                  "absolute"
                                ],
                                tl: {
                                  hd: [
                                    "left",
                                    "0"
                                  ],
                                  tl: {
                                    hd: [
                                      "top",
                                      "0"
                                    ],
                                    tl: {
                                      hd: [
                                        "width",
                                        ".5ch"
                                      ],
                                      tl: {
                                        hd: [
                                          "height",
                                          "1.8ch"
                                        ],
                                        tl: {
                                          hd: [
                                            "margin",
                                            "1.2ch"
                                          ],
                                          tl: {
                                            hd: [
                                              "border",
                                              "solid #fff"
                                            ],
                                            tl: {
                                              hd: [
                                                "border-width",
                                                "0 .5ch"
                                              ],
                                              tl: /* [] */0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }),
                        tl: {
                          hd: rule("#debug.paused nav .toggle:before", {
                                hd: [
                                  "border-color",
                                  "transparent"
                                ],
                                tl: {
                                  hd: [
                                    "border-left-color",
                                    "#fff"
                                  ],
                                  tl: {
                                    hd: [
                                      "border-width",
                                      "1ch"
                                    ],
                                    tl: {
                                      hd: [
                                        "width",
                                        "0"
                                      ],
                                      tl: {
                                        hd: [
                                          "height",
                                          "0"
                                        ],
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                }
                              }),
                          tl: {
                            hd: rule("#debug nav .history", {
                                  hd: [
                                    "margin",
                                    "0"
                                  ],
                                  tl: {
                                    hd: [
                                      "padding",
                                      "0"
                                    ],
                                    tl: {
                                      hd: [
                                        "height",
                                        "100%"
                                      ],
                                      tl: {
                                        hd: [
                                          "overflow-y",
                                          "auto"
                                        ],
                                        tl: {
                                          hd: [
                                            "list-style",
                                            "none"
                                          ],
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  }
                                }),
                            tl: {
                              hd: rule("#debug nav .history li", {
                                    hd: [
                                      "margin",
                                      "0"
                                    ],
                                    tl: {
                                      hd: [
                                        "padding",
                                        "0.2ch"
                                      ],
                                      tl: {
                                        hd: [
                                          "border-left",
                                          "3px solid #333"
                                        ],
                                        tl: /* [] */0
                                      }
                                    }
                                  }),
                              tl: {
                                hd: rule("#debug nav .history li.selected", {
                                      hd: [
                                        "background-color",
                                        "#333"
                                      ],
                                      tl: /* [] */0
                                    }),
                                tl: {
                                  hd: rule("#debug nav .history span.details", {
                                        hd: [
                                          "display",
                                          "inline-block"
                                        ],
                                        tl: {
                                          hd: [
                                            "cursor",
                                            "pointer"
                                          ],
                                          tl: {
                                            hd: [
                                              "width",
                                              "1ch"
                                            ],
                                            tl: {
                                              hd: [
                                                "margin",
                                                "0 1ch"
                                              ],
                                              tl: {
                                                hd: [
                                                  "vertical-align",
                                                  "super"
                                                ],
                                                tl: /* [] */0
                                              }
                                            }
                                          }
                                        }
                                      }),
                                  tl: {
                                    hd: rule("#debug nav .history li.selected span.details:after", {
                                          hd: [
                                            "content",
                                            "'\\2026'"
                                          ],
                                          tl: /* [] */0
                                        }),
                                    tl: {
                                      hd: rule("#debug nav .history li.selected.show", {
                                            hd: [
                                              "border-left",
                                              "3px solid white"
                                            ],
                                            tl: /* [] */0
                                          }),
                                      tl: {
                                        hd: rule("#debug nav .history span.message", {
                                              hd: [
                                                "display",
                                                "inline-block"
                                              ],
                                              tl: {
                                                hd: [
                                                  "cursor",
                                                  "pointer"
                                                ],
                                                tl: {
                                                  hd: [
                                                    "white-space",
                                                    "nowrap"
                                                  ],
                                                  tl: {
                                                    hd: [
                                                      "overflow",
                                                      "hidden"
                                                    ],
                                                    tl: {
                                                      hd: [
                                                        "text-overflow",
                                                        "ellipsis"
                                                      ],
                                                      tl: {
                                                        hd: [
                                                          "width",
                                                          "calc(100% - 75px)"
                                                        ],
                                                        tl: /* [] */0
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }),
                                        tl: {
                                          hd: rule("#debug nav .history span.index", {
                                                hd: [
                                                  "display",
                                                  "inline-block"
                                                ],
                                                tl: {
                                                  hd: [
                                                    "min-width",
                                                    "3ch"
                                                  ],
                                                  tl: {
                                                    hd: [
                                                      "margin",
                                                      "0 1ch"
                                                    ],
                                                    tl: {
                                                      hd: [
                                                        "color",
                                                        "#aaa"
                                                      ],
                                                      tl: {
                                                        hd: [
                                                          "text-align",
                                                          "right"
                                                        ],
                                                        tl: {
                                                          hd: [
                                                            "float",
                                                            "right"
                                                          ],
                                                          tl: /* [] */0
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }),
                                          tl: {
                                            hd: rule("#debug aside.details", {
                                                  hd: [
                                                    "position",
                                                    "absolute"
                                                  ],
                                                  tl: {
                                                    hd: [
                                                      "width",
                                                      "40ch"
                                                    ],
                                                    tl: {
                                                      hd: [
                                                        "top",
                                                        "0"
                                                      ],
                                                      tl: {
                                                        hd: [
                                                          "bottom",
                                                          "0"
                                                        ],
                                                        tl: {
                                                          hd: [
                                                            "right",
                                                            "100%"
                                                          ],
                                                          tl: {
                                                            hd: [
                                                              "margin-right",
                                                              "1.5ch"
                                                            ],
                                                            tl: {
                                                              hd: [
                                                                "overflow",
                                                                "scroll"
                                                              ],
                                                              tl: {
                                                                hd: [
                                                                  "background-color",
                                                                  "#fff"
                                                                ],
                                                                tl: {
                                                                  hd: [
                                                                    "color",
                                                                    "#000"
                                                                  ],
                                                                  tl: {
                                                                    hd: [
                                                                      "box-shadow",
                                                                      "0 0 10px #333"
                                                                    ],
                                                                    tl: {
                                                                      hd: [
                                                                        "border-radius",
                                                                        "4px 4px 0 0"
                                                                      ],
                                                                      tl: {
                                                                        hd: [
                                                                          "border",
                                                                          "2px solid #333"
                                                                        ],
                                                                        tl: {
                                                                          hd: [
                                                                            "padding",
                                                                            "1ch"
                                                                          ],
                                                                          tl: {
                                                                            hd: [
                                                                              "white-space",
                                                                              "pre"
                                                                            ],
                                                                            tl: /* [] */0
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }),
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              });
  };
  var view_details = function (model) {
    var format = (function (v) {
        var formatRecord = function (data, labels) {
          return data.reduce(
            function (acc, cur, index) {
              acc[labels[index]] = formatValue(cur)
              return acc
            }, {})
        }
        var listToArray = function (data) {
          var result = []
          var cur = data
          while (typeof cur !== "number") {
            result.push(formatValue(cur[0]))
            cur = cur[1]
          }
          return result
        }
        var formatVariant = function (data, recordVariant) {
          if (recordVariant === "::") {
            return listToArray(data)
          }
          else {
            return formatRecord(data, [recordVariant])
          }
        }
        var formatValue = function (x) {
          var recordLabels, recordVariant, recordModule, recordPolyVar
          if (x == null) {
            return null
          }
          else if ((recordLabels = x[Symbol.for('BsRecord')]) !== undefined) {
            return formatRecord(x, recordLabels)
          }
          else if ((recordModule = x[Symbol.for('BsLocalModule')]) !== undefined) {
            return formatRecord(x, recordModule)
          }
          else if ((recordVariant = x[Symbol.for('BsVariant')]) !== undefined) {
            return formatVariant(x, recordVariant)
          }
          else if ((recordPolyVar = x[Symbol.for('BsPolyVar')]) !== undefined) {
            return x[1]
          }
          else if (Array.isArray(x)) {
            // tuple
            return x.map(formatValue)
          }
          else {
            // scalar
            return x
          }
        }
        return JSON.stringify(formatValue(v), null, 2);
      });
    return Tea_html2.aside(undefined, undefined, {
                hd: Tea_html2.Attributes.class$p("details"),
                tl: /* [] */0
              }, {
                hd: {
                  TAG: /* Text */1,
                  _0: format(model)
                },
                tl: /* [] */0
              });
  };
  var view_history = function (model, selected_index) {
    var count = List.length(model.history);
    return Tea_html2.ul(undefined, undefined, {
                hd: Tea_html2.Attributes.class$p("history"),
                tl: /* [] */0
              }, List.mapi((function (i, param) {
                      var selected = i === selected_index;
                      return Tea_html2.li(undefined, undefined, {
                                  hd: Tea_html2.Events.onClick({
                                        TAG: /* SelectHistoryItem */1,
                                        _0: i
                                      }),
                                  tl: {
                                    hd: Tea_html2.Attributes.classList({
                                          hd: [
                                            "selected",
                                            selected
                                          ],
                                          tl: {
                                            hd: [
                                              "show",
                                              selected && model.show_details
                                            ],
                                            tl: /* [] */0
                                          }
                                        }),
                                    tl: /* [] */0
                                  }
                                }, {
                                  hd: Tea_html2.span(undefined, undefined, {
                                        hd: Tea_html2.Attributes.classList({
                                              hd: [
                                                "details",
                                                true
                                              ],
                                              tl: {
                                                hd: [
                                                  "show",
                                                  true
                                                ],
                                                tl: /* [] */0
                                              }
                                            }),
                                        tl: selected ? ({
                                              hd: Tea_html2.Events.onClick(/* ToggleDetails */1),
                                              tl: {
                                                hd: Tea_html2.Attributes.title("toggle details"),
                                                tl: /* [] */0
                                              }
                                            }) : ({
                                              hd: Tea_html2.Attributes.noProp,
                                              tl: {
                                                hd: Tea_html2.Attributes.noProp,
                                                tl: /* [] */0
                                              }
                                            })
                                      }, {
                                        hd: selected && model.show_details ? view_details(param[1]) : Tea_html2.noNode,
                                        tl: /* [] */0
                                      }),
                                  tl: {
                                    hd: Tea_html2.span(undefined, undefined, {
                                          hd: Tea_html2.Attributes.class$p("message"),
                                          tl: /* [] */0
                                        }, {
                                          hd: {
                                            TAG: /* Text */1,
                                            _0: param[0]
                                          },
                                          tl: /* [] */0
                                        }),
                                    tl: {
                                      hd: Tea_html2.span(undefined, undefined, {
                                            hd: Tea_html2.Attributes.class$p("index"),
                                            tl: /* [] */0
                                          }, {
                                            hd: {
                                              TAG: /* Text */1,
                                              _0: String(count - i | 0)
                                            },
                                            tl: /* [] */0
                                          }),
                                      tl: /* [] */0
                                    }
                                  }
                                });
                    }), model.history));
  };
  var view$p = function (model) {
    var index = model.state;
    var match;
    if (index) {
      var index$1 = index._0;
      match = [
        index$1,
        List.nth(model.history, index$1)[1],
        true
      ];
    } else {
      match = [
        0,
        List.hd(model.history)[1],
        false
      ];
    }
    var paused = match[2];
    var history_count = List.length(model.history);
    return Tea_html2.div(undefined, undefined, /* [] */0, {
                hd: Vdom.map(client_msg, Curry._1(view, match[1])),
                tl: {
                  hd: Tea_html2.div(undefined, undefined, {
                        hd: Tea_html2.Attributes.id("debug"),
                        tl: {
                          hd: Tea_html2.Attributes.classList({
                                hd: [
                                  "paused",
                                  paused
                                ],
                                tl: /* [] */0
                              }),
                          tl: /* [] */0
                        }
                      }, {
                        hd: view_styles(undefined),
                        tl: {
                          hd: Tea_html2.nav(undefined, undefined, /* [] */0, {
                                hd: Tea_html2.div(undefined, undefined, {
                                      hd: Tea_html2.Attributes.class$p("toggle"),
                                      tl: {
                                        hd: Tea_html2.Events.onClick(/* TogglePaused */0),
                                        tl: {
                                          hd: paused ? Tea_html2.Attributes.title("click to resume") : Tea_html2.Attributes.title("click to pause"),
                                          tl: /* [] */0
                                        }
                                      }
                                    }, {
                                      hd: {
                                        TAG: /* Text */1,
                                        _0: "Explore History (" + history_count + ")"
                                      },
                                      tl: /* [] */0
                                    }),
                                tl: {
                                  hd: paused ? view_history(model, match[0]) : Tea_html2.noNode,
                                  tl: /* [] */0
                                }
                              }),
                          tl: /* [] */0
                        }
                      }),
                  tl: /* [] */0
                }
              });
  };
  var subscriptions$p = function (model) {
    return Tea_sub.map(client_msg, Curry._1(subscriptions, List.hd(model.history)[1]));
  };
  var shutdown$p = function (model) {
    return Tea_cmd.map(client_msg, Curry._1(shutdown, List.hd(model.history)[1]));
  };
  return [
          init_debug,
          update$p,
          view$p,
          subscriptions$p,
          shutdown$p
        ];
}

function debug_program(string_of_msg, param) {
  var init = param.init;
  var match = debug(string_of_msg, param.update, param.view, param.subscriptions, param.shutdown);
  var init_debug = match[0];
  return {
          init: (function (flags) {
              return Curry._1(init_debug, Curry._1(init, flags));
            }),
          update: match[1],
          view: match[2],
          subscriptions: match[3],
          shutdown: match[4]
        };
}

function debug_navigation_program(string_of_msg, param) {
  var init = param.init;
  var match = debug(string_of_msg, param.update, param.view, param.subscriptions, param.shutdown);
  var init_debug = match[0];
  return {
          init: (function (flags, $$location) {
              return Curry._1(init_debug, Curry._2(init, flags, $$location));
            }),
          update: match[1],
          view: match[2],
          subscriptions: match[3],
          shutdown: match[4]
        };
}

function beginnerProgram(param, string_of_msg, pnode, flags) {
  var update = param.update;
  var model = param.model;
  var debugged = debug_program(string_of_msg, {
        init: (function (param) {
            return [
                    model,
                    /* NoCmd */0
                  ];
          }),
        update: (function (model, msg) {
            return [
                    Curry._2(update, model, msg),
                    /* NoCmd */0
                  ];
          }),
        view: param.view,
        subscriptions: (function (_model) {
            return /* NoSub */0;
          }),
        shutdown: (function (_model) {
            return /* NoCmd */0;
          })
      });
  return Tea_app.program(debugged, pnode, flags);
}

function standardProgram(param, string_of_msg, pnode, flags) {
  var debugged = debug_program(string_of_msg, {
        init: param.init,
        update: param.update,
        view: param.view,
        subscriptions: param.subscriptions,
        shutdown: (function (_model) {
            return /* NoCmd */0;
          })
      });
  return Tea_app.program(debugged, pnode, flags);
}

function program(param, string_of_msg, pnode, flags) {
  var debugged = debug_program(string_of_msg, {
        init: param.init,
        update: param.update,
        view: param.view,
        subscriptions: param.subscriptions,
        shutdown: param.shutdown
      });
  return Tea_app.program(debugged, pnode, flags);
}

function navigationProgram(location_to_msg, param, string_of_msg, pnode, flags) {
  var $$location = function ($$location$1) {
    return {
            TAG: /* ClientMsg */0,
            _0: Curry._1(location_to_msg, $$location$1)
          };
  };
  var debugged = debug_navigation_program(string_of_msg, {
        init: param.init,
        update: param.update,
        view: param.view,
        subscriptions: param.subscriptions,
        shutdown: param.shutdown
      });
  return Tea_navigation.navigationProgram($$location, debugged)(pnode, flags);
}

exports.client_msg = client_msg;
exports.debug = debug;
exports.debug_program = debug_program;
exports.debug_navigation_program = debug_navigation_program;
exports.beginnerProgram = beginnerProgram;
exports.standardProgram = standardProgram;
exports.program = program;
exports.navigationProgram = navigationProgram;
/* Tea_html2 Not a pure module */
